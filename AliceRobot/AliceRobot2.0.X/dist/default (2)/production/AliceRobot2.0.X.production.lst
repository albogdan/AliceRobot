

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Mar 05 16:31:45 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,inline
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1,inline
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           ; Version 2.05
    70                           ; Generated 20/12/2018 GMT
    71                           ; 
    72                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F4620 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     
   104                           	psect	idataCOMRAM
   105  00276C                     __pidataCOMRAM:
   106                           	opt callstack 0
   107                           
   108                           ;initializer for stoa@F1136
   109  00276C  28                 	db	40
   110  00276D  6E                 	db	110
   111  00276E  75                 	db	117
   112  00276F  6C                 	db	108
   113  002770  6C                 	db	108
   114  002771  29                 	db	41
   115  002772  00                 	db	0
   116                           
   117                           ;initializer for _direction
   118  002773  01                 	db	1
   119                           
   120                           	psect	smallconst
   121  001000                     __psmallconst:
   122                           	opt callstack 0
   123  001000  00                 	db	0
   124  001001                     _keys:
   125                           	opt callstack 0
   126  001001  31                 	db	49
   127  001002  32                 	db	50
   128  001003  33                 	db	51
   129  001004  41                 	db	65
   130  001005  34                 	db	52
   131  001006  35                 	db	53
   132  001007  36                 	db	54
   133  001008  42                 	db	66
   134  001009  37                 	db	55
   135  00100A  38                 	db	56
   136  00100B  39                 	db	57
   137  00100C  43                 	db	67
   138  00100D  2A                 	db	42
   139  00100E  30                 	db	48
   140  00100F  23                 	db	35
   141  001010  44                 	db	68
   142  001011  00                 	db	0
   143  001012                     __end_of_keys:
   144                           	opt callstack 0
   145  001012  50                 	db	80
   146  001013                     __end_of_LCD_LINE4_ADDR:
   147                           	opt callstack 0
   148  001013  10                 	db	16
   149  001014                     __end_of_LCD_LINE3_ADDR:
   150                           	opt callstack 0
   151  001014  40                 	db	64
   152  001015                     __end_of_LCD_LINE2_ADDR:
   153                           	opt callstack 0
   154  001015                     _LCD_LINE1_ADDR:
   155                           	opt callstack 0
   156  001015  00                 	db	0
   157  001016                     __end_of_LCD_LINE1_ADDR:
   158                           	opt callstack 0
   159  001016                     _LCD_SIZE_VERT:
   160                           	opt callstack 0
   161  001016  04                 	db	4
   162  001017                     __end_of_LCD_SIZE_VERT:
   163                           	opt callstack 0
   164  001017                     _LCD_SIZE_HORZ:
   165                           	opt callstack 0
   166  001017  10                 	db	16
   167  001018                     __end_of_LCD_SIZE_HORZ:
   168                           	opt callstack 0
   169  0000                     _LATAbits	set	3977
   170  0000                     _IPR1bits	set	3999
   171  0000                     _PIE1bits	set	3997
   172  0000                     _RCSTAbits	set	4011
   173  0000                     _TXSTAbits	set	4012
   174  0000                     _SPBRG	set	4015
   175  0000                     _RCONbits	set	4048
   176  0000                     _ADCON2	set	4032
   177  0000                     _CMCONbits	set	4020
   178  0000                     _CVRCON	set	4021
   179  0000                     _ADCON2bits	set	4032
   180  0000                     _ADCON1	set	4033
   181  0000                     _ADCON0	set	4034
   182  0000                     _TRISD	set	3989
   183  0000                     _TRISC	set	3988
   184  0000                     _TRISB	set	3987
   185  0000                     _TRISA	set	3986
   186  0000                     _LATE	set	3981
   187  0000                     _LATC	set	3979
   188  0000                     _LATB	set	3978
   189  0000                     _LATA	set	3977
   190  0000                     _TXREG	set	4013
   191  0000                     _RCREG	set	4014
   192  0000                     _PORTDbits	set	3971
   193  0000                     _PORTB	set	3969
   194  0000                     _LATD	set	3980
   195  0000                     _LATDbits	set	3980
   196  0000                     _INTCONbits	set	4082
   197  0000                     _SSPBUF	set	4041
   198  0000                     _SSPCON2bits	set	4037
   199  0000                     _SSPCON1	set	4038
   200  0000                     _SSPADD	set	4040
   201  0000                     _TRISCbits	set	3988
   202  0000                     _SSPCON1bits	set	4038
   203  0000                     _SSPCON2	set	4037
   204  0000                     _SSPSTAT	set	4039
   205  0000                     _INTEDG1	set	32653
   206  0000                     _INTEDG0	set	32654
   207  0000                     _TXIF	set	31988
   208  0000                     _TXIE	set	31980
   209  0000                     _RCIF	set	31989
   210  0000                     _RCIE	set	31981
   211  0000                     _INT1IE	set	32643
   212  0000                     _INT1IF	set	32640
   213  0000                     _INT2IF	set	32641
   214  0000                     _INT2IE	set	32644
   215  0000                     _INT0IF	set	32657
   216  0000                     _INT0IE	set	32660
   217  001018                     STR_1:
   218  001018  49                 	db	73	;'I'
   219  001019  6E                 	db	110	;'n'
   220  00101A  69                 	db	105	;'i'
   221  00101B  74                 	db	116	;'t'
   222  00101C  20                 	db	32
   223  00101D  63                 	db	99	;'c'
   224  00101E  6F                 	db	111	;'o'
   225  00101F  6D                 	db	109	;'m'
   226  001020  70                 	db	112	;'p'
   227  001021  6C                 	db	108	;'l'
   228  001022  65                 	db	101	;'e'
   229  001023  74                 	db	116	;'t'
   230  001024  65                 	db	101	;'e'
   231  001025  0A                 	db	10
   232  001026  00                 	db	0
   233  001027                     STR_6:
   234  001027  25                 	db	37
   235  001028  63                 	db	99	;'c'
   236  001029  25                 	db	37
   237  00102A  63                 	db	99	;'c'
   238  00102B  0A                 	db	10
   239  00102C  00                 	db	0
   240  00102D                     STR_2:
   241  00102D  25                 	db	37
   242  00102E  2E                 	db	46
   243  00102F  2A                 	db	42
   244  001030  73                 	db	115	;'s'
   245  001031  00                 	db	0
   246  0000                     
   247                           ; #config settings
   248  001032  00                 	db	0	; dummy byte at the end
   249  0000                     
   250                           	psect	cinit
   251  00231E                     __pcinit:
   252                           	opt callstack 0
   253  00231E                     start_initialization:
   254                           	opt callstack 0
   255  00231E                     __initialization:
   256                           	opt callstack 0
   257                           
   258                           ; Initialize objects allocated to COMRAM (8 bytes)
   259                           ; load TBLPTR registers with __pidataCOMRAM
   260  00231E  0E6C               	movlw	low __pidataCOMRAM
   261  002320  6EF6               	movwf	tblptrl,c
   262  002322  0E27               	movlw	high __pidataCOMRAM
   263  002324  6EF7               	movwf	tblptrh,c
   264  002326  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   265  002328  6EF8               	movwf	tblptru,c
   266  00232A  EE00  F05A         	lfsr	0,__pdataCOMRAM
   267  00232E  EE10 F008          	lfsr	1,8
   268  002332                     copy_data0:
   269  002332  0009               	tblrd		*+
   270  002334  CFF5 FFEE          	movff	tablat,postinc0
   271  002338  50E5               	movf	postdec1,w,c
   272  00233A  50E1               	movf	fsr1l,w,c
   273  00233C  E1FA               	bnz	copy_data0
   274                           
   275                           ; Clear objects allocated to BANK1 (128 bytes)
   276  00233E  EE01  F000         	lfsr	0,__pbssBANK1
   277  002342  0E80               	movlw	128
   278  002344                     clear_0:
   279  002344  6AEE               	clrf	postinc0,c
   280  002346  06E8               	decf	wreg,f,c
   281  002348  E1FD               	bnz	clear_0
   282                           
   283                           ; Clear objects allocated to BANK0 (33 bytes)
   284  00234A  EE00  F0AC         	lfsr	0,__pbssBANK0
   285  00234E  0E21               	movlw	33
   286  002350                     clear_1:
   287  002350  6AEE               	clrf	postinc0,c
   288  002352  06E8               	decf	wreg,f,c
   289  002354  E1FD               	bnz	clear_1
   290                           
   291                           ; Clear objects allocated to COMRAM (20 bytes)
   292  002356  EE00  F046         	lfsr	0,__pbssCOMRAM
   293  00235A  0E14               	movlw	20
   294  00235C                     clear_2:
   295  00235C  6AEE               	clrf	postinc0,c
   296  00235E  06E8               	decf	wreg,f,c
   297  002360  E1FD               	bnz	clear_2
   298  002362                     end_of_initialization:
   299                           	opt callstack 0
   300  002362                     __end_of__initialization:
   301                           	opt callstack 0
   302  002362  9062               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   303  002364  9262               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   304  002366  0E00               	movlw	low (__Lmediumconst shr (0+16))
   305  002368  6EF8               	movwf	tblptru,c
   306  00236A  0100               	movlb	0
   307  00236C  EF1A  F008         	goto	_main	;jump to C main() function
   308                           
   309                           	psect	bssCOMRAM
   310  000046                     __pbssCOMRAM:
   311                           	opt callstack 0
   312  000046                     _distanceR:
   313                           	opt callstack 0
   314  000046                     	ds	4
   315  00004A                     _distanceL:
   316                           	opt callstack 0
   317  00004A                     	ds	4
   318  00004E                     _nout:
   319                           	opt callstack 0
   320  00004E                     	ds	2
   321  000050                     _width:
   322                           	opt callstack 0
   323  000050                     	ds	2
   324  000052                     _prec:
   325                           	opt callstack 0
   326  000052                     	ds	2
   327  000054                     _flags:
   328                           	opt callstack 0
   329  000054                     	ds	2
   330  000056                     __tx_buffer_tail:
   331                           	opt callstack 0
   332  000056                     	ds	1
   333  000057                     __tx_buffer_head:
   334                           	opt callstack 0
   335  000057                     	ds	1
   336  000058                     __rx_buffer_tail:
   337                           	opt callstack 0
   338  000058                     	ds	1
   339  000059                     __rx_buffer_head:
   340                           	opt callstack 0
   341  000059                     	ds	1
   342                           
   343                           	psect	dataCOMRAM
   344  00005A                     __pdataCOMRAM:
   345                           	opt callstack 0
   346  00005A                     stoa@F1136:
   347                           	opt callstack 0
   348  00005A                     	ds	7
   349  000061                     _direction:
   350                           	opt callstack 0
   351  000061                     	ds	1
   352                           
   353                           	psect	bssBANK0
   354  0000AC                     __pbssBANK0:
   355                           	opt callstack 0
   356  0000AC                     _key_was_pressed:
   357                           	opt callstack 0
   358  0000AC                     	ds	1
   359  0000AD                     _dbuf:
   360                           	opt callstack 0
   361  0000AD                     	ds	32
   362                           
   363                           	psect	bssBANK1
   364  000100                     __pbssBANK1:
   365                           	opt callstack 0
   366  000100                     __tx_buffer:
   367                           	opt callstack 0
   368  000100                     	ds	64
   369  000140                     __rx_buffer:
   370                           	opt callstack 0
   371  000140                     	ds	64
   372                           
   373                           	psect	cstackBANK1
   374  000180                     __pcstackBANK1:
   375                           	opt callstack 0
   376  000180                     main@uart_char_to_send:
   377                           	opt callstack 0
   378                           
   379                           ; 25 bytes @ 0x0
   380  000180                     	ds	25
   381  000199                     main@command:
   382                           	opt callstack 0
   383                           
   384                           ; 25 bytes @ 0x19
   385  000199                     	ds	25
   386  0001B2                     main@lcdDisplay:
   387                           	opt callstack 0
   388                           
   389                           ; 16 bytes @ 0x32
   390  0001B2                     	ds	18
   391  0001C4                     main@keypress:
   392                           	opt callstack 0
   393                           
   394                           ; 1 bytes @ 0x44
   395  0001C4                     	ds	1
   396  0001C5                     main@commandReceived:
   397                           	opt callstack 0
   398                           
   399                           ; 1 bytes @ 0x45
   400  0001C5                     	ds	1
   401  0001C6                     main@index:
   402                           	opt callstack 0
   403                           
   404                           ; 2 bytes @ 0x46
   405  0001C6                     	ds	2
   406                           
   407                           	psect	cstackBANK0
   408  000080                     __pcstackBANK0:
   409                           	opt callstack 0
   410  000080                     ?_vfpfcnvrt:
   411                           	opt callstack 0
   412  000080                     vfpfcnvrt@fp:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0x0
   416  000080                     	ds	2
   417  000082                     vfpfcnvrt@fmt:
   418                           	opt callstack 0
   419                           
   420                           ; 2 bytes @ 0x2
   421  000082                     	ds	2
   422  000084                     vfpfcnvrt@ap:
   423                           	opt callstack 0
   424                           
   425                           ; 2 bytes @ 0x4
   426  000084                     	ds	2
   427  000086                     vfpfcnvrt@cp:
   428                           	opt callstack 0
   429                           
   430                           ; 2 bytes @ 0x6
   431  000086                     	ds	2
   432  000088                     vfpfcnvrt@c:
   433                           	opt callstack 0
   434                           
   435                           ; 1 bytes @ 0x8
   436  000088                     	ds	1
   437  000089                     _vfpfcnvrt$1122:
   438                           	opt callstack 0
   439                           
   440                           ; 2 bytes @ 0x9
   441  000089                     	ds	2
   442  00008B                     _vfpfcnvrt$1123:
   443                           	opt callstack 0
   444                           
   445                           ; 2 bytes @ 0xB
   446  00008B                     	ds	2
   447  00008D                     ?_vfprintf:
   448                           	opt callstack 0
   449  00008D                     vfprintf@fp:
   450                           	opt callstack 0
   451                           
   452                           ; 2 bytes @ 0xD
   453  00008D                     	ds	2
   454  00008F                     vfprintf@fmt:
   455                           	opt callstack 0
   456                           
   457                           ; 2 bytes @ 0xF
   458  00008F                     	ds	2
   459  000091                     vfprintf@ap:
   460                           	opt callstack 0
   461                           
   462                           ; 2 bytes @ 0x11
   463  000091                     	ds	2
   464  000093                     vfprintf@cfmt:
   465                           	opt callstack 0
   466                           
   467                           ; 2 bytes @ 0x13
   468  000093                     	ds	2
   469  000095                     ?_sprintf:
   470                           	opt callstack 0
   471  000095                     sprintf@s:
   472                           	opt callstack 0
   473                           
   474                           ; 2 bytes @ 0x15
   475  000095                     	ds	2
   476  000097                     sprintf@fmt:
   477                           	opt callstack 0
   478                           
   479                           ; 2 bytes @ 0x17
   480  000097                     	ds	8
   481  00009F                     sprintf@ap:
   482                           	opt callstack 0
   483                           
   484                           ; 2 bytes @ 0x1F
   485  00009F                     	ds	2
   486  0000A1                     sprintf@f:
   487                           	opt callstack 0
   488                           
   489                           ; 6 bytes @ 0x21
   490  0000A1                     	ds	6
   491  0000A7                     ??_main:
   492                           
   493                           ; 1 bytes @ 0x27
   494  0000A7                     	ds	5
   495                           
   496                           	psect	cstackCOMRAM
   497  000001                     __pcstackCOMRAM:
   498                           	opt callstack 0
   499  000001                     ?___fladd:
   500                           	opt callstack 0
   501  000001                     ___fladd@b:
   502                           	opt callstack 0
   503                           
   504                           ; 4 bytes @ 0x0
   505  000001                     	ds	4
   506  000005                     ___fladd@a:
   507                           	opt callstack 0
   508                           
   509                           ; 4 bytes @ 0x4
   510  000005                     	ds	4
   511  000009                     ??___fladd:
   512                           
   513                           ; 1 bytes @ 0x8
   514  000009                     	ds	4
   515  00000D                     ___fladd@signs:
   516                           	opt callstack 0
   517                           
   518                           ; 1 bytes @ 0xC
   519  00000D                     	ds	1
   520  00000E                     ___fladd@aexp:
   521                           	opt callstack 0
   522                           
   523                           ; 1 bytes @ 0xD
   524  00000E                     	ds	1
   525  00000F                     ___fladd@bexp:
   526                           	opt callstack 0
   527                           
   528                           ; 1 bytes @ 0xE
   529  00000F                     	ds	1
   530  000010                     ___fladd@grs:
   531                           	opt callstack 0
   532                           
   533                           ; 1 bytes @ 0xF
   534  000010                     	ds	1
   535  000011                     ?___flsub:
   536                           	opt callstack 0
   537  000011                     ___flsub@b:
   538                           	opt callstack 0
   539                           
   540                           ; 4 bytes @ 0x10
   541  000011                     	ds	4
   542  000015                     ___flsub@a:
   543                           	opt callstack 0
   544                           
   545                           ; 4 bytes @ 0x14
   546  000015                     	ds	4
   547  000019                     ??_low_isr:
   548                           
   549                           ; 1 bytes @ 0x18
   550  000019                     	ds	5
   551  00001E                     ??_I2C_Master_Wait:
   552  00001E                     ?_UART_available:
   553                           	opt callstack 0
   554  00001E                     ?_strlen:
   555                           	opt callstack 0
   556  00001E                     ?_isdigit:
   557                           	opt callstack 0
   558  00001E                     ?_isspace:
   559                           	opt callstack 0
   560  00001E                     ?___wmul:
   561                           	opt callstack 0
   562  00001E                     ?___lldiv:
   563                           	opt callstack 0
   564  00001E                     ?___aldiv:
   565                           	opt callstack 0
   566  00001E                     pulse_e@interruptState:
   567                           	opt callstack 0
   568  00001E                     UART_send_char@c:
   569                           	opt callstack 0
   570  00001E                     UART_read@c:
   571                           	opt callstack 0
   572  00001E                     ___wmul@multiplier:
   573                           	opt callstack 0
   574  00001E                     isdigit@c:
   575                           	opt callstack 0
   576  00001E                     isspace@c:
   577                           	opt callstack 0
   578  00001E                     strlen@s:
   579                           	opt callstack 0
   580  00001E                     ___lldiv@dividend:
   581                           	opt callstack 0
   582  00001E                     ___aldiv@dividend:
   583                           	opt callstack 0
   584                           
   585                           ; 4 bytes @ 0x1D
   586  00001E                     	ds	1
   587  00001F                     send_nibble@data:
   588                           	opt callstack 0
   589  00001F                     I2C_Master_Write@byteToWrite:
   590                           	opt callstack 0
   591  00001F                     UART_send_string@message:
   592                           	opt callstack 0
   593                           
   594                           ; 2 bytes @ 0x1E
   595  00001F                     	ds	1
   596  000020                     ??_UART_available:
   597  000020                     ??_isdigit:
   598  000020                     ??_isspace:
   599  000020                     send_byte@data:
   600                           	opt callstack 0
   601  000020                     ___wmul@multiplicand:
   602                           	opt callstack 0
   603  000020                     strlen@a:
   604                           	opt callstack 0
   605                           
   606                           ; 2 bytes @ 0x1F
   607  000020                     	ds	1
   608  000021                     ??_UART_send_string:
   609  000021                     lcdInst@data:
   610                           	opt callstack 0
   611  000021                     putch@data:
   612                           	opt callstack 0
   613  000021                     LCD_write_str@str:
   614                           	opt callstack 0
   615                           
   616                           ; 2 bytes @ 0x20
   617  000021                     	ds	1
   618  000022                     ??_initLCD:
   619  000022                     LCD_set_cursor@row:
   620                           	opt callstack 0
   621  000022                     ___wmul@product:
   622                           	opt callstack 0
   623  000022                     fputc@c:
   624                           	opt callstack 0
   625  000022                     ___lldiv@divisor:
   626                           	opt callstack 0
   627  000022                     ___aldiv@divisor:
   628                           	opt callstack 0
   629                           
   630                           ; 4 bytes @ 0x21
   631  000022                     	ds	1
   632  000023                     UART_send_string@i:
   633                           	opt callstack 0
   634                           
   635                           ; 2 bytes @ 0x22
   636  000023                     	ds	1
   637  000024                     _isspace$1597:
   638                           	opt callstack 0
   639  000024                     LCD_set_cursor@column:
   640                           	opt callstack 0
   641  000024                     LCD_write_str@i:
   642                           	opt callstack 0
   643  000024                     fputc@fp:
   644                           	opt callstack 0
   645                           
   646                           ; 2 bytes @ 0x23
   647  000024                     	ds	1
   648  000025                     ?_atoi:
   649                           	opt callstack 0
   650  000025                     atoi@s:
   651                           	opt callstack 0
   652                           
   653                           ; 2 bytes @ 0x24
   654  000025                     	ds	1
   655  000026                     ??_fputc:
   656  000026                     ___aldiv@counter:
   657                           	opt callstack 0
   658  000026                     ___lldiv@quotient:
   659                           	opt callstack 0
   660                           
   661                           ; 4 bytes @ 0x25
   662  000026                     	ds	1
   663  000027                     ??_atoi:
   664  000027                     ___aldiv@sign:
   665                           	opt callstack 0
   666                           
   667                           ; 1 bytes @ 0x26
   668  000027                     	ds	1
   669  000028                     ___aldiv@quotient:
   670                           	opt callstack 0
   671                           
   672                           ; 4 bytes @ 0x27
   673  000028                     	ds	2
   674  00002A                     ___lldiv@counter:
   675                           	opt callstack 0
   676                           
   677                           ; 1 bytes @ 0x29
   678  00002A                     	ds	1
   679  00002B                     ?_stoa:
   680                           	opt callstack 0
   681  00002B                     stoa@fp:
   682                           	opt callstack 0
   683  00002B                     atoi@neg:
   684                           	opt callstack 0
   685  00002B                     fputs@s:
   686                           	opt callstack 0
   687  00002B                     I2C_Master_Init@clockFreq:
   688                           	opt callstack 0
   689                           
   690                           ; 4 bytes @ 0x2A
   691  00002B                     	ds	1
   692  00002C                     ??_UART_Init:
   693                           
   694                           ; 1 bytes @ 0x2B
   695  00002C                     	ds	1
   696  00002D                     stoa@s:
   697                           	opt callstack 0
   698  00002D                     _atoi$1579:
   699                           	opt callstack 0
   700  00002D                     fputs@fp:
   701                           	opt callstack 0
   702                           
   703                           ; 2 bytes @ 0x2C
   704  00002D                     	ds	2
   705  00002F                     ??_I2C_Master_Init:
   706  00002F                     ??_stoa:
   707  00002F                     fputs@c:
   708                           	opt callstack 0
   709  00002F                     _atoi$1581:
   710                           	opt callstack 0
   711                           
   712                           ; 2 bytes @ 0x2E
   713  00002F                     	ds	1
   714  000030                     fputs@i:
   715                           	opt callstack 0
   716  000030                     UART_Init@baudRate:
   717                           	opt callstack 0
   718  000030                     stoa@nuls:
   719                           	opt callstack 0
   720                           
   721                           ; 7 bytes @ 0x2F
   722  000030                     	ds	1
   723  000031                     _atoi$1580:
   724                           	opt callstack 0
   725                           
   726                           ; 1 bytes @ 0x30
   727  000031                     	ds	1
   728  000032                     ?_pad:
   729                           	opt callstack 0
   730  000032                     pad@fp:
   731                           	opt callstack 0
   732  000032                     atoi@n:
   733                           	opt callstack 0
   734                           
   735                           ; 2 bytes @ 0x31
   736  000032                     	ds	2
   737  000034                     pad@buf:
   738                           	opt callstack 0
   739                           
   740                           ; 2 bytes @ 0x33
   741  000034                     	ds	2
   742  000036                     pad@p:
   743                           	opt callstack 0
   744                           
   745                           ; 2 bytes @ 0x35
   746  000036                     	ds	1
   747  000037                     stoa@i:
   748                           	opt callstack 0
   749                           
   750                           ; 2 bytes @ 0x36
   751  000037                     	ds	1
   752  000038                     ??_pad:
   753                           
   754                           ; 1 bytes @ 0x37
   755  000038                     	ds	1
   756  000039                     pad@i:
   757                           	opt callstack 0
   758  000039                     stoa@w:
   759                           	opt callstack 0
   760                           
   761                           ; 2 bytes @ 0x38
   762  000039                     	ds	2
   763  00003B                     pad@w:
   764                           	opt callstack 0
   765  00003B                     stoa@cp:
   766                           	opt callstack 0
   767                           
   768                           ; 2 bytes @ 0x3A
   769  00003B                     	ds	2
   770  00003D                     ?_ctoa:
   771                           	opt callstack 0
   772  00003D                     ctoa@fp:
   773                           	opt callstack 0
   774  00003D                     stoa@p:
   775                           	opt callstack 0
   776                           
   777                           ; 2 bytes @ 0x3C
   778  00003D                     	ds	2
   779  00003F                     ctoa@c:
   780                           	opt callstack 0
   781  00003F                     stoa@l:
   782                           	opt callstack 0
   783                           
   784                           ; 2 bytes @ 0x3E
   785  00003F                     	ds	1
   786  000040                     ctoa@w:
   787                           	opt callstack 0
   788                           
   789                           ; 2 bytes @ 0x3F
   790  000040                     	ds	2
   791  000042                     ??_vfpfcnvrt:
   792                           
   793                           ; 1 bytes @ 0x41
   794  000042                     	ds	4
   795  000046                     
   796                           ; 1 bytes @ 0x45
   797 ;;
   798 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   799 ;;
   800 ;; *************** function _main *****************
   801 ;; Defined at:
   802 ;;		line 147 in file "main.c"
   803 ;; Parameters:    Size  Location     Type
   804 ;;		None
   805 ;; Auto vars:     Size  Location     Type
   806 ;;  keypress        1   68[BANK1 ] unsigned char 
   807 ;;  command        25   25[BANK1 ] unsigned char [25]
   808 ;;  uart_char_to   25    0[BANK1 ] unsigned char [25]
   809 ;;  lcdDisplay     16   50[BANK1 ] unsigned char [16]
   810 ;;  buffer         10    0        unsigned char [10]
   811 ;;  index           2   70[BANK1 ] int 
   812 ;;  commandLengt    2    0        int 
   813 ;;  commandRecei    1   69[BANK1 ] _Bool 
   814 ;;  toPrint         1    0        unsigned char 
   815 ;; Return value:  Size  Location     Type
   816 ;;                  1    wreg      void 
   817 ;; Registers used:
   818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   819 ;; Tracked objects:
   820 ;;		On entry : 0/0
   821 ;;		On exit  : 0/0
   822 ;;		Unchanged: 0/0
   823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   825 ;;      Locals:         0       0      72       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   826 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   827 ;;      Totals:         0       5      72       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   828 ;;Total ram usage:       77 bytes
   829 ;; Hardware stack levels required when called:   15
   830 ;; This function calls:
   831 ;;		_DCMotorAllOff
   832 ;;		_DCMotorCenterLeft
   833 ;;		_DCMotorCenterRight
   834 ;;		_DCMotorLeftBkwd
   835 ;;		_DCMotorLeftFwd
   836 ;;		_DCMotorLeftRightBkwdON
   837 ;;		_DCMotorLeftRightFwdON
   838 ;;		_DCMotorRightBkwd
   839 ;;		_DCMotorRightFwd
   840 ;;		_I2C_Master_Init
   841 ;;		_LCD_set_cursor
   842 ;;		_LCD_write_str
   843 ;;		_RTC_Init
   844 ;;		_UART_Init
   845 ;;		_UART_available
   846 ;;		_UART_read
   847 ;;		_UART_send_string
   848 ;;		_initLCD
   849 ;;		_portSetup
   850 ;;		_sprintf
   851 ;; This function is called by:
   852 ;;		Startup code after reset
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           	psect	text0
   857  001034                     __ptext0:
   858                           	opt callstack 0
   859  001034                     _main:
   860                           	opt callstack 16
   861                           
   862                           ;main.c: 149:     portSetup();
   863                           
   864                           ;incstack = 0
   865  001034  ECE1  F011         	call	_portSetup	;wreg free
   866                           
   867                           ;main.c: 150:     initLCD();
   868  001038  EC01  F011         	call	_initLCD	;wreg free
   869                           
   870                           ;main.c: 151:     I2C_Master_Init(100000);
   871  00103C  0EA0               	movlw	160
   872  00103E  6E2B               	movwf	I2C_Master_Init@clockFreq,c
   873  001040  0E86               	movlw	134
   874  001042  6E2C               	movwf	I2C_Master_Init@clockFreq+1,c
   875  001044  0E01               	movlw	1
   876  001046  6E2D               	movwf	I2C_Master_Init@clockFreq+2,c
   877  001048  0E00               	movlw	0
   878  00104A  6E2E               	movwf	I2C_Master_Init@clockFreq+3,c
   879  00104C  EC36  F011         	call	_I2C_Master_Init	;wreg free
   880                           
   881                           ;main.c: 152:     RTC_Init();
   882  001050  ECF2  F012         	call	_RTC_Init	;wreg free
   883                           
   884                           ;main.c: 153:     UART_Init();
   885  001054  EC77  F010         	call	_UART_Init	;wreg free
   886                           
   887                           ;main.c: 155:     LCD_set_cursor(0,0);
   888  001058  0E00               	movlw	0
   889  00105A  6E23               	movwf	LCD_set_cursor@row+1,c
   890  00105C  0E00               	movlw	0
   891  00105E  6E22               	movwf	LCD_set_cursor@row,c
   892  001060  0E00               	movlw	0
   893  001062  6E25               	movwf	LCD_set_cursor@column+1,c
   894  001064  0E00               	movlw	0
   895  001066  6E24               	movwf	LCD_set_cursor@column,c
   896  001068  EC30  F012         	call	_LCD_set_cursor	;wreg free
   897                           
   898                           ;main.c: 159:     UART_send_string("Init complete\n");
   899  00106C  0E18               	movlw	low STR_1
   900  00106E  6E1F               	movwf	UART_send_string@message,c
   901  001070  0E10               	movlw	high STR_1
   902  001072  6E20               	movwf	UART_send_string@message+1,c
   903  001074  EC87  F00F         	call	_UART_send_string	;wreg free
   904                           
   905                           ;main.c: 161:     _delay((unsigned long)((500)*(10000000/4000.0)));
   906  001078  0E07               	movlw	7
   907  00107A  0100               	movlb	0	; () banked
   908  00107C  6FA8               	movwf	(??_main+1)& (0+255),b
   909  00107E  0E58               	movlw	88
   910  001080  6FA7               	movwf	??_main& (0+255),b
   911  001082  0E59               	movlw	89
   912  001084                     u3547:
   913  001084  2EE8               	decfsz	wreg,f,c
   914  001086  D7FE               	bra	u3547
   915  001088  2FA7               	decfsz	??_main& (0+255),f,b
   916  00108A  D7FC               	bra	u3547
   917  00108C  2FA8               	decfsz	(??_main+1)& (0+255),f,b
   918  00108E  D7FA               	bra	u3547
   919  001090  D000               	nop2	
   920                           
   921                           ;main.c: 163:     _Bool commandReceived = 0;
   922  001092  0E00               	movlw	0
   923  001094  0101               	movlb	1	; () banked
   924  001096  6FC5               	movwf	main@commandReceived& (0+255),b
   925                           
   926                           ; BSR set to: 1
   927                           ;main.c: 165:     unsigned char command [25];;main.c: 166:     unsigned char lcdDisplay 
      +                          [16];;main.c: 167:     unsigned char uart_char_to_send[25];;main.c: 168:     char buffer
      +                          [10];;main.c: 169:     int index = 0;
   928                           
   929                           ; BSR set to: 1
   930  001098  0E00               	movlw	0
   931  00109A  6FC7               	movwf	(main@index+1)& (0+255),b
   932  00109C  0E00               	movlw	0
   933  00109E  6FC6               	movwf	main@index& (0+255),b
   934  0010A0                     l4348:
   935                           
   936                           ;main.c: 183:         if(UART_available()){
   937  0010A0  EC59  F013         	call	_UART_available	;wreg free
   938  0010A4  501E               	movf	?_UART_available,w,c
   939  0010A6  101F               	iorwf	?_UART_available+1,w,c
   940  0010A8  B4D8               	btfsc	status,2,c
   941  0010AA  D00F               	goto	l4354
   942                           
   943                           ;main.c: 184:             command[index] = UART_read();
   944  0010AC  EC46  F013         	call	_UART_read	;wreg free
   945  0010B0  0100               	movlb	0	; () banked
   946  0010B2  6FA7               	movwf	??_main& (0+255),b
   947  0010B4  0E99               	movlw	low main@command
   948  0010B6  0101               	movlb	1	; () banked
   949  0010B8  25C6               	addwf	main@index& (0+255),w,b
   950  0010BA  6ED9               	movwf	fsr2l,c
   951  0010BC  0E01               	movlw	high main@command
   952  0010BE  21C7               	addwfc	(main@index+1)& (0+255),w,b
   953  0010C0  6EDA               	movwf	fsr2h,c
   954  0010C2  C0A7  FFDF         	movff	??_main,indf2
   955                           
   956                           ; BSR set to: 1
   957                           ;main.c: 185:             index++;
   958  0010C6  4BC6               	infsnz	main@index& (0+255),f,b
   959  0010C8  2BC7               	incf	(main@index+1)& (0+255),f,b
   960  0010CA                     l4354:
   961                           
   962                           ;main.c: 187:         if(index>0 && command[index-1] == '\n'){
   963  0010CA  0101               	movlb	1	; () banked
   964  0010CC  BFC7               	btfsc	(main@index+1)& (0+255),7,b
   965  0010CE  D023               	goto	l246
   966  0010D0  51C7               	movf	(main@index+1)& (0+255),w,b
   967  0010D2  E103               	bnz	u3460
   968  0010D4  05C6               	decf	main@index& (0+255),w,b
   969  0010D6  A0D8               	btfss	status,0,c
   970  0010D8  D01E               	goto	l246
   971  0010DA                     u3460:
   972                           
   973                           ; BSR set to: 1
   974  0010DA  0EFF               	movlw	255
   975  0010DC  0100               	movlb	0	; () banked
   976  0010DE  6FA7               	movwf	??_main& (0+255),b
   977  0010E0  0EFF               	movlw	255
   978  0010E2  6FA8               	movwf	(??_main+1)& (0+255),b
   979  0010E4  C1C6  F0A9         	movff	main@index,??_main+2
   980  0010E8  C1C7  F0AA         	movff	main@index+1,??_main+3
   981  0010EC  51A7               	movf	??_main& (0+255),w,b
   982  0010EE  27A9               	addwf	(??_main+2)& (0+255),f,b
   983  0010F0  51A8               	movf	(??_main+1)& (0+255),w,b
   984  0010F2  23AA               	addwfc	(??_main+3)& (0+255),f,b
   985  0010F4  0E99               	movlw	low main@command
   986  0010F6  25A9               	addwf	(??_main+2)& (0+255),w,b
   987  0010F8  6ED9               	movwf	fsr2l,c
   988  0010FA  0E01               	movlw	high main@command
   989  0010FC  21AA               	addwfc	(??_main+3)& (0+255),w,b
   990  0010FE  6EDA               	movwf	fsr2h,c
   991  001100  0E0A               	movlw	10
   992  001102  18DE               	xorwf	postinc2,w,c
   993  001104  A4D8               	btfss	status,2,c
   994  001106  D007               	goto	l246
   995                           
   996                           ; BSR set to: 0
   997                           ;main.c: 188:             commandReceived = 1;
   998  001108  0E01               	movlw	1
   999  00110A  0101               	movlb	1	; () banked
  1000  00110C  6FC5               	movwf	main@commandReceived& (0+255),b
  1001                           
  1002                           ; BSR set to: 1
  1003                           ;main.c: 190:             index = 0;
  1004  00110E  0E00               	movlw	0
  1005  001110  6FC7               	movwf	(main@index+1)& (0+255),b
  1006  001112  0E00               	movlw	0
  1007  001114  6FC6               	movwf	main@index& (0+255),b
  1008  001116                     l246:
  1009                           
  1010                           ;main.c: 193:         if(commandReceived){
  1011  001116  0101               	movlb	1	; () banked
  1012  001118  51C5               	movf	main@commandReceived& (0+255),w,b
  1013  00111A  B4D8               	btfsc	status,2,c
  1014  00111C  D172               	goto	l276
  1015                           
  1016                           ; BSR set to: 1
  1017                           ;main.c: 195:             commandReceived = 0;
  1018  00111E  0E00               	movlw	0
  1019  001120  6FC5               	movwf	main@commandReceived& (0+255),b
  1020                           
  1021                           ;main.c: 196:             switch(command[0]){
  1022  001122  D160               	goto	l4454
  1023  001124                     l4364:
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;main.c: 203:                                     LCD_set_cursor(0,0);
  1027  001124  0E00               	movlw	0
  1028  001126  6E23               	movwf	LCD_set_cursor@row+1,c
  1029  001128  0E00               	movlw	0
  1030  00112A  6E22               	movwf	LCD_set_cursor@row,c
  1031  00112C  0E00               	movlw	0
  1032  00112E  6E25               	movwf	LCD_set_cursor@column+1,c
  1033  001130  0E00               	movlw	0
  1034  001132  6E24               	movwf	LCD_set_cursor@column,c
  1035  001134  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1036                           
  1037                           ;main.c: 205:                                     DCMotorLeftRightFwdON();
  1038  001138  ECAC  F013         	call	_DCMotorLeftRightFwdON	;wreg free
  1039                           
  1040                           ;main.c: 206:                                     break;
  1041  00113C  D162               	goto	l276
  1042  00113E                     l4368:
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;main.c: 208:                                     LCD_set_cursor(0,0);
  1046  00113E  0E00               	movlw	0
  1047  001140  6E23               	movwf	LCD_set_cursor@row+1,c
  1048  001142  0E00               	movlw	0
  1049  001144  6E22               	movwf	LCD_set_cursor@row,c
  1050  001146  0E00               	movlw	0
  1051  001148  6E25               	movwf	LCD_set_cursor@column+1,c
  1052  00114A  0E00               	movlw	0
  1053  00114C  6E24               	movwf	LCD_set_cursor@column,c
  1054  00114E  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1055                           
  1056                           ;main.c: 210:                                     DCMotorLeftFwd();
  1057  001152  ECC6  F013         	call	_DCMotorLeftFwd	;wreg free
  1058                           
  1059                           ;main.c: 211:                                     break;
  1060  001156  D155               	goto	l276
  1061  001158                     l4372:
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;main.c: 213:                                     LCD_set_cursor(0,0);
  1065  001158  0E00               	movlw	0
  1066  00115A  6E23               	movwf	LCD_set_cursor@row+1,c
  1067  00115C  0E00               	movlw	0
  1068  00115E  6E22               	movwf	LCD_set_cursor@row,c
  1069  001160  0E00               	movlw	0
  1070  001162  6E25               	movwf	LCD_set_cursor@column+1,c
  1071  001164  0E00               	movlw	0
  1072  001166  6E24               	movwf	LCD_set_cursor@column,c
  1073  001168  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1074                           
  1075                           ;main.c: 215:                                     DCMotorRightFwd();
  1076  00116C  ECC2  F013         	call	_DCMotorRightFwd	;wreg free
  1077                           
  1078                           ;main.c: 216:                                     break;
  1079  001170  D148               	goto	l276
  1080  001172                     l4376:
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;main.c: 218:                                     LCD_set_cursor(0,0);
  1084  001172  0E00               	movlw	0
  1085  001174  6E23               	movwf	LCD_set_cursor@row+1,c
  1086  001176  0E00               	movlw	0
  1087  001178  6E22               	movwf	LCD_set_cursor@row,c
  1088  00117A  0E00               	movlw	0
  1089  00117C  6E25               	movwf	LCD_set_cursor@column+1,c
  1090  00117E  0E00               	movlw	0
  1091  001180  6E24               	movwf	LCD_set_cursor@column,c
  1092  001182  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1093                           
  1094                           ;main.c: 220:                                     DCMotorAllOff();
  1095  001186  EC94  F013         	call	_DCMotorAllOff	;wreg free
  1096                           
  1097                           ;main.c: 221:                                     break;
  1098  00118A  D13B               	goto	l276
  1099  00118C                     l4382:
  1100                           
  1101                           ; BSR set to: 0
  1102  00118C  0101               	movlb	1	; () banked
  1103  00118E  519B               	movf	(main@command+2)& (0+255),w,b
  1104  001190  0100               	movlb	0	; () banked
  1105  001192  6FA7               	movwf	??_main& (0+255),b
  1106  001194  6BA8               	clrf	(??_main+1)& (0+255),b
  1107                           
  1108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1109                           ; Switch size 1, requested type "simple"
  1110                           ; Number of cases is 1, Range of values is 0 to 0
  1111                           ; switch strategies available:
  1112                           ; Name         Instructions Cycles
  1113                           ; simple_byte            4     3 (average)
  1114                           ;	Chosen strategy is simple_byte
  1115  001196  51A8               	movf	(??_main+1)& (0+255),w,b
  1116  001198  0A00               	xorlw	0	; case 0
  1117  00119A  A4D8               	btfss	status,2,c
  1118  00119C  D132               	goto	l276
  1119                           
  1120                           ; BSR set to: 0
  1121                           ; Switch size 1, requested type "simple"
  1122                           ; Number of cases is 4, Range of values is 66 to 82
  1123                           ; switch strategies available:
  1124                           ; Name         Instructions Cycles
  1125                           ; simple_byte           13     7 (average)
  1126                           ;	Chosen strategy is simple_byte
  1127  00119E  51A7               	movf	??_main& (0+255),w,b
  1128  0011A0  0A42               	xorlw	66	; case 66
  1129  0011A2  B4D8               	btfsc	status,2,c
  1130  0011A4  D7BF               	goto	l4364
  1131  0011A6  0A04               	xorlw	4	; case 70
  1132  0011A8  B4D8               	btfsc	status,2,c
  1133  0011AA  D7E3               	goto	l4376
  1134  0011AC  0A0A               	xorlw	10	; case 76
  1135  0011AE  B4D8               	btfsc	status,2,c
  1136  0011B0  D7C6               	goto	l4368
  1137  0011B2  0A1E               	xorlw	30	; case 82
  1138  0011B4  B4D8               	btfsc	status,2,c
  1139  0011B6  D7D0               	goto	l4372
  1140  0011B8  D124               	goto	l276
  1141  0011BA                     l4384:
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;main.c: 229:                                     LCD_set_cursor(0,0);
  1145  0011BA  0E00               	movlw	0
  1146  0011BC  6E23               	movwf	LCD_set_cursor@row+1,c
  1147  0011BE  0E00               	movlw	0
  1148  0011C0  6E22               	movwf	LCD_set_cursor@row,c
  1149  0011C2  0E00               	movlw	0
  1150  0011C4  6E25               	movwf	LCD_set_cursor@column+1,c
  1151  0011C6  0E00               	movlw	0
  1152  0011C8  6E24               	movwf	LCD_set_cursor@column,c
  1153  0011CA  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1154                           
  1155                           ;main.c: 231:                                     DCMotorLeftRightBkwdON();
  1156  0011CE  ECB1  F013         	call	_DCMotorLeftRightBkwdON	;wreg free
  1157                           
  1158                           ;main.c: 232:                                     break;
  1159  0011D2  D117               	goto	l276
  1160  0011D4                     l4388:
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 234:                                     LCD_set_cursor(0,0);
  1164  0011D4  0E00               	movlw	0
  1165  0011D6  6E23               	movwf	LCD_set_cursor@row+1,c
  1166  0011D8  0E00               	movlw	0
  1167  0011DA  6E22               	movwf	LCD_set_cursor@row,c
  1168  0011DC  0E00               	movlw	0
  1169  0011DE  6E25               	movwf	LCD_set_cursor@column+1,c
  1170  0011E0  0E00               	movlw	0
  1171  0011E2  6E24               	movwf	LCD_set_cursor@column,c
  1172  0011E4  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1173                           
  1174                           ;main.c: 236:                                     DCMotorLeftBkwd();
  1175  0011E8  ECCE  F013         	call	_DCMotorLeftBkwd	;wreg free
  1176                           
  1177                           ;main.c: 237:                                     break;
  1178  0011EC  D10A               	goto	l276
  1179  0011EE                     l4392:
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;main.c: 239:                                     LCD_set_cursor(0,0);
  1183  0011EE  0E00               	movlw	0
  1184  0011F0  6E23               	movwf	LCD_set_cursor@row+1,c
  1185  0011F2  0E00               	movlw	0
  1186  0011F4  6E22               	movwf	LCD_set_cursor@row,c
  1187  0011F6  0E00               	movlw	0
  1188  0011F8  6E25               	movwf	LCD_set_cursor@column+1,c
  1189  0011FA  0E00               	movlw	0
  1190  0011FC  6E24               	movwf	LCD_set_cursor@column,c
  1191  0011FE  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1192                           
  1193                           ;main.c: 241:                                     DCMotorRightBkwd();
  1194  001202  ECCA  F013         	call	_DCMotorRightBkwd	;wreg free
  1195                           
  1196                           ;main.c: 242:                                     break;
  1197  001206  D0FD               	goto	l276
  1198  001208                     l4402:
  1199                           
  1200                           ; BSR set to: 0
  1201  001208  0101               	movlb	1	; () banked
  1202  00120A  519B               	movf	(main@command+2)& (0+255),w,b
  1203  00120C  0100               	movlb	0	; () banked
  1204  00120E  6FA7               	movwf	??_main& (0+255),b
  1205  001210  6BA8               	clrf	(??_main+1)& (0+255),b
  1206                           
  1207                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1208                           ; Switch size 1, requested type "simple"
  1209                           ; Number of cases is 1, Range of values is 0 to 0
  1210                           ; switch strategies available:
  1211                           ; Name         Instructions Cycles
  1212                           ; simple_byte            4     3 (average)
  1213                           ;	Chosen strategy is simple_byte
  1214  001212  51A8               	movf	(??_main+1)& (0+255),w,b
  1215  001214  0A00               	xorlw	0	; case 0
  1216  001216  A4D8               	btfss	status,2,c
  1217  001218  D0F4               	goto	l276
  1218                           
  1219                           ; BSR set to: 0
  1220                           ; Switch size 1, requested type "simple"
  1221                           ; Number of cases is 4, Range of values is 66 to 82
  1222                           ; switch strategies available:
  1223                           ; Name         Instructions Cycles
  1224                           ; simple_byte           13     7 (average)
  1225                           ;	Chosen strategy is simple_byte
  1226  00121A  51A7               	movf	??_main& (0+255),w,b
  1227  00121C  0A42               	xorlw	66	; case 66
  1228  00121E  B4D8               	btfsc	status,2,c
  1229  001220  D7CC               	goto	l4384
  1230  001222  0A04               	xorlw	4	; case 70
  1231  001224  B4D8               	btfsc	status,2,c
  1232  001226  D7A5               	goto	l4376
  1233  001228  0A0A               	xorlw	10	; case 76
  1234  00122A  B4D8               	btfsc	status,2,c
  1235  00122C  D7D3               	goto	l4388
  1236  00122E  0A1E               	xorlw	30	; case 82
  1237  001230  B4D8               	btfsc	status,2,c
  1238  001232  D7DD               	goto	l4392
  1239  001234  D0E6               	goto	l276
  1240  001236                     l4404:
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 255:                                     LCD_set_cursor(0,0);
  1244  001236  0E00               	movlw	0
  1245  001238  6E23               	movwf	LCD_set_cursor@row+1,c
  1246  00123A  0E00               	movlw	0
  1247  00123C  6E22               	movwf	LCD_set_cursor@row,c
  1248  00123E  0E00               	movlw	0
  1249  001240  6E25               	movwf	LCD_set_cursor@column+1,c
  1250  001242  0E00               	movlw	0
  1251  001244  6E24               	movwf	LCD_set_cursor@column,c
  1252  001246  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1253                           
  1254                           ;main.c: 257:                                     DCMotorCenterLeft();
  1255  00124A  ECD5  F013         	call	_DCMotorCenterLeft	;wreg free
  1256                           
  1257                           ;main.c: 258:                                     break;
  1258  00124E  D0D9               	goto	l276
  1259  001250                     l4408:
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;main.c: 260:                                     LCD_set_cursor(0,0);
  1263  001250  0E00               	movlw	0
  1264  001252  6E23               	movwf	LCD_set_cursor@row+1,c
  1265  001254  0E00               	movlw	0
  1266  001256  6E22               	movwf	LCD_set_cursor@row,c
  1267  001258  0E00               	movlw	0
  1268  00125A  6E25               	movwf	LCD_set_cursor@column+1,c
  1269  00125C  0E00               	movlw	0
  1270  00125E  6E24               	movwf	LCD_set_cursor@column,c
  1271  001260  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1272                           
  1273                           ;main.c: 262:                                     DCMotorCenterRight();
  1274  001264  ECD2  F013         	call	_DCMotorCenterRight	;wreg free
  1275                           
  1276                           ;main.c: 263:                                     break;
  1277  001268  D0CC               	goto	l276
  1278  00126A                     l4418:
  1279                           
  1280                           ; BSR set to: 0
  1281  00126A  0101               	movlb	1	; () banked
  1282  00126C  519B               	movf	(main@command+2)& (0+255),w,b
  1283  00126E  0100               	movlb	0	; () banked
  1284  001270  6FA7               	movwf	??_main& (0+255),b
  1285  001272  6BA8               	clrf	(??_main+1)& (0+255),b
  1286                           
  1287                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1288                           ; Switch size 1, requested type "simple"
  1289                           ; Number of cases is 1, Range of values is 0 to 0
  1290                           ; switch strategies available:
  1291                           ; Name         Instructions Cycles
  1292                           ; simple_byte            4     3 (average)
  1293                           ;	Chosen strategy is simple_byte
  1294  001274  51A8               	movf	(??_main+1)& (0+255),w,b
  1295  001276  0A00               	xorlw	0	; case 0
  1296  001278  A4D8               	btfss	status,2,c
  1297  00127A  D0C3               	goto	l276
  1298                           
  1299                           ; BSR set to: 0
  1300                           ; Switch size 1, requested type "simple"
  1301                           ; Number of cases is 3, Range of values is 70 to 82
  1302                           ; switch strategies available:
  1303                           ; Name         Instructions Cycles
  1304                           ; simple_byte           10     6 (average)
  1305                           ;	Chosen strategy is simple_byte
  1306  00127C  51A7               	movf	??_main& (0+255),w,b
  1307  00127E  0A46               	xorlw	70	; case 70
  1308  001280  B4D8               	btfsc	status,2,c
  1309  001282  D777               	goto	l4376
  1310  001284  0A0A               	xorlw	10	; case 76
  1311  001286  B4D8               	btfsc	status,2,c
  1312  001288  D7D6               	goto	l4404
  1313  00128A  0A1E               	xorlw	30	; case 82
  1314  00128C  B4D8               	btfsc	status,2,c
  1315  00128E  D7E0               	goto	l4408
  1316  001290  D0B8               	goto	l276
  1317  001292                     l4422:
  1318                           
  1319                           ; BSR set to: 0
  1320  001292  0101               	movlb	1	; () banked
  1321  001294  519A               	movf	(main@command+1)& (0+255),w,b
  1322  001296  0100               	movlb	0	; () banked
  1323  001298  6FA7               	movwf	??_main& (0+255),b
  1324  00129A  6BA8               	clrf	(??_main+1)& (0+255),b
  1325                           
  1326                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1327                           ; Switch size 1, requested type "simple"
  1328                           ; Number of cases is 1, Range of values is 0 to 0
  1329                           ; switch strategies available:
  1330                           ; Name         Instructions Cycles
  1331                           ; simple_byte            4     3 (average)
  1332                           ;	Chosen strategy is simple_byte
  1333  00129C  51A8               	movf	(??_main+1)& (0+255),w,b
  1334  00129E  0A00               	xorlw	0	; case 0
  1335  0012A0  A4D8               	btfss	status,2,c
  1336  0012A2  D0AF               	goto	l276
  1337                           
  1338                           ; BSR set to: 0
  1339                           ; Switch size 1, requested type "simple"
  1340                           ; Number of cases is 3, Range of values is 66 to 83
  1341                           ; switch strategies available:
  1342                           ; Name         Instructions Cycles
  1343                           ; simple_byte           10     6 (average)
  1344                           ;	Chosen strategy is simple_byte
  1345  0012A4  51A7               	movf	??_main& (0+255),w,b
  1346  0012A6  0A42               	xorlw	66	; case 66
  1347  0012A8  B4D8               	btfsc	status,2,c
  1348  0012AA  D7AE               	goto	l4402
  1349  0012AC  0A04               	xorlw	4	; case 70
  1350  0012AE  B4D8               	btfsc	status,2,c
  1351  0012B0  D76D               	goto	l4382
  1352  0012B2  0A15               	xorlw	21	; case 83
  1353  0012B4  B4D8               	btfsc	status,2,c
  1354  0012B6  D7D9               	goto	l4418
  1355  0012B8  D0A4               	goto	l276
  1356  0012BA                     l4424:
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;main.c: 282:                             LCD_set_cursor(0,0);
  1360  0012BA  0E00               	movlw	0
  1361  0012BC  6E23               	movwf	LCD_set_cursor@row+1,c
  1362  0012BE  0E00               	movlw	0
  1363  0012C0  6E22               	movwf	LCD_set_cursor@row,c
  1364  0012C2  0E00               	movlw	0
  1365  0012C4  6E25               	movwf	LCD_set_cursor@column+1,c
  1366  0012C6  0E00               	movlw	0
  1367  0012C8  6E24               	movwf	LCD_set_cursor@column,c
  1368  0012CA  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1369                           
  1370                           ;main.c: 283:                             sprintf(lcdDisplay,"%.*s", 16, command + 2);
  1371  0012CE  0EB2               	movlw	low main@lcdDisplay
  1372  0012D0  0100               	movlb	0	; () banked
  1373  0012D2  6F95               	movwf	sprintf@s& (0+255),b
  1374  0012D4  0E01               	movlw	high main@lcdDisplay
  1375  0012D6  6F96               	movwf	(sprintf@s+1)& (0+255),b
  1376  0012D8  0E2D               	movlw	low STR_2
  1377  0012DA  6F97               	movwf	sprintf@fmt& (0+255),b
  1378  0012DC  0E10               	movlw	high STR_2
  1379  0012DE  6F98               	movwf	(sprintf@fmt+1)& (0+255),b
  1380  0012E0  0E00               	movlw	0
  1381  0012E2  6F9A               	movwf	(?_sprintf+5)& (0+255),b
  1382  0012E4  0E10               	movlw	16
  1383  0012E6  6F99               	movwf	(?_sprintf+4)& (0+255),b
  1384  0012E8  0E9B               	movlw	low (main@command+2)
  1385  0012EA  6F9B               	movwf	(?_sprintf+6)& (0+255),b
  1386  0012EC  0E01               	movlw	high (main@command+2)
  1387  0012EE  6F9C               	movwf	(?_sprintf+7)& (0+255),b
  1388  0012F0  ECB8  F011         	call	_sprintf	;wreg free
  1389  0012F4                     l4428:
  1390                           
  1391                           ;main.c: 284:                             LCD_write_str(lcdDisplay);
  1392  0012F4  0EB2               	movlw	low main@lcdDisplay
  1393  0012F6  6E21               	movwf	LCD_write_str@str,c
  1394  0012F8  0E01               	movlw	high main@lcdDisplay
  1395  0012FA  6E22               	movwf	LCD_write_str@str+1,c
  1396  0012FC  EC57  F012         	call	_LCD_write_str	;wreg free
  1397                           
  1398                           ;main.c: 285:                             break;
  1399  001300  D080               	goto	l276
  1400  001302                     l4430:
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;main.c: 287:                             LCD_set_cursor(1,0);
  1404  001302  0E00               	movlw	0
  1405  001304  6E23               	movwf	LCD_set_cursor@row+1,c
  1406  001306  0E01               	movlw	1
  1407  001308  6E22               	movwf	LCD_set_cursor@row,c
  1408  00130A  0E00               	movlw	0
  1409  00130C  6E25               	movwf	LCD_set_cursor@column+1,c
  1410  00130E  0E00               	movlw	0
  1411  001310  6E24               	movwf	LCD_set_cursor@column,c
  1412  001312  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1413                           
  1414                           ;main.c: 288:                             sprintf(lcdDisplay,"%.*s", 16, command + 2);
  1415  001316  0EB2               	movlw	low main@lcdDisplay
  1416  001318  0100               	movlb	0	; () banked
  1417  00131A  6F95               	movwf	sprintf@s& (0+255),b
  1418  00131C  0E01               	movlw	high main@lcdDisplay
  1419  00131E  6F96               	movwf	(sprintf@s+1)& (0+255),b
  1420  001320  0E2D               	movlw	low STR_2
  1421  001322  6F97               	movwf	sprintf@fmt& (0+255),b
  1422  001324  0E10               	movlw	high STR_2
  1423  001326  6F98               	movwf	(sprintf@fmt+1)& (0+255),b
  1424  001328  0E00               	movlw	0
  1425  00132A  6F9A               	movwf	(?_sprintf+5)& (0+255),b
  1426  00132C  0E10               	movlw	16
  1427  00132E  6F99               	movwf	(?_sprintf+4)& (0+255),b
  1428  001330  0E9B               	movlw	low (main@command+2)
  1429  001332  6F9B               	movwf	(?_sprintf+6)& (0+255),b
  1430  001334  0E01               	movlw	high (main@command+2)
  1431  001336  6F9C               	movwf	(?_sprintf+7)& (0+255),b
  1432  001338  ECB8  F011         	call	_sprintf	;wreg free
  1433  00133C  D7DB               	goto	l4428
  1434  00133E                     l4436:
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;main.c: 292:                             LCD_set_cursor(2,0);
  1438  00133E  0E00               	movlw	0
  1439  001340  6E23               	movwf	LCD_set_cursor@row+1,c
  1440  001342  0E02               	movlw	2
  1441  001344  6E22               	movwf	LCD_set_cursor@row,c
  1442  001346  0E00               	movlw	0
  1443  001348  6E25               	movwf	LCD_set_cursor@column+1,c
  1444  00134A  0E00               	movlw	0
  1445  00134C  6E24               	movwf	LCD_set_cursor@column,c
  1446  00134E  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1447                           
  1448                           ;main.c: 293:                             sprintf(lcdDisplay,"%.*s", 16, command + 2);
  1449  001352  0EB2               	movlw	low main@lcdDisplay
  1450  001354  0100               	movlb	0	; () banked
  1451  001356  6F95               	movwf	sprintf@s& (0+255),b
  1452  001358  0E01               	movlw	high main@lcdDisplay
  1453  00135A  6F96               	movwf	(sprintf@s+1)& (0+255),b
  1454  00135C  0E2D               	movlw	low STR_2
  1455  00135E  6F97               	movwf	sprintf@fmt& (0+255),b
  1456  001360  0E10               	movlw	high STR_2
  1457  001362  6F98               	movwf	(sprintf@fmt+1)& (0+255),b
  1458  001364  0E00               	movlw	0
  1459  001366  6F9A               	movwf	(?_sprintf+5)& (0+255),b
  1460  001368  0E10               	movlw	16
  1461  00136A  6F99               	movwf	(?_sprintf+4)& (0+255),b
  1462  00136C  0E9B               	movlw	low (main@command+2)
  1463  00136E  6F9B               	movwf	(?_sprintf+6)& (0+255),b
  1464  001370  0E01               	movlw	high (main@command+2)
  1465  001372  6F9C               	movwf	(?_sprintf+7)& (0+255),b
  1466  001374  ECB8  F011         	call	_sprintf	;wreg free
  1467  001378  D7BD               	goto	l4428
  1468  00137A                     l4442:
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;main.c: 297:                             LCD_set_cursor(3,0);
  1472  00137A  0E00               	movlw	0
  1473  00137C  6E23               	movwf	LCD_set_cursor@row+1,c
  1474  00137E  0E03               	movlw	3
  1475  001380  6E22               	movwf	LCD_set_cursor@row,c
  1476  001382  0E00               	movlw	0
  1477  001384  6E25               	movwf	LCD_set_cursor@column+1,c
  1478  001386  0E00               	movlw	0
  1479  001388  6E24               	movwf	LCD_set_cursor@column,c
  1480  00138A  EC30  F012         	call	_LCD_set_cursor	;wreg free
  1481                           
  1482                           ;main.c: 298:                             sprintf(lcdDisplay,"%.*s", 16, command + 2);
  1483  00138E  0EB2               	movlw	low main@lcdDisplay
  1484  001390  0100               	movlb	0	; () banked
  1485  001392  6F95               	movwf	sprintf@s& (0+255),b
  1486  001394  0E01               	movlw	high main@lcdDisplay
  1487  001396  6F96               	movwf	(sprintf@s+1)& (0+255),b
  1488  001398  0E2D               	movlw	low STR_2
  1489  00139A  6F97               	movwf	sprintf@fmt& (0+255),b
  1490  00139C  0E10               	movlw	high STR_2
  1491  00139E  6F98               	movwf	(sprintf@fmt+1)& (0+255),b
  1492  0013A0  0E00               	movlw	0
  1493  0013A2  6F9A               	movwf	(?_sprintf+5)& (0+255),b
  1494  0013A4  0E10               	movlw	16
  1495  0013A6  6F99               	movwf	(?_sprintf+4)& (0+255),b
  1496  0013A8  0E9B               	movlw	low (main@command+2)
  1497  0013AA  6F9B               	movwf	(?_sprintf+6)& (0+255),b
  1498  0013AC  0E01               	movlw	high (main@command+2)
  1499  0013AE  6F9C               	movwf	(?_sprintf+7)& (0+255),b
  1500  0013B0  ECB8  F011         	call	_sprintf	;wreg free
  1501  0013B4  D79F               	goto	l4428
  1502  0013B6                     l4450:
  1503                           
  1504                           ; BSR set to: 0
  1505  0013B6  0101               	movlb	1	; () banked
  1506  0013B8  519A               	movf	(main@command+1)& (0+255),w,b
  1507  0013BA  0100               	movlb	0	; () banked
  1508  0013BC  6FA7               	movwf	??_main& (0+255),b
  1509  0013BE  6BA8               	clrf	(??_main+1)& (0+255),b
  1510                           
  1511                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1512                           ; Switch size 1, requested type "simple"
  1513                           ; Number of cases is 1, Range of values is 0 to 0
  1514                           ; switch strategies available:
  1515                           ; Name         Instructions Cycles
  1516                           ; simple_byte            4     3 (average)
  1517                           ;	Chosen strategy is simple_byte
  1518  0013C0  51A8               	movf	(??_main+1)& (0+255),w,b
  1519  0013C2  0A00               	xorlw	0	; case 0
  1520  0013C4  A4D8               	btfss	status,2,c
  1521  0013C6  D01D               	goto	l276
  1522                           
  1523                           ; BSR set to: 0
  1524                           ; Switch size 1, requested type "simple"
  1525                           ; Number of cases is 4, Range of values is 49 to 52
  1526                           ; switch strategies available:
  1527                           ; Name         Instructions Cycles
  1528                           ; simple_byte           13     7 (average)
  1529                           ;	Chosen strategy is simple_byte
  1530  0013C8  51A7               	movf	??_main& (0+255),w,b
  1531  0013CA  0A31               	xorlw	49	; case 49
  1532  0013CC  B4D8               	btfsc	status,2,c
  1533  0013CE  D775               	goto	l4424
  1534  0013D0  0A03               	xorlw	3	; case 50
  1535  0013D2  B4D8               	btfsc	status,2,c
  1536  0013D4  D796               	goto	l4430
  1537  0013D6  0A01               	xorlw	1	; case 51
  1538  0013D8  B4D8               	btfsc	status,2,c
  1539  0013DA  D7B1               	goto	l4436
  1540  0013DC  0A07               	xorlw	7	; case 52
  1541  0013DE  B4D8               	btfsc	status,2,c
  1542  0013E0  D7CC               	goto	l4442
  1543  0013E2  D00F               	goto	l276
  1544  0013E4                     l4454:
  1545                           
  1546                           ; BSR set to: 1
  1547  0013E4  5199               	movf	main@command& (0+255),w,b
  1548  0013E6  0100               	movlb	0	; () banked
  1549  0013E8  6FA7               	movwf	??_main& (0+255),b
  1550  0013EA  6BA8               	clrf	(??_main+1)& (0+255),b
  1551                           
  1552                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1553                           ; Switch size 1, requested type "simple"
  1554                           ; Number of cases is 1, Range of values is 0 to 0
  1555                           ; switch strategies available:
  1556                           ; Name         Instructions Cycles
  1557                           ; simple_byte            4     3 (average)
  1558                           ;	Chosen strategy is simple_byte
  1559  0013EC  51A8               	movf	(??_main+1)& (0+255),w,b
  1560  0013EE  0A00               	xorlw	0	; case 0
  1561  0013F0  A4D8               	btfss	status,2,c
  1562  0013F2  D007               	goto	l276
  1563                           
  1564                           ; BSR set to: 0
  1565                           ; Switch size 1, requested type "simple"
  1566                           ; Number of cases is 2, Range of values is 68 to 77
  1567                           ; switch strategies available:
  1568                           ; Name         Instructions Cycles
  1569                           ; simple_byte            7     4 (average)
  1570                           ;	Chosen strategy is simple_byte
  1571  0013F4  51A7               	movf	??_main& (0+255),w,b
  1572  0013F6  0A44               	xorlw	68	; case 68
  1573  0013F8  B4D8               	btfsc	status,2,c
  1574  0013FA  D7DD               	goto	l4450
  1575  0013FC  0A09               	xorlw	9	; case 77
  1576  0013FE  B4D8               	btfsc	status,2,c
  1577  001400  D748               	goto	l4422
  1578  001402                     l276:
  1579                           
  1580                           ;main.c: 310:         if(key_was_pressed){
  1581                           
  1582                           ; BSR set to: 0
  1583  001402  0100               	movlb	0	; () banked
  1584  001404  51AC               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1585  001406  B4D8               	btfsc	status,2,c
  1586  001408  D64B               	goto	l4348
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 311:             key_was_pressed = 0;
  1590  00140A  0E00               	movlw	0
  1591  00140C  6FAC               	movwf	_key_was_pressed& (0+255),b	;volatile
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;main.c: 312:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1595  00140E  3881               	swapf	3969,w,c	;volatile
  1596  001410  0B0F               	andlw	15
  1597  001412  0B0F               	andlw	15
  1598  001414  0101               	movlb	1	; () banked
  1599  001416  6FC4               	movwf	main@keypress& (0+255),b
  1600                           
  1601                           ; BSR set to: 1
  1602                           ;main.c: 313:             sprintf(uart_char_to_send, "%c%c\n", 'K', keys[keypress]);
  1603  001418  0E80               	movlw	low main@uart_char_to_send
  1604  00141A  0100               	movlb	0	; () banked
  1605  00141C  6F95               	movwf	sprintf@s& (0+255),b
  1606  00141E  0E01               	movlw	high main@uart_char_to_send
  1607  001420  6F96               	movwf	(sprintf@s+1)& (0+255),b
  1608  001422  0E27               	movlw	low STR_6
  1609  001424  6F97               	movwf	sprintf@fmt& (0+255),b
  1610  001426  0E10               	movlw	high STR_6
  1611  001428  6F98               	movwf	(sprintf@fmt+1)& (0+255),b
  1612  00142A  0E00               	movlw	0
  1613  00142C  6F9A               	movwf	(?_sprintf+5)& (0+255),b
  1614  00142E  0E4B               	movlw	75
  1615  001430  6F99               	movwf	(?_sprintf+4)& (0+255),b
  1616  001432  0E01               	movlw	low _keys
  1617  001434  0101               	movlb	1	; () banked
  1618  001436  25C4               	addwf	main@keypress& (0+255),w,b
  1619  001438  6EF6               	movwf	tblptrl,c
  1620  00143A  6AF7               	clrf	tblptrh,c
  1621  00143C  0E10               	movlw	high _keys
  1622  00143E  22F7               	addwfc	tblptrh,f,c
  1623  001440                     	if	0	;There are less than 3 active tblptr bytes
  1624  001440                     	endif
  1625  001440  0008               	tblrd		*
  1626  001442  50F5               	movf	tablat,w,c
  1627  001444  0100               	movlb	0	; () banked
  1628  001446  6F9B               	movwf	(?_sprintf+6)& (0+255),b
  1629  001448  6B9C               	clrf	(?_sprintf+7)& (0+255),b
  1630  00144A  ECB8  F011         	call	_sprintf	;wreg free
  1631                           
  1632                           ;main.c: 314:             UART_send_string(uart_char_to_send);
  1633  00144E  0E80               	movlw	low main@uart_char_to_send
  1634  001450  6E1F               	movwf	UART_send_string@message,c
  1635  001452  0E01               	movlw	high main@uart_char_to_send
  1636  001454  6E20               	movwf	UART_send_string@message+1,c
  1637  001456  EC87  F00F         	call	_UART_send_string	;wreg free
  1638  00145A  D622               	goto	l4348
  1639  00145C                     __end_of_main:
  1640                           	opt callstack 0
  1641                           
  1642 ;; *************** function _sprintf *****************
  1643 ;; Defined at:
  1644 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  1645 ;; Parameters:    Size  Location     Type
  1646 ;;  s               2   21[BANK0 ] PTR unsigned char 
  1647 ;;		 -> main@uart_char_to_send(25), main@lcdDisplay(16), 
  1648 ;;  fmt             2   23[BANK0 ] PTR const unsigned char 
  1649 ;;		 -> STR_6(6), STR_5(5), STR_4(5), STR_3(5), 
  1650 ;;		 -> STR_2(5), 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  f               6   33[BANK0 ] struct _IO_FILE
  1653 ;;  ap              2   31[BANK0 ] PTR void [1]
  1654 ;;		 -> ?_sprintf(2), 
  1655 ;;  ret             2    0        int 
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  2   21[BANK0 ] int 
  1658 ;; Registers used:
  1659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1665 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;Total ram usage:       18 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:   14
  1672 ;; This function calls:
  1673 ;;		_vfprintf
  1674 ;; This function is called by:
  1675 ;;		_main
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text1
  1680  002370                     __ptext1:
  1681                           	opt callstack 0
  1682  002370                     _sprintf:
  1683                           	opt callstack 16
  1684                           
  1685                           ;incstack = 0
  1686  002370  0E99               	movlw	low (?_sprintf+4)
  1687  002372  0100               	movlb	0	; () banked
  1688  002374  6F9F               	movwf	sprintf@ap& (0+255),b
  1689  002376  0E00               	movlw	high (?_sprintf+4)
  1690  002378  6FA0               	movwf	(sprintf@ap+1)& (0+255),b
  1691  00237A  C095  F0A1         	movff	sprintf@s,sprintf@f
  1692  00237E  C096  F0A2         	movff	sprintf@s+1,sprintf@f+1
  1693                           
  1694                           ; BSR set to: 0
  1695  002382  0E00               	movlw	0
  1696  002384  6FA4               	movwf	(sprintf@f+3)& (0+255),b
  1697  002386  0E00               	movlw	0
  1698  002388  6FA3               	movwf	(sprintf@f+2)& (0+255),b
  1699                           
  1700                           ; BSR set to: 0
  1701  00238A  0E00               	movlw	0
  1702  00238C  6FA6               	movwf	(sprintf@f+5)& (0+255),b
  1703  00238E  0E00               	movlw	0
  1704  002390  6FA5               	movwf	(sprintf@f+4)& (0+255),b
  1705                           
  1706                           ; BSR set to: 0
  1707  002392  0EA1               	movlw	low sprintf@f
  1708  002394  6F8D               	movwf	vfprintf@fp& (0+255),b
  1709  002396  0E00               	movlw	high sprintf@f
  1710  002398  6F8E               	movwf	(vfprintf@fp+1)& (0+255),b
  1711  00239A  C097  F08F         	movff	sprintf@fmt,vfprintf@fmt
  1712  00239E  C098  F090         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1713  0023A2  0E9F               	movlw	low sprintf@ap
  1714  0023A4  6F91               	movwf	vfprintf@ap& (0+255),b
  1715  0023A6  0E00               	movlw	high sprintf@ap
  1716  0023A8  6F92               	movwf	(vfprintf@ap+1)& (0+255),b
  1717  0023AA  EC64  F011         	call	_vfprintf	;wreg free
  1718  0023AE  0100               	movlb	0	; () banked
  1719  0023B0  51A3               	movf	(sprintf@f+2)& (0+255),w,b
  1720  0023B2  2595               	addwf	sprintf@s& (0+255),w,b
  1721  0023B4  6ED9               	movwf	fsr2l,c
  1722  0023B6  51A4               	movf	(sprintf@f+3)& (0+255),w,b
  1723  0023B8  2196               	addwfc	(sprintf@s+1)& (0+255),w,b
  1724  0023BA  6EDA               	movwf	fsr2h,c
  1725  0023BC  0E00               	movlw	0
  1726  0023BE  6EDF               	movwf	indf2,c
  1727                           
  1728                           ; BSR set to: 0
  1729  0023C0  0012               	return		;funcret
  1730  0023C2                     __end_of_sprintf:
  1731                           	opt callstack 0
  1732                           
  1733 ;; *************** function _vfprintf *****************
  1734 ;; Defined at:
  1735 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  fp              2   13[BANK0 ] PTR struct _IO_FILE
  1738 ;;		 -> sprintf@f(6), 
  1739 ;;  fmt             2   15[BANK0 ] PTR const unsigned char 
  1740 ;;		 -> STR_6(6), STR_5(5), STR_4(5), STR_3(5), 
  1741 ;;		 -> STR_2(5), 
  1742 ;;  ap              2   17[BANK0 ] PTR PTR void 
  1743 ;;		 -> sprintf@ap(2), 
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;  cfmt            2   19[BANK0 ] PTR unsigned char 
  1746 ;;		 -> STR_6(6), STR_5(5), STR_4(5), STR_3(5), 
  1747 ;;		 -> STR_2(5), 
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  2   13[BANK0 ] int 
  1750 ;; Registers used:
  1751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1757 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1760 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1761 ;;Total ram usage:        8 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; Hardware stack levels required when called:   13
  1764 ;; This function calls:
  1765 ;;		_vfpfcnvrt
  1766 ;; This function is called by:
  1767 ;;		_sprintf
  1768 ;; This function uses a non-reentrant model
  1769 ;;
  1770                           
  1771                           	psect	text2
  1772  0022C8                     __ptext2:
  1773                           	opt callstack 0
  1774  0022C8                     _vfprintf:
  1775                           	opt callstack 16
  1776                           
  1777                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;incstack = 0
  1781  0022C8  C08F  F093         	movff	vfprintf@fmt,vfprintf@cfmt
  1782  0022CC  C090  F094         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1783                           
  1784                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1785  0022D0  0E00               	movlw	0
  1786  0022D2  6E4F               	movwf	_nout+1,c
  1787  0022D4  0E00               	movlw	0
  1788  0022D6  6E4E               	movwf	_nout,c
  1789                           
  1790                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1791  0022D8  D014               	goto	l4048
  1792  0022DA                     l4046:
  1793                           
  1794                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1795  0022DA  C08D  F080         	movff	vfprintf@fp,vfpfcnvrt@fp
  1796  0022DE  C08E  F081         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1797  0022E2  0E93               	movlw	low vfprintf@cfmt
  1798  0022E4  0100               	movlb	0	; () banked
  1799  0022E6  6F82               	movwf	vfpfcnvrt@fmt& (0+255),b
  1800  0022E8  0E00               	movlw	high vfprintf@cfmt
  1801  0022EA  6F83               	movwf	(vfpfcnvrt@fmt+1)& (0+255),b
  1802  0022EC  C091  F084         	movff	vfprintf@ap,vfpfcnvrt@ap
  1803  0022F0  C092  F085         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1804  0022F4  EC2E  F00A         	call	_vfpfcnvrt	;wreg free
  1805  0022F8  0100               	movlb	0	; () banked
  1806  0022FA  5180               	movf	?_vfpfcnvrt& (0+255),w,b
  1807  0022FC  264E               	addwf	_nout,f,c
  1808  0022FE  5181               	movf	(?_vfpfcnvrt+1)& (0+255),w,b
  1809  002300  224F               	addwfc	_nout+1,f,c
  1810  002302                     l4048:
  1811                           
  1812                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1813  002302  C093  FFF6         	movff	vfprintf@cfmt,tblptrl
  1814  002306  C094  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1815  00230A                     	if	0	;tblptru may be non-zero
  1816  00230A                     	endif
  1817  00230A                     	if	0	;tblptru may be non-zero
  1818  00230A                     	endif
  1819  00230A  0008               	tblrd		*
  1820  00230C  50F5               	movf	tablat,w,c
  1821  00230E  0900               	iorlw	0
  1822  002310  A4D8               	btfss	status,2,c
  1823  002312  D7E3               	goto	l4046
  1824                           
  1825                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  1826  002314  C04E  F08D         	movff	_nout,?_vfprintf
  1827  002318  C04F  F08E         	movff	_nout+1,?_vfprintf+1
  1828  00231C  0012               	return		;funcret
  1829  00231E                     __end_of_vfprintf:
  1830                           	opt callstack 0
  1831                           
  1832 ;; *************** function _vfpfcnvrt *****************
  1833 ;; Defined at:
  1834 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  1837 ;;		 -> sprintf@f(6), 
  1838 ;;  fmt             2    2[BANK0 ] PTR PTR unsigned char 
  1839 ;;		 -> vfprintf@cfmt(2), 
  1840 ;;  ap              2    4[BANK0 ] PTR PTR void 
  1841 ;;		 -> sprintf@ap(2), 
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  llu             8    0        unsigned long long 
  1844 ;;  ll              8    0        long long 
  1845 ;;  f               4    0        long long 
  1846 ;;  vp              3    0        PTR void 
  1847 ;;  ct              3    0        unsigned char [3]
  1848 ;;  cp              2    6[BANK0 ] PTR unsigned char 
  1849 ;;		 -> ?_sprintf(2), main@command(25), 
  1850 ;;  i               2    0        int 
  1851 ;;  done            2    0        int 
  1852 ;;  c               1    8[BANK0 ] unsigned char 
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  2    0[BANK0 ] int 
  1855 ;; Registers used:
  1856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1862 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1863 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Totals:         4      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;Total ram usage:       17 bytes
  1867 ;; Hardware stack levels used:    1
  1868 ;; Hardware stack levels required when called:   12
  1869 ;; This function calls:
  1870 ;;		_atoi
  1871 ;;		_ctoa
  1872 ;;		_fputc
  1873 ;;		_isdigit
  1874 ;;		_stoa
  1875 ;; This function is called by:
  1876 ;;		_vfprintf
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           	psect	text3
  1881  00145C                     __ptext3:
  1882                           	opt callstack 0
  1883  00145C                     _vfpfcnvrt:
  1884                           	opt callstack 16
  1885                           
  1886                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  1887                           
  1888                           ;incstack = 0
  1889  00145C  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1890  001460  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1891  001464  CFDE FFF6          	movff	postinc2,tblptrl
  1892  001468  CFDD FFF7          	movff	postdec2,tblptrh
  1893  00146C                     	if	0	;tblptru may be non-zero
  1894  00146C                     	endif
  1895  00146C                     	if	0	;tblptru may be non-zero
  1896  00146C                     	endif
  1897  00146C  0008               	tblrd		*
  1898  00146E  50F5               	movf	tablat,w,c
  1899  001470  0A25               	xorlw	37
  1900  001472  A4D8               	btfss	status,2,c
  1901  001474  D192               	goto	l4004
  1902                           
  1903                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  1904  001476  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1905  00147A  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1906  00147E  2ADE               	incf	postinc2,f,c
  1907  001480  0E00               	movlw	0
  1908  001482  22DD               	addwfc	postdec2,f,c
  1909                           
  1910                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  1911  001484  0E00               	movlw	0
  1912  001486  6E51               	movwf	_width+1,c
  1913  001488  0E00               	movlw	0
  1914  00148A  6E50               	movwf	_width,c
  1915  00148C  C050  F054         	movff	_width,_flags
  1916  001490  C051  F055         	movff	_width+1,_flags+1
  1917                           
  1918                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  1919  001494  6852               	setf	_prec,c
  1920  001496  6853               	setf	_prec+1,c
  1921                           
  1922                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  1923  001498  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1924  00149C  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1925  0014A0  CFDE FFF6          	movff	postinc2,tblptrl
  1926  0014A4  CFDD FFF7          	movff	postdec2,tblptrh
  1927  0014A8                     	if	0	;tblptru may be non-zero
  1928  0014A8                     	endif
  1929  0014A8                     	if	0	;tblptru may be non-zero
  1930  0014A8                     	endif
  1931  0014A8  0008               	tblrd		*
  1932  0014AA  50F5               	movf	tablat,w,c
  1933  0014AC  0A2A               	xorlw	42
  1934  0014AE  A4D8               	btfss	status,2,c
  1935  0014B0  D023               	goto	l3942
  1936                           
  1937                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  1938  0014B2  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1939  0014B6  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1940  0014BA  2ADE               	incf	postinc2,f,c
  1941  0014BC  0E00               	movlw	0
  1942  0014BE  22DD               	addwfc	postdec2,f,c
  1943                           
  1944                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1945  0014C0  C084  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1946  0014C4  C085  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1947  0014C8  CFDF F042          	movff	indf2,??_vfpfcnvrt
  1948  0014CC  0E02               	movlw	2
  1949  0014CE  26DE               	addwf	postinc2,f,c
  1950  0014D0  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  1951  0014D4  0E00               	movlw	0
  1952  0014D6  22DD               	addwfc	postdec2,f,c
  1953  0014D8  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1954  0014DC  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1955  0014E0  CFDE F050          	movff	postinc2,_width
  1956  0014E4  CFDD F051          	movff	postdec2,_width+1
  1957                           
  1958                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  1959  0014E8  AE51               	btfss	_width+1,7,c
  1960  0014EA  D040               	goto	u3100
  1961                           
  1962                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  1963  0014EC  8054               	bsf	_flags,0,c
  1964                           
  1965                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  1966  0014EE  6C50               	negf	_width,c
  1967  0014F0  1E51               	comf	_width+1,f,c
  1968  0014F2  B0D8               	btfsc	status,0,c
  1969  0014F4  2A51               	incf	_width+1,f,c
  1970  0014F6  D03A               	goto	u3100
  1971  0014F8                     l3942:
  1972                           
  1973                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  1974  0014F8  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1975  0014FC  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1976  001500  CFDE F025          	movff	postinc2,atoi@s
  1977  001504  CFDD F026          	movff	postdec2,atoi@s+1
  1978  001508  EC6D  F00D         	call	_atoi	;wreg free
  1979  00150C  C025  F050         	movff	?_atoi,_width
  1980  001510  C026  F051         	movff	?_atoi+1,_width+1
  1981                           
  1982                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  1983  001514  D007               	goto	l3946
  1984  001516                     l3944:
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  1988  001516  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1989  00151A  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1990  00151E  2ADE               	incf	postinc2,f,c
  1991  001520  0E00               	movlw	0
  1992  001522  22DD               	addwfc	postdec2,f,c
  1993  001524                     l3946:
  1994  001524  0ED0               	movlw	208
  1995  001526  6E42               	movwf	??_vfpfcnvrt& (0+255),c
  1996  001528  0EFF               	movlw	255
  1997  00152A  6E43               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  1998  00152C  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1999  001530  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2000  001534  CFDE FFF6          	movff	postinc2,tblptrl
  2001  001538  CFDD FFF7          	movff	postdec2,tblptrh
  2002  00153C                     	if	0	;tblptru may be non-zero
  2003  00153C                     	endif
  2004  00153C                     	if	0	;tblptru may be non-zero
  2005  00153C                     	endif
  2006  00153C  0008               	tblrd		*
  2007  00153E  50F5               	movf	tablat,w,c
  2008  001540  6E44               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  2009  001542  6A45               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  2010  001544  5042               	movf	??_vfpfcnvrt,w,c
  2011  001546  2644               	addwf	??_vfpfcnvrt+2,f,c
  2012  001548  5043               	movf	??_vfpfcnvrt+1,w,c
  2013  00154A  2245               	addwfc	??_vfpfcnvrt+3,f,c
  2014  00154C  5045               	movf	??_vfpfcnvrt+3,w,c
  2015  00154E  E106               	bnz	u3080
  2016  001550  0E0A               	movlw	10
  2017  001552  5C44               	subwf	??_vfpfcnvrt+2,w,c
  2018  001554  B0D8               	btfsc	status,0,c
  2019  001556  D002               	goto	u3080
  2020  001558  0E01               	movlw	1
  2021  00155A  D001               	goto	u3090
  2022  00155C                     u3080:
  2023  00155C  0E00               	movlw	0
  2024  00155E                     u3090:
  2025  00155E  0100               	movlb	0	; () banked
  2026  001560  6F89               	movwf	_vfpfcnvrt$1122& (0+255),b
  2027  001562  6B8A               	clrf	(_vfpfcnvrt$1122+1)& (0+255),b
  2028                           
  2029                           ; BSR set to: 0
  2030  001564  5189               	movf	_vfpfcnvrt$1122& (0+255),w,b
  2031  001566  118A               	iorwf	(_vfpfcnvrt$1122+1)& (0+255),w,b
  2032  001568  A4D8               	btfss	status,2,c
  2033  00156A  D7D5               	goto	l3944
  2034  00156C                     u3100:
  2035                           
  2036                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 740:       
      +                            if ((*fmt)[0] == '.') {
  2037  00156C  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2038  001570  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2039  001574  CFDE FFF6          	movff	postinc2,tblptrl
  2040  001578  CFDD FFF7          	movff	postdec2,tblptrh
  2041  00157C                     	if	0	;tblptru may be non-zero
  2042  00157C                     	endif
  2043  00157C                     	if	0	;tblptru may be non-zero
  2044  00157C                     	endif
  2045  00157C  0008               	tblrd		*
  2046  00157E  50F5               	movf	tablat,w,c
  2047  001580  0A2E               	xorlw	46
  2048  001582  A4D8               	btfss	status,2,c
  2049  001584  D06E               	goto	u3150
  2050                           
  2051                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 741:       
      +                                prec = 0;
  2052  001586  0E00               	movlw	0
  2053  001588  6E53               	movwf	_prec+1,c
  2054  00158A  0E00               	movlw	0
  2055  00158C  6E52               	movwf	_prec,c
  2056                           
  2057                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 742:       
      +                                ++*fmt;
  2058  00158E  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2059  001592  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2060  001596  2ADE               	incf	postinc2,f,c
  2061  001598  0E00               	movlw	0
  2062  00159A  22DD               	addwfc	postdec2,f,c
  2063                           
  2064                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 743:       
      +                                if ((*fmt)[0] == '*') {
  2065  00159C  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2066  0015A0  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2067  0015A4  CFDE FFF6          	movff	postinc2,tblptrl
  2068  0015A8  CFDD FFF7          	movff	postdec2,tblptrh
  2069  0015AC                     	if	0	;tblptru may be non-zero
  2070  0015AC                     	endif
  2071  0015AC                     	if	0	;tblptru may be non-zero
  2072  0015AC                     	endif
  2073  0015AC  0008               	tblrd		*
  2074  0015AE  50F5               	movf	tablat,w,c
  2075  0015B0  0A2A               	xorlw	42
  2076  0015B2  A4D8               	btfss	status,2,c
  2077  0015B4  D01C               	goto	l3962
  2078                           
  2079                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 744:       
      +                                    ++*fmt;
  2080  0015B6  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2081  0015BA  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2082  0015BE  2ADE               	incf	postinc2,f,c
  2083  0015C0  0E00               	movlw	0
  2084  0015C2  22DD               	addwfc	postdec2,f,c
  2085                           
  2086                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 745:       
      +                                    prec = (*(int *)__va_arg(*(int **)ap, (int)0));
  2087  0015C4  C084  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2088  0015C8  C085  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2089  0015CC  CFDF F042          	movff	indf2,??_vfpfcnvrt
  2090  0015D0  0E02               	movlw	2
  2091  0015D2  26DE               	addwf	postinc2,f,c
  2092  0015D4  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  2093  0015D8  0E00               	movlw	0
  2094  0015DA  22DD               	addwfc	postdec2,f,c
  2095  0015DC  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2096  0015E0  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2097  0015E4  CFDE F052          	movff	postinc2,_prec
  2098  0015E8  CFDD F053          	movff	postdec2,_prec+1
  2099                           
  2100                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 746:       
      +                                } else {
  2101  0015EC  D03A               	goto	u3150
  2102  0015EE                     l3962:
  2103                           
  2104                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 747:       
      +                                    prec = atoi(*fmt);
  2105  0015EE  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2106  0015F2  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2107  0015F6  CFDE F025          	movff	postinc2,atoi@s
  2108  0015FA  CFDD F026          	movff	postdec2,atoi@s+1
  2109  0015FE  EC6D  F00D         	call	_atoi	;wreg free
  2110  001602  C025  F052         	movff	?_atoi,_prec
  2111  001606  C026  F053         	movff	?_atoi+1,_prec+1
  2112                           
  2113                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 748:       
      +                                    while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  2114  00160A  D007               	goto	l3966
  2115  00160C                     l3964:
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 749:       
      +                                        ++*fmt;
  2119  00160C  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2120  001610  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2121  001614  2ADE               	incf	postinc2,f,c
  2122  001616  0E00               	movlw	0
  2123  001618  22DD               	addwfc	postdec2,f,c
  2124  00161A                     l3966:
  2125  00161A  0ED0               	movlw	208
  2126  00161C  6E42               	movwf	??_vfpfcnvrt& (0+255),c
  2127  00161E  0EFF               	movlw	255
  2128  001620  6E43               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  2129  001622  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2130  001626  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2131  00162A  CFDE FFF6          	movff	postinc2,tblptrl
  2132  00162E  CFDD FFF7          	movff	postdec2,tblptrh
  2133  001632                     	if	0	;tblptru may be non-zero
  2134  001632                     	endif
  2135  001632                     	if	0	;tblptru may be non-zero
  2136  001632                     	endif
  2137  001632  0008               	tblrd		*
  2138  001634  50F5               	movf	tablat,w,c
  2139  001636  6E44               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  2140  001638  6A45               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  2141  00163A  5042               	movf	??_vfpfcnvrt,w,c
  2142  00163C  2644               	addwf	??_vfpfcnvrt+2,f,c
  2143  00163E  5043               	movf	??_vfpfcnvrt+1,w,c
  2144  001640  2245               	addwfc	??_vfpfcnvrt+3,f,c
  2145  001642  5045               	movf	??_vfpfcnvrt+3,w,c
  2146  001644  E106               	bnz	u3130
  2147  001646  0E0A               	movlw	10
  2148  001648  5C44               	subwf	??_vfpfcnvrt+2,w,c
  2149  00164A  B0D8               	btfsc	status,0,c
  2150  00164C  D002               	goto	u3130
  2151  00164E  0E01               	movlw	1
  2152  001650  D001               	goto	u3140
  2153  001652                     u3130:
  2154  001652  0E00               	movlw	0
  2155  001654                     u3140:
  2156  001654  0100               	movlb	0	; () banked
  2157  001656  6F8B               	movwf	_vfpfcnvrt$1123& (0+255),b
  2158  001658  6B8C               	clrf	(_vfpfcnvrt$1123+1)& (0+255),b
  2159                           
  2160                           ; BSR set to: 0
  2161  00165A  518B               	movf	_vfpfcnvrt$1123& (0+255),w,b
  2162  00165C  118C               	iorwf	(_vfpfcnvrt$1123+1)& (0+255),w,b
  2163  00165E  A4D8               	btfss	status,2,c
  2164  001660  D7D5               	goto	l3964
  2165  001662                     u3150:
  2166                           
  2167                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  2168  001662  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2169  001666  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2170  00166A  CFDE FFF6          	movff	postinc2,tblptrl
  2171  00166E  CFDD FFF7          	movff	postdec2,tblptrh
  2172  001672                     	if	0	;tblptru may be non-zero
  2173  001672                     	endif
  2174  001672                     	if	0	;tblptru may be non-zero
  2175  001672                     	endif
  2176  001672  0008               	tblrd		*
  2177  001674  50F5               	movf	tablat,w,c
  2178  001676  0A63               	xorlw	99
  2179  001678  A4D8               	btfss	status,2,c
  2180  00167A  D027               	goto	l3980
  2181                           
  2182                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  2183  00167C  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2184  001680  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2185  001684  2ADE               	incf	postinc2,f,c
  2186  001686  0E00               	movlw	0
  2187  001688  22DD               	addwfc	postdec2,f,c
  2188                           
  2189                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  2190  00168A  C084  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2191  00168E  C085  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2192  001692  CFDF F042          	movff	indf2,??_vfpfcnvrt
  2193  001696  0E02               	movlw	2
  2194  001698  26DE               	addwf	postinc2,f,c
  2195  00169A  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  2196  00169E  0E00               	movlw	0
  2197  0016A0  22DD               	addwfc	postdec2,f,c
  2198  0016A2  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2199  0016A6  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2200  0016AA  50DF               	movf	indf2,w,c
  2201  0016AC  0100               	movlb	0	; () banked
  2202  0016AE  6F88               	movwf	vfpfcnvrt@c& (0+255),b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  2206  0016B0  C080  F03D         	movff	vfpfcnvrt@fp,ctoa@fp
  2207  0016B4  C081  F03E         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  2208  0016B8  C088  F03F         	movff	vfpfcnvrt@c,ctoa@c
  2209  0016BC  EC09  F012         	call	_ctoa	;wreg free
  2210  0016C0  C03D  F080         	movff	?_ctoa,?_vfpfcnvrt
  2211  0016C4  C03E  F081         	movff	?_ctoa+1,?_vfpfcnvrt+1
  2212  0016C8  0012               	return	
  2213  0016CA                     l3980:
  2214                           
  2215                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
  2216  0016CA  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2217  0016CE  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2218  0016D2  CFDE FFF6          	movff	postinc2,tblptrl
  2219  0016D6  CFDD FFF7          	movff	postdec2,tblptrh
  2220  0016DA                     	if	0	;tblptru may be non-zero
  2221  0016DA                     	endif
  2222  0016DA                     	if	0	;tblptru may be non-zero
  2223  0016DA                     	endif
  2224  0016DA  0008               	tblrd		*
  2225  0016DC  50F5               	movf	tablat,w,c
  2226  0016DE  0A73               	xorlw	115
  2227  0016E0  A4D8               	btfss	status,2,c
  2228  0016E2  D02A               	goto	l3988
  2229                           
  2230                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
  2231  0016E4  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2232  0016E8  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2233  0016EC  2ADE               	incf	postinc2,f,c
  2234  0016EE  0E00               	movlw	0
  2235  0016F0  22DD               	addwfc	postdec2,f,c
  2236                           
  2237                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  2238  0016F2  C084  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2239  0016F6  C085  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2240  0016FA  CFDF F042          	movff	indf2,??_vfpfcnvrt
  2241  0016FE  0E02               	movlw	2
  2242  001700  26DE               	addwf	postinc2,f,c
  2243  001702  CFDF F043          	movff	indf2,??_vfpfcnvrt+1
  2244  001706  0E00               	movlw	0
  2245  001708  22DD               	addwfc	postdec2,f,c
  2246  00170A  C042  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2247  00170E  C043  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2248  001712  CFDE F086          	movff	postinc2,vfpfcnvrt@cp
  2249  001716  CFDD F087          	movff	postdec2,vfpfcnvrt@cp+1
  2250                           
  2251                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
  2252  00171A  C080  F02B         	movff	vfpfcnvrt@fp,stoa@fp
  2253  00171E  C081  F02C         	movff	vfpfcnvrt@fp+1,stoa@fp+1
  2254  001722  C086  F02D         	movff	vfpfcnvrt@cp,stoa@s
  2255  001726  C087  F02E         	movff	vfpfcnvrt@cp+1,stoa@s+1
  2256  00172A  EC0D  F00E         	call	_stoa	;wreg free
  2257  00172E  C02B  F080         	movff	?_stoa,?_vfpfcnvrt
  2258  001732  C02C  F081         	movff	?_stoa+1,?_vfpfcnvrt+1
  2259  001736  0012               	return	
  2260  001738                     l3988:
  2261                           
  2262                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  2263  001738  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2264  00173C  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2265  001740  CFDE FFF6          	movff	postinc2,tblptrl
  2266  001744  CFDD FFF7          	movff	postdec2,tblptrh
  2267  001748                     	if	0	;tblptru may be non-zero
  2268  001748                     	endif
  2269  001748                     	if	0	;tblptru may be non-zero
  2270  001748                     	endif
  2271  001748  0008               	tblrd		*
  2272  00174A  50F5               	movf	tablat,w,c
  2273  00174C  0A25               	xorlw	37
  2274  00174E  A4D8               	btfss	status,2,c
  2275  001750  D017               	goto	l3998
  2276                           
  2277                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  2278  001752  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2279  001756  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2280  00175A  2ADE               	incf	postinc2,f,c
  2281  00175C  0E00               	movlw	0
  2282  00175E  22DD               	addwfc	postdec2,f,c
  2283                           
  2284                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  2285  001760  0E00               	movlw	0
  2286  001762  6E23               	movwf	fputc@c+1,c
  2287  001764  0E25               	movlw	37
  2288  001766  6E22               	movwf	fputc@c,c
  2289  001768  C080  F024         	movff	vfpfcnvrt@fp,fputc@fp
  2290  00176C  C081  F025         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2291  001770  ECDC  F00F         	call	_fputc	;wreg free
  2292  001774                     l3994:
  2293                           
  2294                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  2295  001774  0E00               	movlw	0
  2296  001776  0100               	movlb	0	; () banked
  2297  001778  6F81               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  2298  00177A  0E01               	movlw	1
  2299  00177C  6F80               	movwf	?_vfpfcnvrt& (0+255),b
  2300  00177E  0012               	return	
  2301  001780                     l3998:
  2302                           
  2303                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  2304  001780  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2305  001784  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2306  001788  2ADE               	incf	postinc2,f,c
  2307  00178A  0E00               	movlw	0
  2308  00178C  22DD               	addwfc	postdec2,f,c
  2309                           
  2310                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  2311  00178E  0E00               	movlw	0
  2312  001790  0100               	movlb	0	; () banked
  2313  001792  6F81               	movwf	(?_vfpfcnvrt+1)& (0+255),b
  2314  001794  0E00               	movlw	0
  2315  001796  6F80               	movwf	?_vfpfcnvrt& (0+255),b
  2316  001798  0012               	return	
  2317  00179A                     l4004:
  2318                           
  2319                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  2320  00179A  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2321  00179E  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2322  0017A2  CFDE FFF6          	movff	postinc2,tblptrl
  2323  0017A6  CFDD FFF7          	movff	postdec2,tblptrh
  2324  0017AA                     	if	0	;tblptru may be non-zero
  2325  0017AA                     	endif
  2326  0017AA                     	if	0	;tblptru may be non-zero
  2327  0017AA                     	endif
  2328  0017AA  0008               	tblrd		*
  2329  0017AC  50F5               	movf	tablat,w,c
  2330  0017AE  6E22               	movwf	fputc@c,c
  2331  0017B0  6A23               	clrf	fputc@c+1,c
  2332  0017B2  C080  F024         	movff	vfpfcnvrt@fp,fputc@fp
  2333  0017B6  C081  F025         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2334  0017BA  ECDC  F00F         	call	_fputc	;wreg free
  2335                           
  2336                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  2337  0017BE  C082  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2338  0017C2  C083  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2339  0017C6  2ADE               	incf	postinc2,f,c
  2340  0017C8  0E00               	movlw	0
  2341  0017CA  22DD               	addwfc	postdec2,f,c
  2342  0017CC  D7D3               	goto	l3994
  2343  0017CE                     __end_of_vfpfcnvrt:
  2344                           	opt callstack 0
  2345                           
  2346 ;; *************** function _stoa *****************
  2347 ;; Defined at:
  2348 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2351 ;;		 -> sprintf@f(6), 
  2352 ;;  s               2   44[COMRAM] PTR unsigned char 
  2353 ;;		 -> ?_sprintf(2), main@command(25), 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  nuls            7   47[COMRAM] unsigned char [7]
  2356 ;;  l               2   62[COMRAM] int 
  2357 ;;  p               2   60[COMRAM] int 
  2358 ;;  cp              2   58[COMRAM] PTR unsigned char 
  2359 ;;		 -> ?_sprintf(2), stoa@nuls(7), main@command(25), 
  2360 ;;  w               2   56[COMRAM] int 
  2361 ;;  i               2   54[COMRAM] int 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  2   42[COMRAM] int 
  2364 ;; Registers used:
  2365 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2371 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2372 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2373 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2374 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2375 ;;Total ram usage:       22 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    9
  2378 ;; This function calls:
  2379 ;;		_fputc
  2380 ;;		_strlen
  2381 ;; This function is called by:
  2382 ;;		_vfpfcnvrt
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text4
  2387  001C1A                     __ptext4:
  2388                           	opt callstack 0
  2389  001C1A                     _stoa:
  2390                           	opt callstack 18
  2391                           
  2392                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
  2393                           
  2394                           ;incstack = 0
  2395  001C1A  EE20  F05A         	lfsr	2,stoa@F1136
  2396  001C1E  EE10  F030         	lfsr	1,stoa@nuls
  2397  001C22  0E06               	movlw	6
  2398  001C24                     u2871:
  2399  001C24  CFDB FFE3          	movff	plusw2,plusw1
  2400  001C28  06E8               	decf	wreg,f,c
  2401  001C2A  E2FC               	bc	u2871
  2402                           
  2403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
  2404  001C2C  C02D  F03B         	movff	stoa@s,stoa@cp
  2405  001C30  C02E  F03C         	movff	stoa@s+1,stoa@cp+1
  2406                           
  2407                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
  2408  001C34  503B               	movf	stoa@cp,w,c
  2409  001C36  103C               	iorwf	stoa@cp+1,w,c
  2410  001C38  A4D8               	btfss	status,2,c
  2411  001C3A  D004               	goto	l3846
  2412                           
  2413                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
  2414  001C3C  0E30               	movlw	low stoa@nuls
  2415  001C3E  6E3B               	movwf	stoa@cp,c
  2416  001C40  0E00               	movlw	high stoa@nuls
  2417  001C42  6E3C               	movwf	stoa@cp+1,c
  2418  001C44                     l3846:
  2419                           
  2420                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
  2421  001C44  C03B  F01E         	movff	stoa@cp,strlen@s
  2422  001C48  C03C  F01F         	movff	stoa@cp+1,strlen@s+1
  2423  001C4C  EC09  F013         	call	_strlen	;wreg free
  2424  001C50  C01E  F03F         	movff	?_strlen,stoa@l
  2425  001C54  C01F  F040         	movff	?_strlen+1,stoa@l+1
  2426                           
  2427                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
  2428  001C58  C052  F03D         	movff	_prec,stoa@p
  2429  001C5C  C053  F03E         	movff	_prec+1,stoa@p+1
  2430                           
  2431                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
  2432  001C60  BE3E               	btfsc	stoa@p+1,7,c
  2433  001C62  D00E               	goto	l471
  2434  001C64  503F               	movf	stoa@l,w,c
  2435  001C66  5C3D               	subwf	stoa@p,w,c
  2436  001C68  503E               	movf	stoa@p+1,w,c
  2437  001C6A  0A80               	xorlw	128
  2438  001C6C  6E2F               	movwf	??_stoa& (0+255),c
  2439  001C6E  5040               	movf	stoa@l+1,w,c
  2440  001C70  0A80               	xorlw	128
  2441  001C72  582F               	subwfb	??_stoa& (0+255),w,c
  2442  001C74  B0D8               	btfsc	status,0,c
  2443  001C76  D004               	goto	l471
  2444  001C78  C03D  F03F         	movff	stoa@p,stoa@l
  2445  001C7C  C03E  F040         	movff	stoa@p+1,stoa@l+1
  2446  001C80                     l471:
  2447                           
  2448                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
  2449  001C80  C03F  F03D         	movff	stoa@l,stoa@p
  2450  001C84  C040  F03E         	movff	stoa@l+1,stoa@p+1
  2451                           
  2452                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
  2453  001C88  C050  F039         	movff	_width,stoa@w
  2454  001C8C  C051  F03A         	movff	_width+1,stoa@w+1
  2455                           
  2456                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
  2457  001C90  A054               	btfss	_flags,0,c
  2458  001C92  D00D               	goto	l3860
  2459  001C94  D016               	goto	u2920
  2460  001C96                     l3856:
  2461                           
  2462                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
  2463  001C96  0E00               	movlw	0
  2464  001C98  6E23               	movwf	fputc@c+1,c
  2465  001C9A  0E20               	movlw	32
  2466  001C9C  6E22               	movwf	fputc@c,c
  2467  001C9E  C02B  F024         	movff	stoa@fp,fputc@fp
  2468  001CA2  C02C  F025         	movff	stoa@fp+1,fputc@fp+1
  2469  001CA6  ECDC  F00F         	call	_fputc	;wreg free
  2470                           
  2471                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
  2472  001CAA  4A3F               	infsnz	stoa@l,f,c
  2473  001CAC  2A40               	incf	stoa@l+1,f,c
  2474  001CAE                     l3860:
  2475                           
  2476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
  2477  001CAE  5039               	movf	stoa@w,w,c
  2478  001CB0  5C3F               	subwf	stoa@l,w,c
  2479  001CB2  5040               	movf	stoa@l+1,w,c
  2480  001CB4  0A80               	xorlw	128
  2481  001CB6  6E2F               	movwf	??_stoa& (0+255),c
  2482  001CB8  503A               	movf	stoa@w+1,w,c
  2483  001CBA  0A80               	xorlw	128
  2484  001CBC  582F               	subwfb	??_stoa& (0+255),w,c
  2485  001CBE  A0D8               	btfss	status,0,c
  2486  001CC0  D7EA               	goto	l3856
  2487  001CC2                     u2920:
  2488                           
  2489                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
  2490  001CC2  0E00               	movlw	0
  2491  001CC4  6E38               	movwf	stoa@i+1,c
  2492  001CC6  0E00               	movlw	0
  2493  001CC8  6E37               	movwf	stoa@i,c
  2494                           
  2495                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  2496  001CCA  D013               	goto	l3870
  2497  001CCC                     l3864:
  2498                           
  2499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
  2500  001CCC  C03B  FFD9         	movff	stoa@cp,fsr2l
  2501  001CD0  C03C  FFDA         	movff	stoa@cp+1,fsr2h
  2502  001CD4  50DF               	movf	indf2,w,c
  2503  001CD6  6E2F               	movwf	??_stoa& (0+255),c
  2504  001CD8  502F               	movf	??_stoa,w,c
  2505  001CDA  6E22               	movwf	fputc@c,c
  2506  001CDC  6A23               	clrf	fputc@c+1,c
  2507  001CDE  C02B  F024         	movff	stoa@fp,fputc@fp
  2508  001CE2  C02C  F025         	movff	stoa@fp+1,fputc@fp+1
  2509  001CE6  ECDC  F00F         	call	_fputc	;wreg free
  2510                           
  2511                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
  2512  001CEA  4A3B               	infsnz	stoa@cp,f,c
  2513  001CEC  2A3C               	incf	stoa@cp+1,f,c
  2514                           
  2515                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
  2516  001CEE  4A37               	infsnz	stoa@i,f,c
  2517  001CF0  2A38               	incf	stoa@i+1,f,c
  2518  001CF2                     l3870:
  2519                           
  2520                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  2521  001CF2  503D               	movf	stoa@p,w,c
  2522  001CF4  5C37               	subwf	stoa@i,w,c
  2523  001CF6  5038               	movf	stoa@i+1,w,c
  2524  001CF8  0A80               	xorlw	128
  2525  001CFA  6E2F               	movwf	??_stoa& (0+255),c
  2526  001CFC  503E               	movf	stoa@p+1,w,c
  2527  001CFE  0A80               	xorlw	128
  2528  001D00  582F               	subwfb	??_stoa& (0+255),w,c
  2529  001D02  A0D8               	btfss	status,0,c
  2530  001D04  D7E3               	goto	l3864
  2531                           
  2532                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
  2533  001D06  B054               	btfsc	_flags,0,c
  2534  001D08  D00D               	goto	l3878
  2535  001D0A  D016               	goto	u2950
  2536  001D0C                     l3874:
  2537                           
  2538                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
  2539  001D0C  0E00               	movlw	0
  2540  001D0E  6E23               	movwf	fputc@c+1,c
  2541  001D10  0E20               	movlw	32
  2542  001D12  6E22               	movwf	fputc@c,c
  2543  001D14  C02B  F024         	movff	stoa@fp,fputc@fp
  2544  001D18  C02C  F025         	movff	stoa@fp+1,fputc@fp+1
  2545  001D1C  ECDC  F00F         	call	_fputc	;wreg free
  2546                           
  2547                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
  2548  001D20  4A3F               	infsnz	stoa@l,f,c
  2549  001D22  2A40               	incf	stoa@l+1,f,c
  2550  001D24                     l3878:
  2551                           
  2552                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
  2553  001D24  5039               	movf	stoa@w,w,c
  2554  001D26  5C3F               	subwf	stoa@l,w,c
  2555  001D28  5040               	movf	stoa@l+1,w,c
  2556  001D2A  0A80               	xorlw	128
  2557  001D2C  6E2F               	movwf	??_stoa& (0+255),c
  2558  001D2E  503A               	movf	stoa@w+1,w,c
  2559  001D30  0A80               	xorlw	128
  2560  001D32  582F               	subwfb	??_stoa& (0+255),w,c
  2561  001D34  A0D8               	btfss	status,0,c
  2562  001D36  D7EA               	goto	l3874
  2563  001D38                     u2950:
  2564                           
  2565                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
  2566                           
  2567                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 586:     }
  2568  001D38  C03F  F02B         	movff	stoa@l,?_stoa
  2569  001D3C  C040  F02C         	movff	stoa@l+1,?_stoa+1
  2570  001D40  0012               	return		;funcret
  2571  001D42                     __end_of_stoa:
  2572                           	opt callstack 0
  2573                           
  2574 ;; *************** function _ctoa *****************
  2575 ;; Defined at:
  2576 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;  fp              2   60[COMRAM] PTR struct _IO_FILE
  2579 ;;		 -> sprintf@f(6), 
  2580 ;;  c               1   62[COMRAM] unsigned char 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;  w               2   63[COMRAM] int 
  2583 ;;  l               2    0        int 
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  2   60[COMRAM] int 
  2586 ;; Registers used:
  2587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2593 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2597 ;;Total ram usage:        5 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:   11
  2600 ;; This function calls:
  2601 ;;		_pad
  2602 ;; This function is called by:
  2603 ;;		_vfpfcnvrt
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text5
  2608  002412                     __ptext5:
  2609                           	opt callstack 0
  2610  002412                     _ctoa:
  2611                           	opt callstack 16
  2612                           
  2613                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  2614                           
  2615                           ;incstack = 0
  2616  002412  5050               	movf	_width,w,c
  2617  002414  1051               	iorwf	_width+1,w,c
  2618  002416  A4D8               	btfss	status,2,c
  2619  002418  D005               	goto	l3828
  2620  00241A  C050  F040         	movff	_width,ctoa@w
  2621  00241E  C051  F041         	movff	_width+1,ctoa@w+1
  2622  002422  D006               	goto	l3830
  2623  002424                     l3828:
  2624  002424  0EFF               	movlw	255
  2625  002426  2450               	addwf	_width,w,c
  2626  002428  6E40               	movwf	ctoa@w,c
  2627  00242A  0EFF               	movlw	255
  2628  00242C  2051               	addwfc	_width+1,w,c
  2629  00242E  6E41               	movwf	ctoa@w+1,c
  2630  002430                     l3830:
  2631                           
  2632                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  2633  002430  C03F  F0AD         	movff	ctoa@c,_dbuf
  2634                           
  2635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  2636  002434  0E00               	movlw	0
  2637  002436  0100               	movlb	0	; () banked
  2638  002438  6FAE               	movwf	(_dbuf+1)& (0+255),b
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  2642  00243A  C03D  F032         	movff	ctoa@fp,pad@fp
  2643  00243E  C03E  F033         	movff	ctoa@fp+1,pad@fp+1
  2644  002442  0EAD               	movlw	low _dbuf
  2645  002444  6E34               	movwf	pad@buf,c
  2646  002446  0E00               	movlw	high _dbuf
  2647  002448  6E35               	movwf	pad@buf+1,c
  2648  00244A  C040  F036         	movff	ctoa@w,pad@p
  2649  00244E  C041  F037         	movff	ctoa@w+1,pad@p+1
  2650  002452  EC2C  F010         	call	_pad	;wreg free
  2651  002456  C032  F03D         	movff	?_pad,?_ctoa
  2652  00245A  C033  F03E         	movff	?_pad+1,?_ctoa+1
  2653  00245E  0012               	return		;funcret
  2654  002460                     __end_of_ctoa:
  2655                           	opt callstack 0
  2656                           
  2657 ;; *************** function _pad *****************
  2658 ;; Defined at:
  2659 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  fp              2   49[COMRAM] PTR struct _IO_FILE
  2662 ;;		 -> sprintf@f(6), 
  2663 ;;  buf             2   51[COMRAM] PTR unsigned char 
  2664 ;;		 -> dbuf(32), 
  2665 ;;  p               2   53[COMRAM] int 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  w               2   58[COMRAM] int 
  2668 ;;  i               2   56[COMRAM] int 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  2   49[COMRAM] int 
  2671 ;; Registers used:
  2672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2678 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2679 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;Total ram usage:       11 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:   10
  2685 ;; This function calls:
  2686 ;;		_fputc
  2687 ;;		_fputs
  2688 ;;		_strlen
  2689 ;; This function is called by:
  2690 ;;		_ctoa
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text6
  2695  002058                     __ptext6:
  2696                           	opt callstack 0
  2697  002058                     _pad:
  2698                           	opt callstack 16
  2699                           
  2700                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2701                           
  2702                           ;incstack = 0
  2703  002058  A054               	btfss	_flags,0,c
  2704  00205A  D00A               	goto	l3784
  2705                           
  2706                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2707  00205C  C034  F02B         	movff	pad@buf,fputs@s
  2708  002060  C035  F02C         	movff	pad@buf+1,fputs@s+1
  2709  002064  C032  F02D         	movff	pad@fp,fputs@fp
  2710  002068  C033  F02E         	movff	pad@fp+1,fputs@fp+1
  2711  00206C  ECBE  F012         	call	_fputs	;wreg free
  2712  002070                     l3784:
  2713                           
  2714                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2715  002070  BE37               	btfsc	pad@p+1,7,c
  2716  002072  D005               	goto	l3788
  2717  002074  C036  F03B         	movff	pad@p,pad@w
  2718  002078  C037  F03C         	movff	pad@p+1,pad@w+1
  2719  00207C  D004               	goto	l450
  2720  00207E                     l3788:
  2721  00207E  0E00               	movlw	0
  2722  002080  6E3C               	movwf	pad@w+1,c
  2723  002082  0E00               	movlw	0
  2724  002084  6E3B               	movwf	pad@w,c
  2725  002086                     l450:
  2726                           
  2727                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2728  002086  0E00               	movlw	0
  2729  002088  6E3A               	movwf	pad@i+1,c
  2730  00208A  0E00               	movlw	0
  2731  00208C  6E39               	movwf	pad@i,c
  2732                           
  2733                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2734  00208E  D00C               	goto	l3794
  2735  002090                     l3790:
  2736                           
  2737                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2738  002090  0E00               	movlw	0
  2739  002092  6E23               	movwf	fputc@c+1,c
  2740  002094  0E20               	movlw	32
  2741  002096  6E22               	movwf	fputc@c,c
  2742  002098  C032  F024         	movff	pad@fp,fputc@fp
  2743  00209C  C033  F025         	movff	pad@fp+1,fputc@fp+1
  2744  0020A0  ECDC  F00F         	call	_fputc	;wreg free
  2745                           
  2746                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2747  0020A4  4A39               	infsnz	pad@i,f,c
  2748  0020A6  2A3A               	incf	pad@i+1,f,c
  2749  0020A8                     l3794:
  2750                           
  2751                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2752  0020A8  503B               	movf	pad@w,w,c
  2753  0020AA  5C39               	subwf	pad@i,w,c
  2754  0020AC  503A               	movf	pad@i+1,w,c
  2755  0020AE  0A80               	xorlw	128
  2756  0020B0  6E38               	movwf	??_pad& (0+255),c
  2757  0020B2  503C               	movf	pad@w+1,w,c
  2758  0020B4  0A80               	xorlw	128
  2759  0020B6  5838               	subwfb	??_pad& (0+255),w,c
  2760  0020B8  A0D8               	btfss	status,0,c
  2761  0020BA  D7EA               	goto	l3790
  2762                           
  2763                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2764  0020BC  B054               	btfsc	_flags,0,c
  2765  0020BE  D00A               	goto	l3798
  2766                           
  2767                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2768  0020C0  C034  F02B         	movff	pad@buf,fputs@s
  2769  0020C4  C035  F02C         	movff	pad@buf+1,fputs@s+1
  2770  0020C8  C032  F02D         	movff	pad@fp,fputs@fp
  2771  0020CC  C033  F02E         	movff	pad@fp+1,fputs@fp+1
  2772  0020D0  ECBE  F012         	call	_fputs	;wreg free
  2773  0020D4                     l3798:
  2774                           
  2775                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2776  0020D4  C034  F01E         	movff	pad@buf,strlen@s
  2777  0020D8  C035  F01F         	movff	pad@buf+1,strlen@s+1
  2778  0020DC  EC09  F013         	call	_strlen	;wreg free
  2779  0020E0  503B               	movf	pad@w,w,c
  2780  0020E2  241E               	addwf	?_strlen,w,c
  2781  0020E4  6E32               	movwf	?_pad,c
  2782  0020E6  503C               	movf	pad@w+1,w,c
  2783  0020E8  201F               	addwfc	?_strlen+1,w,c
  2784  0020EA  6E33               	movwf	?_pad+1,c
  2785  0020EC  0012               	return		;funcret
  2786  0020EE                     __end_of_pad:
  2787                           	opt callstack 0
  2788                           
  2789 ;; *************** function _strlen *****************
  2790 ;; Defined at:
  2791 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2792 ;; Parameters:    Size  Location     Type
  2793 ;;  s               2   29[COMRAM] PTR const unsigned char 
  2794 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), main@command(25), 
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;  a               2   31[COMRAM] PTR const unsigned char 
  2797 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), main@command(25), 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  2   29[COMRAM] unsigned int 
  2800 ;; Registers used:
  2801 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2807 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2810 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;Total ram usage:        4 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    4
  2814 ;; This function calls:
  2815 ;;		Nothing
  2816 ;; This function is called by:
  2817 ;;		_pad
  2818 ;;		_stoa
  2819 ;;		_reverse
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text7
  2824  002612                     __ptext7:
  2825                           	opt callstack 0
  2826  002612                     _strlen:
  2827                           	opt callstack 22
  2828                           
  2829                           ;incstack = 0
  2830  002612  C01E  F020         	movff	strlen@s,strlen@a
  2831  002616  C01F  F021         	movff	strlen@s+1,strlen@a+1
  2832  00261A  D002               	goto	l3766
  2833  00261C                     l3764:
  2834  00261C  4A1E               	infsnz	strlen@s,f,c
  2835  00261E  2A1F               	incf	strlen@s+1,f,c
  2836  002620                     l3766:
  2837  002620  C01E  FFD9         	movff	strlen@s,fsr2l
  2838  002624  C01F  FFDA         	movff	strlen@s+1,fsr2h
  2839  002628  50DF               	movf	indf2,w,c
  2840  00262A  A4D8               	btfss	status,2,c
  2841  00262C  D7F7               	goto	l3764
  2842  00262E  5020               	movf	strlen@a,w,c
  2843  002630  5C1E               	subwf	strlen@s,w,c
  2844  002632  6E1E               	movwf	?_strlen,c
  2845  002634  5021               	movf	strlen@a+1,w,c
  2846  002636  581F               	subwfb	strlen@s+1,w,c
  2847  002638  6E1F               	movwf	?_strlen+1,c
  2848  00263A  0012               	return		;funcret
  2849  00263C                     __end_of_strlen:
  2850                           	opt callstack 0
  2851                           
  2852 ;; *************** function _fputs *****************
  2853 ;; Defined at:
  2854 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  2855 ;; Parameters:    Size  Location     Type
  2856 ;;  s               2   42[COMRAM] PTR const unsigned char 
  2857 ;;		 -> dbuf(32), 
  2858 ;;  fp              2   44[COMRAM] PTR struct _IO_FILE
  2859 ;;		 -> sprintf@f(6), 
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;  i               2   47[COMRAM] int 
  2862 ;;  c               1   46[COMRAM] unsigned char 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  2   42[COMRAM] int 
  2865 ;; Registers used:
  2866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2872 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;Total ram usage:        7 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; Hardware stack levels required when called:    9
  2879 ;; This function calls:
  2880 ;;		_fputc
  2881 ;; This function is called by:
  2882 ;;		_pad
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           	psect	text8
  2887  00257C                     __ptext8:
  2888                           	opt callstack 0
  2889  00257C                     _fputs:
  2890                           	opt callstack 16
  2891                           
  2892                           ;incstack = 0
  2893  00257C  0E00               	movlw	0
  2894  00257E  6E31               	movwf	fputs@i+1,c
  2895  002580  0E00               	movlw	0
  2896  002582  6E30               	movwf	fputs@i,c
  2897  002584  D00B               	goto	l3778
  2898  002586                     l3774:
  2899  002586  C02F  F022         	movff	fputs@c,fputc@c
  2900  00258A  6A23               	clrf	fputc@c+1,c
  2901  00258C  C02D  F024         	movff	fputs@fp,fputc@fp
  2902  002590  C02E  F025         	movff	fputs@fp+1,fputc@fp+1
  2903  002594  ECDC  F00F         	call	_fputc	;wreg free
  2904  002598  4A30               	infsnz	fputs@i,f,c
  2905  00259A  2A31               	incf	fputs@i+1,f,c
  2906  00259C                     l3778:
  2907  00259C  5030               	movf	fputs@i,w,c
  2908  00259E  242B               	addwf	fputs@s,w,c
  2909  0025A0  6ED9               	movwf	fsr2l,c
  2910  0025A2  5031               	movf	fputs@i+1,w,c
  2911  0025A4  202C               	addwfc	fputs@s+1,w,c
  2912  0025A6  6EDA               	movwf	fsr2h,c
  2913  0025A8  50DF               	movf	indf2,w,c
  2914  0025AA  6E2F               	movwf	fputs@c,c
  2915  0025AC  502F               	movf	fputs@c,w,c
  2916  0025AE  B4D8               	btfsc	status,2,c
  2917  0025B0  0012               	return	
  2918  0025B2  D7E9               	goto	l3774
  2919  0025B4                     __end_of_fputs:
  2920                           	opt callstack 0
  2921                           
  2922 ;; *************** function _fputc *****************
  2923 ;; Defined at:
  2924 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  c               2   33[COMRAM] int 
  2927 ;;  fp              2   35[COMRAM] PTR struct _IO_FILE
  2928 ;;		 -> sprintf@f(6), 
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;		None
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  2   33[COMRAM] int 
  2933 ;; Registers used:
  2934 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2940 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;Total ram usage:        9 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    8
  2947 ;; This function calls:
  2948 ;;		_putch
  2949 ;; This function is called by:
  2950 ;;		_pad
  2951 ;;		_stoa
  2952 ;;		_vfpfcnvrt
  2953 ;;		_fputs
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text9
  2958  001FB8                     __ptext9:
  2959                           	opt callstack 0
  2960  001FB8                     _fputc:
  2961                           	opt callstack 18
  2962                           
  2963                           ;incstack = 0
  2964  001FB8  5024               	movf	fputc@fp,w,c
  2965  001FBA  1025               	iorwf	fputc@fp+1,w,c
  2966  001FBC  B4D8               	btfsc	status,2,c
  2967  001FBE  D004               	goto	u2730
  2968  001FC0  5024               	movf	fputc@fp,w,c
  2969  001FC2  1025               	iorwf	fputc@fp+1,w,c
  2970  001FC4  A4D8               	btfss	status,2,c
  2971  001FC6  D004               	goto	l3754
  2972  001FC8                     u2730:
  2973  001FC8  5022               	movf	fputc@c,w,c
  2974  001FCA  EC9B  F013         	call	_putch
  2975  001FCE  0012               	return	
  2976  001FD0                     l3754:
  2977  001FD0  EE20 F004          	lfsr	2,4
  2978  001FD4  5024               	movf	fputc@fp,w,c
  2979  001FD6  26D9               	addwf	fsr2l,f,c
  2980  001FD8  5025               	movf	fputc@fp+1,w,c
  2981  001FDA  22DA               	addwfc	fsr2h,f,c
  2982  001FDC  50DE               	movf	postinc2,w,c
  2983  001FDE  10DE               	iorwf	postinc2,w,c
  2984  001FE0  B4D8               	btfsc	status,2,c
  2985  001FE2  D016               	goto	u2750
  2986  001FE4  EE20 F004          	lfsr	2,4
  2987  001FE8  5024               	movf	fputc@fp,w,c
  2988  001FEA  26D9               	addwf	fsr2l,f,c
  2989  001FEC  5025               	movf	fputc@fp+1,w,c
  2990  001FEE  22DA               	addwfc	fsr2h,f,c
  2991  001FF0  EE10 F002          	lfsr	1,2
  2992  001FF4  5024               	movf	fputc@fp,w,c
  2993  001FF6  26E1               	addwf	fsr1l,f,c
  2994  001FF8  5025               	movf	fputc@fp+1,w,c
  2995  001FFA  22E2               	addwfc	fsr1h,f,c
  2996  001FFC  50DE               	movf	postinc2,w,c
  2997  001FFE  5CE6               	subwf	postinc1,w,c
  2998  002000  50E6               	movf	postinc1,w,c
  2999  002002  0A80               	xorlw	128
  3000  002004  6E2A               	movwf	(??_fputc+4)& (0+255),c
  3001  002006  50DE               	movf	postinc2,w,c
  3002  002008  0A80               	xorlw	128
  3003  00200A  582A               	subwfb	(??_fputc+4)& (0+255),w,c
  3004  00200C  B0D8               	btfsc	status,0,c
  3005  00200E  0012               	return	
  3006  002010                     u2750:
  3007  002010  EE20 F002          	lfsr	2,2
  3008  002014  5024               	movf	fputc@fp,w,c
  3009  002016  26D9               	addwf	fsr2l,f,c
  3010  002018  5025               	movf	fputc@fp+1,w,c
  3011  00201A  22DA               	addwfc	fsr2h,f,c
  3012  00201C  CFDE F026          	movff	postinc2,??_fputc
  3013  002020  CFDD F027          	movff	postdec2,??_fputc+1
  3014  002024  C024  FFD9         	movff	fputc@fp,fsr2l
  3015  002028  C025  FFDA         	movff	fputc@fp+1,fsr2h
  3016  00202C  CFDE F028          	movff	postinc2,??_fputc+2
  3017  002030  CFDD F029          	movff	postdec2,??_fputc+3
  3018  002034  5026               	movf	??_fputc,w,c
  3019  002036  2428               	addwf	??_fputc+2,w,c
  3020  002038  6ED9               	movwf	fsr2l,c
  3021  00203A  5027               	movf	??_fputc+1,w,c
  3022  00203C  2029               	addwfc	??_fputc+3,w,c
  3023  00203E  6EDA               	movwf	fsr2h,c
  3024  002040  C022  FFDF         	movff	fputc@c,indf2
  3025  002044  EE20 F002          	lfsr	2,2
  3026  002048  5024               	movf	fputc@fp,w,c
  3027  00204A  26D9               	addwf	fsr2l,f,c
  3028  00204C  5025               	movf	fputc@fp+1,w,c
  3029  00204E  22DA               	addwfc	fsr2h,f,c
  3030  002050  2ADE               	incf	postinc2,f,c
  3031  002052  0E00               	movlw	0
  3032  002054  22DD               	addwfc	postdec2,f,c
  3033  002056  0012               	return		;funcret
  3034  002058                     __end_of_fputc:
  3035                           	opt callstack 0
  3036                           
  3037 ;; *************** function _putch *****************
  3038 ;; Defined at:
  3039 ;;		line 100 in file "lcd.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  data            1    wreg     unsigned char 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  data            1   32[COMRAM] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;Total ram usage:        1 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    7
  3060 ;; This function calls:
  3061 ;;		_send_byte
  3062 ;; This function is called by:
  3063 ;;		_fputc
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           	psect	text10
  3068  002736                     __ptext10:
  3069                           	opt callstack 0
  3070  002736                     _putch:
  3071                           	opt callstack 18
  3072                           
  3073                           ;incstack = 0
  3074                           ;putch@data stored from wreg
  3075  002736  6E21               	movwf	putch@data,c
  3076                           
  3077                           ;lcd.c: 101:     LATDbits.LATD2 = 1;
  3078  002738  848C               	bsf	3980,2,c	;volatile
  3079                           
  3080                           ;lcd.c: 102:     send_byte((unsigned char)data);
  3081  00273A  5021               	movf	putch@data,w,c
  3082  00273C  EC8B  F013         	call	_send_byte
  3083  002740  0012               	return		;funcret
  3084  002742                     __end_of_putch:
  3085                           	opt callstack 0
  3086                           
  3087 ;; *************** function _atoi *****************
  3088 ;; Defined at:
  3089 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  s               2   36[COMRAM] PTR const unsigned char 
  3092 ;;		 -> STR_6(6), STR_5(5), STR_4(5), STR_3(5), 
  3093 ;;		 -> STR_2(5), 
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;  n               2   49[COMRAM] int 
  3096 ;;  neg             2   42[COMRAM] int 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  2   36[COMRAM] int 
  3099 ;; Registers used:
  3100 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3106 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;Total ram usage:       15 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    5
  3113 ;; This function calls:
  3114 ;;		___wmul
  3115 ;;		_isdigit
  3116 ;;		_isspace
  3117 ;; This function is called by:
  3118 ;;		_vfpfcnvrt
  3119 ;; This function uses a non-reentrant model
  3120 ;;
  3121                           
  3122                           	psect	text11
  3123  001ADA                     __ptext11:
  3124                           	opt callstack 0
  3125  001ADA                     _atoi:
  3126                           	opt callstack 22
  3127                           
  3128                           ;incstack = 0
  3129  001ADA  0E00               	movlw	0
  3130  001ADC  6E33               	movwf	atoi@n+1,c
  3131  001ADE  0E00               	movlw	0
  3132  001AE0  6E32               	movwf	atoi@n,c
  3133  001AE2  0E00               	movlw	0
  3134  001AE4  6E2C               	movwf	atoi@neg+1,c
  3135  001AE6  0E00               	movlw	0
  3136  001AE8  6E2B               	movwf	atoi@neg,c
  3137  001AEA  D002               	goto	l3884
  3138  001AEC                     l3882:
  3139  001AEC  4A25               	infsnz	atoi@s,f,c
  3140  001AEE  2A26               	incf	atoi@s+1,f,c
  3141  001AF0                     l3884:
  3142  001AF0  0E01               	movlw	1
  3143  001AF2  6E31               	movwf	_atoi$1580,c
  3144  001AF4  C025  FFF6         	movff	atoi@s,tblptrl
  3145  001AF8  C026  FFF7         	movff	atoi@s+1,tblptrh
  3146  001AFC                     	if	0	;tblptru may be non-zero
  3147  001AFC                     	endif
  3148  001AFC                     	if	0	;tblptru may be non-zero
  3149  001AFC                     	endif
  3150  001AFC  0008               	tblrd		*
  3151  001AFE  50F5               	movf	tablat,w,c
  3152  001B00  0A20               	xorlw	32
  3153  001B02  B4D8               	btfsc	status,2,c
  3154  001B04  D018               	goto	l3892
  3155  001B06  0EF7               	movlw	247
  3156  001B08  6E27               	movwf	??_atoi& (0+255),c
  3157  001B0A  0EFF               	movlw	255
  3158  001B0C  6E28               	movwf	(??_atoi+1)& (0+255),c
  3159  001B0E  C025  FFF6         	movff	atoi@s,tblptrl
  3160  001B12  C026  FFF7         	movff	atoi@s+1,tblptrh
  3161  001B16                     	if	0	;tblptru may be non-zero
  3162  001B16                     	endif
  3163  001B16                     	if	0	;tblptru may be non-zero
  3164  001B16                     	endif
  3165  001B16  0008               	tblrd		*
  3166  001B18  50F5               	movf	tablat,w,c
  3167  001B1A  6E29               	movwf	(??_atoi+2)& (0+255),c
  3168  001B1C  6A2A               	clrf	(??_atoi+3)& (0+255),c
  3169  001B1E  5027               	movf	??_atoi,w,c
  3170  001B20  2629               	addwf	??_atoi+2,f,c
  3171  001B22  5028               	movf	??_atoi+1,w,c
  3172  001B24  222A               	addwfc	??_atoi+3,f,c
  3173  001B26  502A               	movf	??_atoi+3,w,c
  3174  001B28  E104               	bnz	u2970
  3175  001B2A  0E05               	movlw	5
  3176  001B2C  5C29               	subwf	??_atoi+2,w,c
  3177  001B2E  A0D8               	btfss	status,0,c
  3178  001B30  D002               	goto	l3892
  3179  001B32                     u2970:
  3180  001B32  0E00               	movlw	0
  3181  001B34  6E31               	movwf	_atoi$1580,c
  3182  001B36                     l3892:
  3183  001B36  C031  F02D         	movff	_atoi$1580,_atoi$1579
  3184  001B3A  6A2E               	clrf	_atoi$1579+1,c
  3185  001B3C  502D               	movf	_atoi$1579,w,c
  3186  001B3E  102E               	iorwf	_atoi$1579+1,w,c
  3187  001B40  B4D8               	btfsc	status,2,c
  3188  001B42  D008               	goto	l3902
  3189  001B44  D7D3               	goto	l3882
  3190  001B46                     l3898:
  3191  001B46  0E00               	movlw	0
  3192  001B48  6E2C               	movwf	atoi@neg+1,c
  3193  001B4A  0E01               	movlw	1
  3194  001B4C  6E2B               	movwf	atoi@neg,c
  3195  001B4E                     l3900:
  3196  001B4E  4A25               	infsnz	atoi@s,f,c
  3197  001B50  2A26               	incf	atoi@s+1,f,c
  3198  001B52  D02E               	goto	l3908
  3199  001B54                     l3902:
  3200  001B54  C025  FFF6         	movff	atoi@s,tblptrl
  3201  001B58  C026  FFF7         	movff	atoi@s+1,tblptrh
  3202  001B5C                     	if	0	;tblptru may be non-zero
  3203  001B5C                     	endif
  3204  001B5C                     	if	0	;tblptru may be non-zero
  3205  001B5C                     	endif
  3206  001B5C  0008               	tblrd		*
  3207  001B5E  50F5               	movf	tablat,w,c
  3208  001B60  6E27               	movwf	??_atoi& (0+255),c
  3209  001B62  6A28               	clrf	(??_atoi+1)& (0+255),c
  3210                           
  3211                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3212                           ; Switch size 1, requested type "simple"
  3213                           ; Number of cases is 1, Range of values is 0 to 0
  3214                           ; switch strategies available:
  3215                           ; Name         Instructions Cycles
  3216                           ; simple_byte            4     3 (average)
  3217                           ;	Chosen strategy is simple_byte
  3218  001B64  5028               	movf	??_atoi+1,w,c
  3219  001B66  0A00               	xorlw	0	; case 0
  3220  001B68  A4D8               	btfss	status,2,c
  3221  001B6A  D022               	goto	l3908
  3222                           
  3223                           ; Switch size 1, requested type "simple"
  3224                           ; Number of cases is 2, Range of values is 43 to 45
  3225                           ; switch strategies available:
  3226                           ; Name         Instructions Cycles
  3227                           ; simple_byte            7     4 (average)
  3228                           ;	Chosen strategy is simple_byte
  3229  001B6C  5027               	movf	??_atoi,w,c
  3230  001B6E  0A2B               	xorlw	43	; case 43
  3231  001B70  B4D8               	btfsc	status,2,c
  3232  001B72  D7ED               	goto	l3900
  3233  001B74  0A06               	xorlw	6	; case 45
  3234  001B76  B4D8               	btfsc	status,2,c
  3235  001B78  D7E6               	goto	l3898
  3236  001B7A  D01A               	goto	l3908
  3237  001B7C                     l3904:
  3238  001B7C  C032  F01E         	movff	atoi@n,___wmul@multiplier
  3239  001B80  C033  F01F         	movff	atoi@n+1,___wmul@multiplier+1
  3240  001B84  0E00               	movlw	0
  3241  001B86  6E21               	movwf	___wmul@multiplicand+1,c
  3242  001B88  0E0A               	movlw	10
  3243  001B8A  6E20               	movwf	___wmul@multiplicand,c
  3244  001B8C  EC33  F013         	call	___wmul	;wreg free
  3245  001B90  C025  FFF6         	movff	atoi@s,tblptrl
  3246  001B94  C026  FFF7         	movff	atoi@s+1,tblptrh
  3247  001B98                     	if	0	;tblptru may be non-zero
  3248  001B98                     	endif
  3249  001B98                     	if	0	;tblptru may be non-zero
  3250  001B98                     	endif
  3251  001B98  0008               	tblrd		*
  3252  001B9A  50F5               	movf	tablat,w,c
  3253  001B9C  5E1E               	subwf	?___wmul,f,c
  3254  001B9E  0E00               	movlw	0
  3255  001BA0  5A1F               	subwfb	?___wmul+1,f,c
  3256  001BA2  0E30               	movlw	48
  3257  001BA4  241E               	addwf	?___wmul,w,c
  3258  001BA6  6E32               	movwf	atoi@n,c
  3259  001BA8  0E00               	movlw	0
  3260  001BAA  201F               	addwfc	?___wmul+1,w,c
  3261  001BAC  6E33               	movwf	atoi@n+1,c
  3262  001BAE  D7CF               	goto	l3900
  3263  001BB0                     l3908:
  3264  001BB0  0ED0               	movlw	208
  3265  001BB2  6E27               	movwf	??_atoi& (0+255),c
  3266  001BB4  0EFF               	movlw	255
  3267  001BB6  6E28               	movwf	(??_atoi+1)& (0+255),c
  3268  001BB8  C025  FFF6         	movff	atoi@s,tblptrl
  3269  001BBC  C026  FFF7         	movff	atoi@s+1,tblptrh
  3270  001BC0                     	if	0	;tblptru may be non-zero
  3271  001BC0                     	endif
  3272  001BC0                     	if	0	;tblptru may be non-zero
  3273  001BC0                     	endif
  3274  001BC0  0008               	tblrd		*
  3275  001BC2  50F5               	movf	tablat,w,c
  3276  001BC4  6E29               	movwf	(??_atoi+2)& (0+255),c
  3277  001BC6  6A2A               	clrf	(??_atoi+3)& (0+255),c
  3278  001BC8  5027               	movf	??_atoi,w,c
  3279  001BCA  2629               	addwf	??_atoi+2,f,c
  3280  001BCC  5028               	movf	??_atoi+1,w,c
  3281  001BCE  222A               	addwfc	??_atoi+3,f,c
  3282  001BD0  502A               	movf	??_atoi+3,w,c
  3283  001BD2  E106               	bnz	u2990
  3284  001BD4  0E0A               	movlw	10
  3285  001BD6  5C29               	subwf	??_atoi+2,w,c
  3286  001BD8  B0D8               	btfsc	status,0,c
  3287  001BDA  D002               	goto	u2990
  3288  001BDC  0E01               	movlw	1
  3289  001BDE  D001               	goto	u3000
  3290  001BE0                     u2990:
  3291  001BE0  0E00               	movlw	0
  3292  001BE2                     u3000:
  3293  001BE2  6E2F               	movwf	_atoi$1581,c
  3294  001BE4  6A30               	clrf	_atoi$1581+1,c
  3295  001BE6  502F               	movf	_atoi$1581,w,c
  3296  001BE8  1030               	iorwf	_atoi$1581+1,w,c
  3297  001BEA  A4D8               	btfss	status,2,c
  3298  001BEC  D7C7               	goto	l3904
  3299  001BEE  502B               	movf	atoi@neg,w,c
  3300  001BF0  102C               	iorwf	atoi@neg+1,w,c
  3301  001BF2  A4D8               	btfss	status,2,c
  3302  001BF4  D00D               	goto	l1220
  3303  001BF6  C032  F027         	movff	atoi@n,??_atoi
  3304  001BFA  C033  F028         	movff	atoi@n+1,??_atoi+1
  3305  001BFE  1E27               	comf	??_atoi,f,c
  3306  001C00  1E28               	comf	??_atoi+1,f,c
  3307  001C02  4A27               	infsnz	??_atoi,f,c
  3308  001C04  2A28               	incf	??_atoi+1,f,c
  3309  001C06  C027  F025         	movff	??_atoi,?_atoi
  3310  001C0A  C028  F026         	movff	??_atoi+1,?_atoi+1
  3311  001C0E  0012               	return	
  3312  001C10                     l1220:
  3313  001C10  C032  F025         	movff	atoi@n,?_atoi
  3314  001C14  C033  F026         	movff	atoi@n+1,?_atoi+1
  3315  001C18  0012               	return		;funcret
  3316  001C1A                     __end_of_atoi:
  3317                           	opt callstack 0
  3318                           
  3319 ;; *************** function _isspace *****************
  3320 ;; Defined at:
  3321 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  c               2   29[COMRAM] int 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;		None
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  2   29[COMRAM] int 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3335 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3337 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3338 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3339 ;;Total ram usage:        7 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    4
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_atoi
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text12
  3350  00253E                     __ptext12:
  3351                           	opt callstack 0
  3352  00253E                     _isspace:
  3353                           	opt callstack 22
  3354                           
  3355                           ;incstack = 0
  3356  00253E  0E01               	movlw	1
  3357  002540  6E24               	movwf	_isspace$1597,c
  3358  002542  0E20               	movlw	32
  3359  002544  181E               	xorwf	isspace@c,w,c
  3360  002546  101F               	iorwf	isspace@c+1,w,c
  3361  002548  B4D8               	btfsc	status,2,c
  3362  00254A  D014               	goto	l3820
  3363  00254C  0EF7               	movlw	247
  3364  00254E  6E20               	movwf	??_isspace& (0+255),c
  3365  002550  0EFF               	movlw	255
  3366  002552  6E21               	movwf	(??_isspace+1)& (0+255),c
  3367  002554  C01E  F022         	movff	isspace@c,??_isspace+2
  3368  002558  C01F  F023         	movff	isspace@c+1,??_isspace+3
  3369  00255C  5020               	movf	??_isspace,w,c
  3370  00255E  2622               	addwf	??_isspace+2,f,c
  3371  002560  5021               	movf	??_isspace+1,w,c
  3372  002562  2223               	addwfc	??_isspace+3,f,c
  3373  002564  5023               	movf	??_isspace+3,w,c
  3374  002566  E104               	bnz	u2850
  3375  002568  0E05               	movlw	5
  3376  00256A  5C22               	subwf	??_isspace+2,w,c
  3377  00256C  A0D8               	btfss	status,0,c
  3378  00256E  D002               	goto	l3820
  3379  002570                     u2850:
  3380  002570  0E00               	movlw	0
  3381  002572  6E24               	movwf	_isspace$1597,c
  3382  002574                     l3820:
  3383  002574  C024  F01E         	movff	_isspace$1597,?_isspace
  3384  002578  6A1F               	clrf	?_isspace+1,c
  3385  00257A  0012               	return		;funcret
  3386  00257C                     __end_of_isspace:
  3387                           	opt callstack 0
  3388                           
  3389 ;; *************** function _isdigit *****************
  3390 ;; Defined at:
  3391 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  c               2   29[COMRAM] int 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  2   29[COMRAM] int 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3405 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;Total ram usage:        6 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    4
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_vfpfcnvrt
  3416 ;;		_atoi
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text13
  3421  0025B4                     __ptext13:
  3422                           	opt callstack 0
  3423  0025B4                     _isdigit:
  3424                           	opt callstack 23
  3425                           
  3426                           ;incstack = 0
  3427  0025B4  0ED0               	movlw	208
  3428  0025B6  6E20               	movwf	??_isdigit& (0+255),c
  3429  0025B8  0EFF               	movlw	255
  3430  0025BA  6E21               	movwf	(??_isdigit+1)& (0+255),c
  3431  0025BC  C01E  F022         	movff	isdigit@c,??_isdigit+2
  3432  0025C0  C01F  F023         	movff	isdigit@c+1,??_isdigit+3
  3433  0025C4  5020               	movf	??_isdigit,w,c
  3434  0025C6  2622               	addwf	??_isdigit+2,f,c
  3435  0025C8  5021               	movf	??_isdigit+1,w,c
  3436  0025CA  2223               	addwfc	??_isdigit+3,f,c
  3437  0025CC  5023               	movf	??_isdigit+3,w,c
  3438  0025CE  E106               	bnz	u2820
  3439  0025D0  0E0A               	movlw	10
  3440  0025D2  5C22               	subwf	??_isdigit+2,w,c
  3441  0025D4  B0D8               	btfsc	status,0,c
  3442  0025D6  D002               	goto	u2820
  3443  0025D8  0E01               	movlw	1
  3444  0025DA  D001               	goto	u2830
  3445  0025DC                     u2820:
  3446  0025DC  0E00               	movlw	0
  3447  0025DE                     u2830:
  3448  0025DE  6E1E               	movwf	?_isdigit,c
  3449  0025E0  6A1F               	clrf	?_isdigit+1,c
  3450  0025E2  0012               	return		;funcret
  3451  0025E4                     __end_of_isdigit:
  3452                           	opt callstack 0
  3453                           
  3454 ;; *************** function ___wmul *****************
  3455 ;; Defined at:
  3456 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3457 ;; Parameters:    Size  Location     Type
  3458 ;;  multiplier      2   29[COMRAM] unsigned int 
  3459 ;;  multiplicand    2   31[COMRAM] unsigned int 
  3460 ;; Auto vars:     Size  Location     Type
  3461 ;;  product         2   33[COMRAM] unsigned int 
  3462 ;; Return value:  Size  Location     Type
  3463 ;;                  2   29[COMRAM] unsigned int 
  3464 ;; Registers used:
  3465 ;;		wreg, status,2, status,0, prodl, prodh
  3466 ;; Tracked objects:
  3467 ;;		On entry : 0/0
  3468 ;;		On exit  : 0/0
  3469 ;;		Unchanged: 0/0
  3470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3471 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;Total ram usage:        6 bytes
  3476 ;; Hardware stack levels used:    1
  3477 ;; Hardware stack levels required when called:    4
  3478 ;; This function calls:
  3479 ;;		Nothing
  3480 ;; This function is called by:
  3481 ;;		_atoi
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           	psect	text14
  3486  002666                     __ptext14:
  3487                           	opt callstack 0
  3488  002666                     ___wmul:
  3489                           	opt callstack 22
  3490                           
  3491                           ;incstack = 0
  3492  002666  501E               	movf	___wmul@multiplier,w,c
  3493  002668  0220               	mulwf	___wmul@multiplicand,c
  3494  00266A  CFF3 F022          	movff	prodl,___wmul@product
  3495  00266E  CFF4 F023          	movff	prodh,___wmul@product+1
  3496  002672  501E               	movf	___wmul@multiplier,w,c
  3497  002674  0221               	mulwf	___wmul@multiplicand+1,c
  3498  002676  50F3               	movf	prodl,w,c
  3499  002678  2623               	addwf	___wmul@product+1,f,c
  3500  00267A  501F               	movf	___wmul@multiplier+1,w,c
  3501  00267C  0220               	mulwf	___wmul@multiplicand,c
  3502  00267E  50F3               	movf	prodl,w,c
  3503  002680  2623               	addwf	___wmul@product+1,f,c
  3504  002682  C022  F01E         	movff	___wmul@product,?___wmul
  3505  002686  C023  F01F         	movff	___wmul@product+1,?___wmul+1
  3506  00268A  0012               	return		;funcret
  3507  00268C                     __end_of___wmul:
  3508                           	opt callstack 0
  3509                           
  3510 ;; *************** function _portSetup *****************
  3511 ;; Defined at:
  3512 ;;		line 389 in file "main.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;		None
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;		None
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      void 
  3519 ;; Registers used:
  3520 ;;		wreg, status,2
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;Total ram usage:        0 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    4
  3533 ;; This function calls:
  3534 ;;		Nothing
  3535 ;; This function is called by:
  3536 ;;		_main
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text15
  3541  0023C2                     __ptext15:
  3542                           	opt callstack 0
  3543  0023C2                     _portSetup:
  3544                           	opt callstack 26
  3545                           
  3546                           ;main.c: 393:     LATA = 0x00;
  3547                           
  3548                           ;incstack = 0
  3549  0023C2  0E00               	movlw	0
  3550  0023C4  6E89               	movwf	3977,c	;volatile
  3551                           
  3552                           ;main.c: 394:     LATB = 0x00;
  3553  0023C6  0E00               	movlw	0
  3554  0023C8  6E8A               	movwf	3978,c	;volatile
  3555                           
  3556                           ;main.c: 395:     LATC = 0x00;
  3557  0023CA  0E00               	movlw	0
  3558  0023CC  6E8B               	movwf	3979,c	;volatile
  3559                           
  3560                           ;main.c: 396:     LATD = 0x00;
  3561  0023CE  0E00               	movlw	0
  3562  0023D0  6E8C               	movwf	3980,c	;volatile
  3563                           
  3564                           ;main.c: 397:     LATE = 0x00;
  3565  0023D2  0E00               	movlw	0
  3566  0023D4  6E8D               	movwf	3981,c	;volatile
  3567                           
  3568                           ;main.c: 401:     TRISA = 0b11000000;
  3569  0023D6  0EC0               	movlw	192
  3570  0023D8  6E92               	movwf	3986,c	;volatile
  3571                           
  3572                           ;main.c: 404:     TRISB = 0b11110111;
  3573  0023DA  0EF7               	movlw	247
  3574  0023DC  6E93               	movwf	3987,c	;volatile
  3575                           
  3576                           ;main.c: 406:     TRISC = 0b10000000;
  3577  0023DE  0E80               	movlw	128
  3578  0023E0  6E94               	movwf	3988,c	;volatile
  3579                           
  3580                           ;main.c: 410:     TRISD = 0b00000011;
  3581  0023E2  0E03               	movlw	3
  3582  0023E4  6E95               	movwf	3989,c	;volatile
  3583                           
  3584                           ;main.c: 416:     ADCON0 = 0x00;
  3585  0023E6  0E00               	movlw	0
  3586  0023E8  6EC2               	movwf	4034,c	;volatile
  3587                           
  3588                           ;main.c: 417:     ADCON1 = 0x0F;
  3589  0023EA  0E0F               	movlw	15
  3590  0023EC  6EC1               	movwf	4033,c	;volatile
  3591                           
  3592                           ;main.c: 418:     ADCON2bits.ADFM = 1;
  3593  0023EE  8EC0               	bsf	4032,7,c	;volatile
  3594                           
  3595                           ;main.c: 420:     CVRCON = 0x00;
  3596  0023F0  0E00               	movlw	0
  3597  0023F2  6EB5               	movwf	4021,c	;volatile
  3598                           
  3599                           ;main.c: 421:     CMCONbits.CIS = 0;
  3600  0023F4  96B4               	bcf	4020,3,c	;volatile
  3601                           
  3602                           ;main.c: 422:     ADCON2 = 0b10110001;
  3603  0023F6  0EB1               	movlw	177
  3604  0023F8  6EC0               	movwf	4032,c	;volatile
  3605                           
  3606                           ;main.c: 426:     INT0IF = 0;
  3607  0023FA  92F2               	bcf	4082,1,c	;volatile
  3608                           
  3609                           ;main.c: 427:     INT0IE = 1;
  3610  0023FC  88F2               	bsf	4082,4,c	;volatile
  3611                           
  3612                           ;main.c: 428:     INT2IF = 0;
  3613  0023FE  92F0               	bcf	4080,1,c	;volatile
  3614                           
  3615                           ;main.c: 429:     INT2IE = 1;
  3616  002400  88F0               	bsf	4080,4,c	;volatile
  3617                           
  3618                           ;main.c: 431:     INTEDG0 = 1;
  3619  002402  8CF1               	bsf	4081,6,c	;volatile
  3620                           
  3621                           ;main.c: 434:     INT1IF = 0;
  3622  002404  90F0               	bcf	4080,0,c	;volatile
  3623                           
  3624                           ;main.c: 435:     INT1IE = 1;
  3625  002406  86F0               	bsf	4080,3,c	;volatile
  3626                           
  3627                           ;main.c: 437:     INTEDG1 = 1;
  3628  002408  8AF1               	bsf	4081,5,c	;volatile
  3629                           
  3630                           ;main.c: 439:     (INTCONbits.GIE = 1);
  3631  00240A  8EF2               	bsf	4082,7,c	;volatile
  3632                           
  3633                           ;main.c: 441:     RCONbits.IPEN = 1;
  3634  00240C  8ED0               	bsf	4048,7,c	;volatile
  3635                           
  3636                           ;main.c: 443:     INTCONbits.PEIE_GIEL = 1;
  3637  00240E  8CF2               	bsf	4082,6,c	;volatile
  3638  002410  0012               	return		;funcret
  3639  002412                     __end_of_portSetup:
  3640                           	opt callstack 0
  3641                           
  3642 ;; *************** function _initLCD *****************
  3643 ;; Defined at:
  3644 ;;		line 67 in file "lcd.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;Total ram usage:        1 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    8
  3665 ;; This function calls:
  3666 ;;		_lcdInst
  3667 ;;		_send_byte
  3668 ;;		_send_nibble
  3669 ;; This function is called by:
  3670 ;;		_main
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           	psect	text16
  3675  002202                     __ptext16:
  3676                           	opt callstack 0
  3677  002202                     _initLCD:
  3678                           	opt callstack 22
  3679                           
  3680                           ;lcd.c: 68:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3681                           
  3682                           ;incstack = 0
  3683  002202  0E31               	movlw	49
  3684  002204  6E22               	movwf	??_initLCD& (0+255),c
  3685  002206  0EB2               	movlw	178
  3686  002208                     u3557:
  3687  002208  2EE8               	decfsz	wreg,f,c
  3688  00220A  D7FE               	bra	u3557
  3689  00220C  2E22               	decfsz	??_initLCD& (0+255),f,c
  3690  00220E  D7FC               	bra	u3557
  3691  002210  D000               	nop2	
  3692                           
  3693                           ;lcd.c: 70:     LATDbits.LATD2 = 0;
  3694  002212  948C               	bcf	3980,2,c	;volatile
  3695                           
  3696                           ;lcd.c: 72:     send_nibble(0b0011);
  3697  002214  0E03               	movlw	3
  3698  002216  EC77  F013         	call	_send_nibble
  3699                           
  3700                           ;lcd.c: 73:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3701  00221A  0E11               	movlw	17
  3702  00221C  6E22               	movwf	??_initLCD& (0+255),c
  3703  00221E  0E3A               	movlw	58
  3704  002220                     u3567:
  3705  002220  2EE8               	decfsz	wreg,f,c
  3706  002222  D7FE               	bra	u3567
  3707  002224  2E22               	decfsz	??_initLCD& (0+255),f,c
  3708  002226  D7FC               	bra	u3567
  3709  002228  D000               	nop2	
  3710                           
  3711                           ;lcd.c: 74:     send_nibble(0b0011);
  3712  00222A  0E03               	movlw	3
  3713  00222C  EC77  F013         	call	_send_nibble
  3714                           
  3715                           ;lcd.c: 75:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  3716  002230  0E7D               	movlw	125
  3717  002232                     u3577:
  3718  002232  2EE8               	decfsz	wreg,f,c
  3719  002234  D7FE               	bra	u3577
  3720                           
  3721                           ;lcd.c: 76:     send_byte(0b00110010);
  3722  002236  0E32               	movlw	50
  3723  002238  EC8B  F013         	call	_send_byte
  3724                           
  3725                           ;lcd.c: 78:     send_byte(0b00101000);
  3726  00223C  0E28               	movlw	40
  3727  00223E  EC8B  F013         	call	_send_byte
  3728                           
  3729                           ;lcd.c: 79:     send_byte(0b00001000);
  3730  002242  0E08               	movlw	8
  3731  002244  EC8B  F013         	call	_send_byte
  3732                           
  3733                           ;lcd.c: 80:     send_byte(0b00000001);
  3734  002248  0E01               	movlw	1
  3735  00224A  EC8B  F013         	call	_send_byte
  3736                           
  3737                           ;lcd.c: 81:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3738  00224E  0E11               	movlw	17
  3739  002250  6E22               	movwf	??_initLCD& (0+255),c
  3740  002252  0E3A               	movlw	58
  3741  002254                     u3587:
  3742  002254  2EE8               	decfsz	wreg,f,c
  3743  002256  D7FE               	bra	u3587
  3744  002258  2E22               	decfsz	??_initLCD& (0+255),f,c
  3745  00225A  D7FC               	bra	u3587
  3746  00225C  D000               	nop2	
  3747                           
  3748                           ;lcd.c: 82:     send_byte(0b00000110);
  3749  00225E  0E06               	movlw	6
  3750  002260  EC8B  F013         	call	_send_byte
  3751                           
  3752                           ;lcd.c: 85:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  3753  002264  0E0F               	movlw	15
  3754  002266  ECA1  F013         	call	_lcdInst
  3755  00226A  0012               	return		;funcret
  3756  00226C                     __end_of_initLCD:
  3757                           	opt callstack 0
  3758                           
  3759 ;; *************** function _UART_send_string *****************
  3760 ;; Defined at:
  3761 ;;		line 65 in file "uart.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  message         2   30[COMRAM] PTR unsigned char 
  3764 ;;		 -> main@uart_char_to_send(25), STR_1(15), 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  i               2   34[COMRAM] int 
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3776 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;Total ram usage:        6 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    5
  3783 ;; This function calls:
  3784 ;;		_UART_send_char
  3785 ;; This function is called by:
  3786 ;;		_main
  3787 ;; This function uses a non-reentrant model
  3788 ;;
  3789                           
  3790                           	psect	text17
  3791  001F0E                     __ptext17:
  3792                           	opt callstack 0
  3793  001F0E                     _UART_send_string:
  3794                           	opt callstack 25
  3795                           
  3796                           ;uart.c: 67:     int i;;uart.c: 68:     i=0;
  3797                           
  3798                           ;incstack = 0
  3799  001F0E  0E00               	movlw	0
  3800  001F10  6E24               	movwf	UART_send_string@i+1,c
  3801  001F12  0E00               	movlw	0
  3802  001F14  6E23               	movwf	UART_send_string@i,c
  3803                           
  3804                           ;uart.c: 69:     while(message[i]!='\0'){
  3805  001F16  D035               	goto	l4250
  3806  001F18                     l4242:
  3807                           
  3808                           ;uart.c: 70:         if(message[i] == '\0'){
  3809  001F18  5023               	movf	UART_send_string@i,w,c
  3810  001F1A  241F               	addwf	UART_send_string@message,w,c
  3811  001F1C  6E21               	movwf	??_UART_send_string& (0+255),c
  3812  001F1E  5024               	movf	UART_send_string@i+1,w,c
  3813  001F20  2020               	addwfc	UART_send_string@message+1,w,c
  3814  001F22  6E22               	movwf	(??_UART_send_string+1)& (0+255),c
  3815  001F24  C021  FFF6         	movff	??_UART_send_string,tblptrl
  3816  001F28  C022  FFF7         	movff	??_UART_send_string+1,tblptrh
  3817  001F2C  0E00               	movlw	low (__smallconst shr (0+16))
  3818  001F2E  6EF8               	movwf	tblptru,c
  3819  001F30  0E0F               	movlw	(high __ramtop+-1)
  3820  001F32  64F7               	cpfsgt	tblptrh,c
  3821  001F34  D003               	bra	u3377
  3822  001F36  0008               	tblrd		*
  3823  001F38  50F5               	movf	tablat,w,c
  3824  001F3A  D005               	bra	u3370
  3825  001F3C                     u3377:
  3826  001F3C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3827  001F40  CFF7 FFEA          	movff	tblptrh,fsr0h
  3828  001F44  50EF               	movf	indf0,w,c
  3829  001F46                     u3370:
  3830  001F46  0900               	iorlw	0
  3831  001F48  B4D8               	btfsc	status,2,c
  3832  001F4A  0012               	return	
  3833                           
  3834                           ;uart.c: 75:         UART_send_char(message[i]);
  3835  001F4C  5023               	movf	UART_send_string@i,w,c
  3836  001F4E  241F               	addwf	UART_send_string@message,w,c
  3837  001F50  6E21               	movwf	??_UART_send_string& (0+255),c
  3838  001F52  5024               	movf	UART_send_string@i+1,w,c
  3839  001F54  2020               	addwfc	UART_send_string@message+1,w,c
  3840  001F56  6E22               	movwf	(??_UART_send_string+1)& (0+255),c
  3841  001F58  C021  FFF6         	movff	??_UART_send_string,tblptrl
  3842  001F5C  C022  FFF7         	movff	??_UART_send_string+1,tblptrh
  3843  001F60  0E00               	movlw	low (__smallconst shr (0+16))
  3844  001F62  6EF8               	movwf	tblptru,c
  3845  001F64  0E0F               	movlw	(high __ramtop+-1)
  3846  001F66  64F7               	cpfsgt	tblptrh,c
  3847  001F68  D003               	bra	u3397
  3848  001F6A  0008               	tblrd		*
  3849  001F6C  50F5               	movf	tablat,w,c
  3850  001F6E  D005               	bra	u3390
  3851  001F70                     u3397:
  3852  001F70  CFF6 FFE9          	movff	tblptrl,fsr0l
  3853  001F74  CFF7 FFEA          	movff	tblptrh,fsr0h
  3854  001F78  50EF               	movf	indf0,w,c
  3855  001F7A                     u3390:
  3856  001F7A  EC69  F013         	call	_UART_send_char
  3857                           
  3858                           ;uart.c: 76:         i++;
  3859  001F7E  4A23               	infsnz	UART_send_string@i,f,c
  3860  001F80  2A24               	incf	UART_send_string@i+1,f,c
  3861  001F82                     l4250:
  3862                           
  3863                           ;uart.c: 69:     while(message[i]!='\0'){
  3864  001F82  5023               	movf	UART_send_string@i,w,c
  3865  001F84  241F               	addwf	UART_send_string@message,w,c
  3866  001F86  6E21               	movwf	??_UART_send_string& (0+255),c
  3867  001F88  5024               	movf	UART_send_string@i+1,w,c
  3868  001F8A  2020               	addwfc	UART_send_string@message+1,w,c
  3869  001F8C  6E22               	movwf	(??_UART_send_string+1)& (0+255),c
  3870  001F8E  C021  FFF6         	movff	??_UART_send_string,tblptrl
  3871  001F92  C022  FFF7         	movff	??_UART_send_string+1,tblptrh
  3872  001F96  0E00               	movlw	low (__smallconst shr (0+16))
  3873  001F98  6EF8               	movwf	tblptru,c
  3874  001F9A  0E0F               	movlw	(high __ramtop+-1)
  3875  001F9C  64F7               	cpfsgt	tblptrh,c
  3876  001F9E  D003               	bra	u3407
  3877  001FA0  0008               	tblrd		*
  3878  001FA2  50F5               	movf	tablat,w,c
  3879  001FA4  D005               	bra	u3400
  3880  001FA6                     u3407:
  3881  001FA6  CFF6 FFE9          	movff	tblptrl,fsr0l
  3882  001FAA  CFF7 FFEA          	movff	tblptrh,fsr0h
  3883  001FAE  50EF               	movf	indf0,w,c
  3884  001FB0                     u3400:
  3885  001FB0  0900               	iorlw	0
  3886  001FB2  B4D8               	btfsc	status,2,c
  3887  001FB4  0012               	return	
  3888  001FB6  D7B0               	goto	l4242
  3889  001FB8                     __end_of_UART_send_string:
  3890                           	opt callstack 0
  3891                           
  3892 ;; *************** function _UART_send_char *****************
  3893 ;; Defined at:
  3894 ;;		line 58 in file "uart.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;  c               1    wreg     const unsigned char 
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  c               1   29[COMRAM] const unsigned char 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      void 
  3901 ;; Registers used:
  3902 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;Total ram usage:        1 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    4
  3915 ;; This function calls:
  3916 ;;		Nothing
  3917 ;; This function is called by:
  3918 ;;		_UART_send_string
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921                           
  3922                           	psect	text18
  3923  0026D2                     __ptext18:
  3924                           	opt callstack 0
  3925  0026D2                     _UART_send_char:
  3926                           	opt callstack 25
  3927                           
  3928                           ;incstack = 0
  3929                           ;UART_send_char@c stored from wreg
  3930  0026D2  6E1E               	movwf	UART_send_char@c,c
  3931                           
  3932                           ;uart.c: 59:     _tx_buffer[_tx_buffer_head] = c;
  3933  0026D4  0E00               	movlw	low __tx_buffer
  3934  0026D6  2457               	addwf	__tx_buffer_head,w,c	;volatile
  3935  0026D8  6ED9               	movwf	fsr2l,c
  3936  0026DA  6ADA               	clrf	fsr2h,c
  3937  0026DC  0E01               	movlw	high __tx_buffer
  3938  0026DE  22DA               	addwfc	fsr2h,f,c
  3939  0026E0  C01E  FFDF         	movff	UART_send_char@c,indf2
  3940                           
  3941                           ;uart.c: 60:     _tx_buffer_head = (unsigned char) (_tx_buffer_head + 1) % 64;
  3942  0026E4  2857               	incf	__tx_buffer_head,w,c	;volatile
  3943  0026E6  0B3F               	andlw	63
  3944  0026E8  6E57               	movwf	__tx_buffer_head,c	;volatile
  3945                           
  3946                           ;uart.c: 61:     TXIE = 1;
  3947  0026EA  889D               	bsf	3997,4,c	;volatile
  3948  0026EC  0012               	return		;funcret
  3949  0026EE                     __end_of_UART_send_char:
  3950                           	opt callstack 0
  3951                           
  3952 ;; *************** function _UART_read *****************
  3953 ;; Defined at:
  3954 ;;		line 89 in file "uart.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  c               1   29[COMRAM] unsigned char 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      unsigned char 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;Total ram usage:        1 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    4
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_main
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text19
  3983  00268C                     __ptext19:
  3984                           	opt callstack 0
  3985  00268C                     _UART_read:
  3986                           	opt callstack 26
  3987                           
  3988                           ;uart.c: 90:     if(_rx_buffer_head == _rx_buffer_tail){
  3989                           
  3990                           ;incstack = 0
  3991  00268C  5058               	movf	__rx_buffer_tail,w,c	;volatile
  3992  00268E  1859               	xorwf	__rx_buffer_head,w,c	;volatile
  3993  002690  A4D8               	btfss	status,2,c
  3994  002692  D002               	goto	l4264
  3995                           
  3996                           ;uart.c: 91:         return -1;
  3997  002694  0EFF               	movlw	255
  3998  002696  0012               	return	
  3999  002698                     l4264:
  4000                           
  4001                           ;uart.c: 93:         unsigned char c = _rx_buffer[_rx_buffer_tail];
  4002  002698  0E40               	movlw	low __rx_buffer
  4003  00269A  2458               	addwf	__rx_buffer_tail,w,c	;volatile
  4004  00269C  6ED9               	movwf	fsr2l,c
  4005  00269E  6ADA               	clrf	fsr2h,c
  4006  0026A0  0E01               	movlw	high __rx_buffer
  4007  0026A2  22DA               	addwfc	fsr2h,f,c
  4008  0026A4  50DF               	movf	indf2,w,c
  4009  0026A6  6E1E               	movwf	UART_read@c,c
  4010                           
  4011                           ;uart.c: 94:         _rx_buffer_tail = (unsigned char)(_rx_buffer_tail + 1) % 64;
  4012  0026A8  2858               	incf	__rx_buffer_tail,w,c	;volatile
  4013  0026AA  0B3F               	andlw	63
  4014  0026AC  6E58               	movwf	__rx_buffer_tail,c	;volatile
  4015                           
  4016                           ;uart.c: 95:         return c;
  4017  0026AE  501E               	movf	UART_read@c,w,c
  4018  0026B0  0012               	return		;funcret
  4019  0026B2                     __end_of_UART_read:
  4020                           	opt callstack 0
  4021                           
  4022 ;; *************** function _UART_available *****************
  4023 ;; Defined at:
  4024 ;;		line 85 in file "uart.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;		None
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;		None
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  2   29[COMRAM] int 
  4031 ;; Registers used:
  4032 ;;		wreg, status,2, status,0
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4038 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4041 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;Total ram usage:        4 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:    4
  4045 ;; This function calls:
  4046 ;;		Nothing
  4047 ;; This function is called by:
  4048 ;;		_main
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           	psect	text20
  4053  0026B2                     __ptext20:
  4054                           	opt callstack 0
  4055  0026B2                     _UART_available:
  4056                           	opt callstack 26
  4057                           
  4058                           ;uart.c: 86:     return ((unsigned int)(64 + _rx_buffer_head - _rx_buffer_tail)) % 64;
  4059                           
  4060                           ;incstack = 0
  4061  0026B2  5058               	movf	__rx_buffer_tail,w,c	;volatile
  4062  0026B4  C059  F020         	movff	__rx_buffer_head,??_UART_available	;volatile
  4063  0026B8  6A21               	clrf	(??_UART_available+1)& (0+255),c
  4064  0026BA  5E20               	subwf	??_UART_available,f,c
  4065  0026BC  0E00               	movlw	0
  4066  0026BE  5A21               	subwfb	??_UART_available+1,f,c
  4067  0026C0  0E40               	movlw	64
  4068  0026C2  2620               	addwf	??_UART_available,f,c
  4069  0026C4  0E00               	movlw	0
  4070  0026C6  2221               	addwfc	??_UART_available+1,f,c
  4071  0026C8  0E3F               	movlw	63
  4072  0026CA  1420               	andwf	??_UART_available,w,c
  4073  0026CC  6E1E               	movwf	?_UART_available,c
  4074  0026CE  6A1F               	clrf	?_UART_available+1,c
  4075  0026D0  0012               	return		;funcret
  4076  0026D2                     __end_of_UART_available:
  4077                           	opt callstack 0
  4078                           
  4079 ;; *************** function _UART_Init *****************
  4080 ;; Defined at:
  4081 ;;		line 15 in file "uart.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;		None
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;  baudRate        4   47[COMRAM] long 
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      void 
  4088 ;; Registers used:
  4089 ;;		wreg, status,2, status,0, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4099 ;;Total ram usage:        8 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    5
  4102 ;; This function calls:
  4103 ;;		___aldiv
  4104 ;; This function is called by:
  4105 ;;		_main
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text21
  4110  0020EE                     __ptext21:
  4111                           	opt callstack 0
  4112  0020EE                     _UART_Init:
  4113                           	opt callstack 25
  4114                           
  4115                           ;uart.c: 16:     _rx_buffer_head = 0;
  4116                           
  4117                           ;incstack = 0
  4118  0020EE  0E00               	movlw	0
  4119  0020F0  6E59               	movwf	__rx_buffer_head,c	;volatile
  4120                           
  4121                           ;uart.c: 17:     _rx_buffer_tail = 0;
  4122  0020F2  0E00               	movlw	0
  4123  0020F4  6E58               	movwf	__rx_buffer_tail,c	;volatile
  4124                           
  4125                           ;uart.c: 18:     _tx_buffer_head = 0;
  4126  0020F6  0E00               	movlw	0
  4127  0020F8  6E57               	movwf	__tx_buffer_head,c	;volatile
  4128                           
  4129                           ;uart.c: 19:     _tx_buffer_tail = 0;
  4130  0020FA  0E00               	movlw	0
  4131  0020FC  6E56               	movwf	__tx_buffer_tail,c	;volatile
  4132                           
  4133                           ;uart.c: 20:     long baudRate = 19200;
  4134  0020FE  0E00               	movlw	0
  4135  002100  6E30               	movwf	UART_Init@baudRate,c
  4136  002102  0E4B               	movlw	75
  4137  002104  6E31               	movwf	UART_Init@baudRate+1,c
  4138  002106  0E00               	movlw	0
  4139  002108  6E32               	movwf	UART_Init@baudRate+2,c
  4140  00210A  0E00               	movlw	0
  4141  00210C  6E33               	movwf	UART_Init@baudRate+3,c
  4142                           
  4143                           ;uart.c: 28:     SPBRG = (unsigned char)((10000000 / (64 * baudRate)) - 1);
  4144  00210E  0E80               	movlw	128
  4145  002110  6E1E               	movwf	___aldiv@dividend,c
  4146  002112  0E96               	movlw	150
  4147  002114  6E1F               	movwf	___aldiv@dividend+1,c
  4148  002116  0E98               	movlw	152
  4149  002118  6E20               	movwf	___aldiv@dividend+2,c
  4150  00211A  0E00               	movlw	0
  4151  00211C  6E21               	movwf	___aldiv@dividend+3,c
  4152  00211E  C030  F02C         	movff	UART_Init@baudRate,??_UART_Init
  4153  002122  C031  F02D         	movff	UART_Init@baudRate+1,??_UART_Init+1
  4154  002126  C032  F02E         	movff	UART_Init@baudRate+2,??_UART_Init+2
  4155  00212A  C033  F02F         	movff	UART_Init@baudRate+3,??_UART_Init+3
  4156  00212E  0E06               	movlw	6
  4157  002130                     u3365:
  4158  002130  90D8               	bcf	status,0,c
  4159  002132  362C               	rlcf	??_UART_Init,f,c
  4160  002134  362D               	rlcf	??_UART_Init+1,f,c
  4161  002136  362E               	rlcf	??_UART_Init+2,f,c
  4162  002138  362F               	rlcf	??_UART_Init+3,f,c
  4163  00213A  2EE8               	decfsz	wreg,f,c
  4164  00213C  D7F9               	goto	u3365
  4165  00213E  C02C  F022         	movff	??_UART_Init,___aldiv@divisor
  4166  002142  C02D  F023         	movff	??_UART_Init+1,___aldiv@divisor+1
  4167  002146  C02E  F024         	movff	??_UART_Init+2,___aldiv@divisor+2
  4168  00214A  C02F  F025         	movff	??_UART_Init+3,___aldiv@divisor+3
  4169  00214E  EC21  F00F         	call	___aldiv	;wreg free
  4170  002152  041E               	decf	?___aldiv,w,c
  4171  002154  6EAF               	movwf	4015,c	;volatile
  4172                           
  4173                           ;uart.c: 31:     TRISCbits.TRISC6 = 0;
  4174  002156  9C94               	bcf	3988,6,c	;volatile
  4175                           
  4176                           ;uart.c: 32:     TRISCbits.TRISC7 = 1;
  4177  002158  8E94               	bsf	3988,7,c	;volatile
  4178                           
  4179                           ;uart.c: 35:     TXSTAbits.TX9 = 0;
  4180  00215A  9CAC               	bcf	4012,6,c	;volatile
  4181                           
  4182                           ;uart.c: 36:     TXSTAbits.SYNC = 0;
  4183  00215C  98AC               	bcf	4012,4,c	;volatile
  4184                           
  4185                           ;uart.c: 38:     TXSTAbits.TXEN = 1;
  4186  00215E  8AAC               	bsf	4012,5,c	;volatile
  4187                           
  4188                           ;uart.c: 39:     _delay((unsigned long)((5)*(10000000/4000.0)));
  4189  002160  0E11               	movlw	17
  4190  002162  6E2C               	movwf	??_UART_Init& (0+255),c
  4191  002164  0E3A               	movlw	58
  4192  002166                     u3597:
  4193  002166  2EE8               	decfsz	wreg,f,c
  4194  002168  D7FE               	bra	u3597
  4195  00216A  2E2C               	decfsz	??_UART_Init& (0+255),f,c
  4196  00216C  D7FC               	bra	u3597
  4197  00216E  D000               	nop2	
  4198                           
  4199                           ;uart.c: 41:     RCSTAbits.SPEN = 1;
  4200  002170  8EAB               	bsf	4011,7,c	;volatile
  4201                           
  4202                           ;uart.c: 42:     RCSTAbits.RX9 = 0;
  4203  002172  9CAB               	bcf	4011,6,c	;volatile
  4204                           
  4205                           ;uart.c: 43:     RCSTAbits.CREN = 1;
  4206  002174  88AB               	bsf	4011,4,c	;volatile
  4207                           
  4208                           ;uart.c: 45:     PIE1bits.RCIE = 1;
  4209  002176  8A9D               	bsf	3997,5,c	;volatile
  4210                           
  4211                           ;uart.c: 46:     PIE1bits.TXIE = 1;
  4212  002178  889D               	bsf	3997,4,c	;volatile
  4213                           
  4214                           ;uart.c: 48:     IPR1bits.TXIP = 0;
  4215  00217A  989F               	bcf	3999,4,c	;volatile
  4216                           
  4217                           ;uart.c: 49:     IPR1bits.RCIP = 0;
  4218  00217C  9A9F               	bcf	3999,5,c	;volatile
  4219  00217E  0012               	return		;funcret
  4220  002180                     __end_of_UART_Init:
  4221                           	opt callstack 0
  4222                           
  4223 ;; *************** function ___aldiv *****************
  4224 ;; Defined at:
  4225 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aldiv.c"
  4226 ;; Parameters:    Size  Location     Type
  4227 ;;  dividend        4   29[COMRAM] long 
  4228 ;;  divisor         4   33[COMRAM] long 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  quotient        4   39[COMRAM] long 
  4231 ;;  sign            1   38[COMRAM] unsigned char 
  4232 ;;  counter         1   37[COMRAM] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  4   29[COMRAM] long 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4242 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;Total ram usage:       14 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    4
  4249 ;; This function calls:
  4250 ;;		Nothing
  4251 ;; This function is called by:
  4252 ;;		_UART_Init
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text22
  4257  001E42                     __ptext22:
  4258                           	opt callstack 0
  4259  001E42                     ___aldiv:
  4260                           	opt callstack 25
  4261                           
  4262                           ;incstack = 0
  4263  001E42  0E00               	movlw	0
  4264  001E44  6E27               	movwf	___aldiv@sign,c
  4265  001E46  AE25               	btfss	___aldiv@divisor+3,7,c
  4266  001E48  D00A               	goto	l4080
  4267  001E4A  1E25               	comf	___aldiv@divisor+3,f,c
  4268  001E4C  1E24               	comf	___aldiv@divisor+2,f,c
  4269  001E4E  1E23               	comf	___aldiv@divisor+1,f,c
  4270  001E50  6C22               	negf	___aldiv@divisor,c
  4271  001E52  0E00               	movlw	0
  4272  001E54  2223               	addwfc	___aldiv@divisor+1,f,c
  4273  001E56  2224               	addwfc	___aldiv@divisor+2,f,c
  4274  001E58  2225               	addwfc	___aldiv@divisor+3,f,c
  4275  001E5A  0E01               	movlw	1
  4276  001E5C  6E27               	movwf	___aldiv@sign,c
  4277  001E5E                     l4080:
  4278  001E5E  AE21               	btfss	___aldiv@dividend+3,7,c
  4279  001E60  D00A               	goto	l4086
  4280  001E62  1E21               	comf	___aldiv@dividend+3,f,c
  4281  001E64  1E20               	comf	___aldiv@dividend+2,f,c
  4282  001E66  1E1F               	comf	___aldiv@dividend+1,f,c
  4283  001E68  6C1E               	negf	___aldiv@dividend,c
  4284  001E6A  0E00               	movlw	0
  4285  001E6C  221F               	addwfc	___aldiv@dividend+1,f,c
  4286  001E6E  2220               	addwfc	___aldiv@dividend+2,f,c
  4287  001E70  2221               	addwfc	___aldiv@dividend+3,f,c
  4288  001E72  0E01               	movlw	1
  4289  001E74  1A27               	xorwf	___aldiv@sign,f,c
  4290  001E76                     l4086:
  4291  001E76  0E00               	movlw	0
  4292  001E78  6E28               	movwf	___aldiv@quotient,c
  4293  001E7A  0E00               	movlw	0
  4294  001E7C  6E29               	movwf	___aldiv@quotient+1,c
  4295  001E7E  0E00               	movlw	0
  4296  001E80  6E2A               	movwf	___aldiv@quotient+2,c
  4297  001E82  0E00               	movlw	0
  4298  001E84  6E2B               	movwf	___aldiv@quotient+3,c
  4299  001E86  5022               	movf	___aldiv@divisor,w,c
  4300  001E88  1023               	iorwf	___aldiv@divisor+1,w,c
  4301  001E8A  1024               	iorwf	___aldiv@divisor+2,w,c
  4302  001E8C  1025               	iorwf	___aldiv@divisor+3,w,c
  4303  001E8E  B4D8               	btfsc	status,2,c
  4304  001E90  D02A               	goto	l4108
  4305  001E92  0E01               	movlw	1
  4306  001E94  6E26               	movwf	___aldiv@counter,c
  4307  001E96  D006               	goto	l4094
  4308  001E98                     l4092:
  4309  001E98  90D8               	bcf	status,0,c
  4310  001E9A  3622               	rlcf	___aldiv@divisor,f,c
  4311  001E9C  3623               	rlcf	___aldiv@divisor+1,f,c
  4312  001E9E  3624               	rlcf	___aldiv@divisor+2,f,c
  4313  001EA0  3625               	rlcf	___aldiv@divisor+3,f,c
  4314  001EA2  2A26               	incf	___aldiv@counter,f,c
  4315  001EA4                     l4094:
  4316  001EA4  AE25               	btfss	___aldiv@divisor+3,7,c
  4317  001EA6  D7F8               	goto	l4092
  4318  001EA8                     u3260:
  4319  001EA8  90D8               	bcf	status,0,c
  4320  001EAA  3628               	rlcf	___aldiv@quotient,f,c
  4321  001EAC  3629               	rlcf	___aldiv@quotient+1,f,c
  4322  001EAE  362A               	rlcf	___aldiv@quotient+2,f,c
  4323  001EB0  362B               	rlcf	___aldiv@quotient+3,f,c
  4324  001EB2  5022               	movf	___aldiv@divisor,w,c
  4325  001EB4  5C1E               	subwf	___aldiv@dividend,w,c
  4326  001EB6  5023               	movf	___aldiv@divisor+1,w,c
  4327  001EB8  581F               	subwfb	___aldiv@dividend+1,w,c
  4328  001EBA  5024               	movf	___aldiv@divisor+2,w,c
  4329  001EBC  5820               	subwfb	___aldiv@dividend+2,w,c
  4330  001EBE  5025               	movf	___aldiv@divisor+3,w,c
  4331  001EC0  5821               	subwfb	___aldiv@dividend+3,w,c
  4332  001EC2  A0D8               	btfss	status,0,c
  4333  001EC4  D009               	goto	l4104
  4334  001EC6  5022               	movf	___aldiv@divisor,w,c
  4335  001EC8  5E1E               	subwf	___aldiv@dividend,f,c
  4336  001ECA  5023               	movf	___aldiv@divisor+1,w,c
  4337  001ECC  5A1F               	subwfb	___aldiv@dividend+1,f,c
  4338  001ECE  5024               	movf	___aldiv@divisor+2,w,c
  4339  001ED0  5A20               	subwfb	___aldiv@dividend+2,f,c
  4340  001ED2  5025               	movf	___aldiv@divisor+3,w,c
  4341  001ED4  5A21               	subwfb	___aldiv@dividend+3,f,c
  4342  001ED6  8028               	bsf	___aldiv@quotient,0,c
  4343  001ED8                     l4104:
  4344  001ED8  90D8               	bcf	status,0,c
  4345  001EDA  3225               	rrcf	___aldiv@divisor+3,f,c
  4346  001EDC  3224               	rrcf	___aldiv@divisor+2,f,c
  4347  001EDE  3223               	rrcf	___aldiv@divisor+1,f,c
  4348  001EE0  3222               	rrcf	___aldiv@divisor,f,c
  4349  001EE2  2E26               	decfsz	___aldiv@counter,f,c
  4350  001EE4  D7E1               	goto	u3260
  4351  001EE6                     l4108:
  4352  001EE6  5027               	movf	___aldiv@sign,w,c
  4353  001EE8  B4D8               	btfsc	status,2,c
  4354  001EEA  D008               	goto	l4112
  4355  001EEC  1E2B               	comf	___aldiv@quotient+3,f,c
  4356  001EEE  1E2A               	comf	___aldiv@quotient+2,f,c
  4357  001EF0  1E29               	comf	___aldiv@quotient+1,f,c
  4358  001EF2  6C28               	negf	___aldiv@quotient,c
  4359  001EF4  0E00               	movlw	0
  4360  001EF6  2229               	addwfc	___aldiv@quotient+1,f,c
  4361  001EF8  222A               	addwfc	___aldiv@quotient+2,f,c
  4362  001EFA  222B               	addwfc	___aldiv@quotient+3,f,c
  4363  001EFC                     l4112:
  4364  001EFC  C028  F01E         	movff	___aldiv@quotient,?___aldiv
  4365  001F00  C029  F01F         	movff	___aldiv@quotient+1,?___aldiv+1
  4366  001F04  C02A  F020         	movff	___aldiv@quotient+2,?___aldiv+2
  4367  001F08  C02B  F021         	movff	___aldiv@quotient+3,?___aldiv+3
  4368  001F0C  0012               	return		;funcret
  4369  001F0E                     __end_of___aldiv:
  4370                           	opt callstack 0
  4371                           
  4372 ;; *************** function _RTC_Init *****************
  4373 ;; Defined at:
  4374 ;;		line 31 in file "rtc.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;		None
  4379 ;; Return value:  Size  Location     Type
  4380 ;;                  1    wreg      void 
  4381 ;; Registers used:
  4382 ;;		wreg, status,2, status,0, cstack
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;Total ram usage:        0 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    6
  4395 ;; This function calls:
  4396 ;;		_I2C_Master_Start
  4397 ;;		_I2C_Master_Stop
  4398 ;;		_I2C_Master_Write
  4399 ;; This function is called by:
  4400 ;;		_main
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text23
  4405  0025E4                     __ptext23:
  4406                           	opt callstack 0
  4407  0025E4                     _RTC_Init:
  4408                           	opt callstack 24
  4409                           
  4410                           ;rtc.c: 33:     I2C_Master_Start();
  4411                           
  4412                           ;incstack = 0
  4413  0025E4  ECBE  F013         	call	_I2C_Master_Start	;wreg free
  4414                           
  4415                           ;rtc.c: 35:     I2C_Master_Write(0xD0u);
  4416  0025E8  0E00               	movlw	0
  4417  0025EA  6E20               	movwf	I2C_Master_Write@byteToWrite+1,c
  4418  0025EC  0ED0               	movlw	208
  4419  0025EE  6E1F               	movwf	I2C_Master_Write@byteToWrite,c
  4420  0025F0  ECA7  F013         	call	_I2C_Master_Write	;wreg free
  4421                           
  4422                           ;rtc.c: 36:     I2C_Master_Write(0x07u);
  4423  0025F4  0E00               	movlw	0
  4424  0025F6  6E20               	movwf	I2C_Master_Write@byteToWrite+1,c
  4425  0025F8  0E07               	movlw	7
  4426  0025FA  6E1F               	movwf	I2C_Master_Write@byteToWrite,c
  4427  0025FC  ECA7  F013         	call	_I2C_Master_Write	;wreg free
  4428                           
  4429                           ;rtc.c: 38:     I2C_Master_Write(0x00);
  4430  002600  0E00               	movlw	0
  4431  002602  6E20               	movwf	I2C_Master_Write@byteToWrite+1,c
  4432  002604  0E00               	movlw	0
  4433  002606  6E1F               	movwf	I2C_Master_Write@byteToWrite,c
  4434  002608  ECA7  F013         	call	_I2C_Master_Write	;wreg free
  4435                           
  4436                           ;rtc.c: 40:     I2C_Master_Stop();
  4437  00260C  ECBA  F013         	call	_I2C_Master_Stop	;wreg free
  4438  002610  0012               	return		;funcret
  4439  002612                     __end_of_RTC_Init:
  4440                           	opt callstack 0
  4441                           
  4442 ;; *************** function _I2C_Master_Write *****************
  4443 ;; Defined at:
  4444 ;;		line 66 in file "I2C.c"
  4445 ;; Parameters:    Size  Location     Type
  4446 ;;  byteToWrite     2   30[COMRAM] unsigned int 
  4447 ;; Auto vars:     Size  Location     Type
  4448 ;;		None
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  1    wreg      void 
  4451 ;; Registers used:
  4452 ;;		wreg, status,2, status,0, cstack
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4458 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;Total ram usage:        2 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:    5
  4465 ;; This function calls:
  4466 ;;		_I2C_Master_Wait
  4467 ;; This function is called by:
  4468 ;;		_RTC_Init
  4469 ;;		_RTC_SetDateTime
  4470 ;;		_RTC_GetDateTime
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text24
  4475  00274E                     __ptext24:
  4476                           	opt callstack 0
  4477  00274E                     _I2C_Master_Write:
  4478                           	opt callstack 24
  4479                           
  4480                           ;I2C.c: 67:     I2C_Master_Wait();
  4481                           
  4482                           ;incstack = 0
  4483  00274E  EC82  F013         	call	_I2C_Master_Wait	;wreg free
  4484                           
  4485                           ;I2C.c: 70:     SSPBUF = byteToWrite;
  4486  002752  C01F  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  4487  002756  0012               	return		;funcret
  4488  002758                     __end_of_I2C_Master_Write:
  4489                           	opt callstack 0
  4490                           
  4491 ;; *************** function _I2C_Master_Stop *****************
  4492 ;; Defined at:
  4493 ;;		line 61 in file "I2C.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;		None
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;		None
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;Total ram usage:        0 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    5
  4514 ;; This function calls:
  4515 ;;		_I2C_Master_Wait
  4516 ;; This function is called by:
  4517 ;;		_RTC_Init
  4518 ;;		_RTC_SetDateTime
  4519 ;;		_RTC_GetDateTime
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           	psect	text25
  4524  002774                     __ptext25:
  4525                           	opt callstack 0
  4526  002774                     _I2C_Master_Stop:
  4527                           	opt callstack 24
  4528                           
  4529                           ;I2C.c: 62:     I2C_Master_Wait();
  4530                           
  4531                           ;incstack = 0
  4532  002774  EC82  F013         	call	_I2C_Master_Wait	;wreg free
  4533                           
  4534                           ;I2C.c: 63:     SSPCON2bits.PEN = 1;
  4535  002778  84C5               	bsf	4037,2,c	;volatile
  4536  00277A  0012               	return		;funcret
  4537  00277C                     __end_of_I2C_Master_Stop:
  4538                           	opt callstack 0
  4539                           
  4540 ;; *************** function _I2C_Master_Start *****************
  4541 ;; Defined at:
  4542 ;;		line 51 in file "I2C.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;		None
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;		None
  4547 ;; Return value:  Size  Location     Type
  4548 ;;                  1    wreg      void 
  4549 ;; Registers used:
  4550 ;;		wreg, status,2, status,0, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4560 ;;Total ram usage:        0 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    5
  4563 ;; This function calls:
  4564 ;;		_I2C_Master_Wait
  4565 ;; This function is called by:
  4566 ;;		_RTC_Init
  4567 ;;		_RTC_SetDateTime
  4568 ;;		_RTC_GetDateTime
  4569 ;; This function uses a non-reentrant model
  4570 ;;
  4571                           
  4572                           	psect	text26
  4573  00277C                     __ptext26:
  4574                           	opt callstack 0
  4575  00277C                     _I2C_Master_Start:
  4576                           	opt callstack 24
  4577                           
  4578                           ;I2C.c: 52:     I2C_Master_Wait();
  4579                           
  4580                           ;incstack = 0
  4581  00277C  EC82  F013         	call	_I2C_Master_Wait	;wreg free
  4582                           
  4583                           ;I2C.c: 53:     SSPCON2bits.SEN = 1;
  4584  002780  80C5               	bsf	4037,0,c	;volatile
  4585  002782  0012               	return		;funcret
  4586  002784                     __end_of_I2C_Master_Start:
  4587                           	opt callstack 0
  4588                           
  4589 ;; *************** function _I2C_Master_Wait *****************
  4590 ;; Defined at:
  4591 ;;		line 17 in file "I2C.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;		None
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;		None
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  1    wreg      void 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4607 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4608 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4609 ;;Total ram usage:        1 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    4
  4612 ;; This function calls:
  4613 ;;		Nothing
  4614 ;; This function is called by:
  4615 ;;		_I2C_Master_Start
  4616 ;;		_I2C_Master_Stop
  4617 ;;		_I2C_Master_Write
  4618 ;;		_I2C_Master_RepeatedStart
  4619 ;;		_I2C_Master_Read
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text27
  4624  002704                     __ptext27:
  4625                           	opt callstack 0
  4626  002704                     _I2C_Master_Wait:
  4627                           	opt callstack 24
  4628                           
  4629                           ;I2C.c: 22:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F)){
  4630                           
  4631                           ;I2C.c: 24:     }
  4632                           
  4633                           ;incstack = 0
  4634  002704  B4C7               	btfsc	4039,2,c	;volatile
  4635  002706  D7FE               	goto	_I2C_Master_Wait
  4636  002708  CFC5 F01E          	movff	4037,??_I2C_Master_Wait	;volatile
  4637  00270C  0E1F               	movlw	31
  4638  00270E  161E               	andwf	??_I2C_Master_Wait,f,c
  4639  002710  B4D8               	btfsc	status,2,c
  4640  002712  0012               	return	
  4641  002714  D7F7               	goto	_I2C_Master_Wait
  4642  002716                     __end_of_I2C_Master_Wait:
  4643                           	opt callstack 0
  4644                           
  4645 ;; *************** function _LCD_write_str *****************
  4646 ;; Defined at:
  4647 ;;		line 123 in file "lcd.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;  str             2   32[COMRAM] PTR unsigned char 
  4650 ;;		 -> main@lcdDisplay(16), 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  i               2   35[COMRAM] int 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4662 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;Total ram usage:        5 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    7
  4669 ;; This function calls:
  4670 ;;		_send_byte
  4671 ;; This function is called by:
  4672 ;;		_main
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text28
  4677  0024AE                     __ptext28:
  4678                           	opt callstack 0
  4679  0024AE                     _LCD_write_str:
  4680                           	opt callstack 23
  4681                           
  4682                           ;lcd.c: 124:     int i=0;
  4683                           
  4684                           ;incstack = 0
  4685  0024AE  0E00               	movlw	0
  4686  0024B0  6E25               	movwf	LCD_write_str@i+1,c
  4687  0024B2  0E00               	movlw	0
  4688  0024B4  6E24               	movwf	LCD_write_str@i,c
  4689                           
  4690                           ;lcd.c: 125:     while(str[i]!=0 && str[i] != '\n'){
  4691  0024B6  D00C               	goto	l4176
  4692  0024B8                     l98:
  4693                           
  4694                           ;lcd.c: 127:         LATDbits.LATD2 = 1;
  4695  0024B8  848C               	bsf	3980,2,c	;volatile
  4696                           
  4697                           ;lcd.c: 128:         send_byte((unsigned char)str[i]);
  4698  0024BA  5024               	movf	LCD_write_str@i,w,c
  4699  0024BC  2421               	addwf	LCD_write_str@str,w,c
  4700  0024BE  6ED9               	movwf	fsr2l,c
  4701  0024C0  5025               	movf	LCD_write_str@i+1,w,c
  4702  0024C2  2022               	addwfc	LCD_write_str@str+1,w,c
  4703  0024C4  6EDA               	movwf	fsr2h,c
  4704  0024C6  50DF               	movf	indf2,w,c
  4705  0024C8  EC8B  F013         	call	_send_byte
  4706                           
  4707                           ;lcd.c: 129:         i++;
  4708  0024CC  4A24               	infsnz	LCD_write_str@i,f,c
  4709  0024CE  2A25               	incf	LCD_write_str@i+1,f,c
  4710  0024D0                     l4176:
  4711                           
  4712                           ;lcd.c: 125:     while(str[i]!=0 && str[i] != '\n'){
  4713  0024D0  5024               	movf	LCD_write_str@i,w,c
  4714  0024D2  2421               	addwf	LCD_write_str@str,w,c
  4715  0024D4  6ED9               	movwf	fsr2l,c
  4716  0024D6  5025               	movf	LCD_write_str@i+1,w,c
  4717  0024D8  2022               	addwfc	LCD_write_str@str+1,w,c
  4718  0024DA  6EDA               	movwf	fsr2h,c
  4719  0024DC  50DF               	movf	indf2,w,c
  4720  0024DE  B4D8               	btfsc	status,2,c
  4721  0024E0  0012               	return	
  4722  0024E2  5024               	movf	LCD_write_str@i,w,c
  4723  0024E4  2421               	addwf	LCD_write_str@str,w,c
  4724  0024E6  6ED9               	movwf	fsr2l,c
  4725  0024E8  5025               	movf	LCD_write_str@i+1,w,c
  4726  0024EA  2022               	addwfc	LCD_write_str@str+1,w,c
  4727  0024EC  6EDA               	movwf	fsr2h,c
  4728  0024EE  0E0A               	movlw	10
  4729  0024F0  18DE               	xorwf	postinc2,w,c
  4730  0024F2  B4D8               	btfsc	status,2,c
  4731  0024F4  0012               	return	
  4732  0024F6  D7E0               	goto	l98
  4733  0024F8                     __end_of_LCD_write_str:
  4734                           	opt callstack 0
  4735                           
  4736 ;; *************** function _LCD_set_cursor *****************
  4737 ;; Defined at:
  4738 ;;		line 106 in file "lcd.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;  row             2   33[COMRAM] unsigned int 
  4741 ;;  column          2   35[COMRAM] unsigned int 
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;		None
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      void 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;Total ram usage:        4 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    8
  4760 ;; This function calls:
  4761 ;;		_lcdInst
  4762 ;; This function is called by:
  4763 ;;		_main
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           	psect	text29
  4768  002460                     __ptext29:
  4769                           	opt callstack 0
  4770  002460                     _LCD_set_cursor:
  4771                           	opt callstack 22
  4772                           
  4773                           ;lcd.c: 108:     row=row%4;
  4774                           
  4775                           ;incstack = 0
  4776  002460  0E03               	movlw	3
  4777  002462  1422               	andwf	LCD_set_cursor@row,w,c
  4778  002464  6E22               	movwf	LCD_set_cursor@row,c
  4779  002466  6A23               	clrf	LCD_set_cursor@row+1,c
  4780                           
  4781                           ;lcd.c: 109:     column = column %16;
  4782  002468  0E0F               	movlw	15
  4783  00246A  1424               	andwf	LCD_set_cursor@column,w,c
  4784  00246C  6E24               	movwf	LCD_set_cursor@column,c
  4785  00246E  6A25               	clrf	LCD_set_cursor@column+1,c
  4786                           
  4787                           ;lcd.c: 110:     if(row==1){
  4788  002470  0422               	decf	LCD_set_cursor@row,w,c
  4789  002472  1023               	iorwf	LCD_set_cursor@row+1,w,c
  4790  002474  A4D8               	btfss	status,2,c
  4791  002476  D004               	goto	l91
  4792                           
  4793                           ;lcd.c: 111:         column +=LCD_LINE2_ADDR;
  4794  002478  0E40               	movlw	64
  4795  00247A  2624               	addwf	LCD_set_cursor@column,f,c
  4796  00247C  0E00               	movlw	0
  4797  00247E  2225               	addwfc	LCD_set_cursor@column+1,f,c
  4798  002480                     l91:
  4799                           
  4800                           ;lcd.c: 113:     if(row==2){
  4801  002480  0E02               	movlw	2
  4802  002482  1822               	xorwf	LCD_set_cursor@row,w,c
  4803  002484  1023               	iorwf	LCD_set_cursor@row+1,w,c
  4804  002486  A4D8               	btfss	status,2,c
  4805  002488  D004               	goto	l92
  4806                           
  4807                           ;lcd.c: 114:         column +=LCD_LINE3_ADDR;
  4808  00248A  0E10               	movlw	16
  4809  00248C  2624               	addwf	LCD_set_cursor@column,f,c
  4810  00248E  0E00               	movlw	0
  4811  002490  2225               	addwfc	LCD_set_cursor@column+1,f,c
  4812  002492                     l92:
  4813                           
  4814                           ;lcd.c: 116:     if(row==3){
  4815  002492  0E03               	movlw	3
  4816  002494  1822               	xorwf	LCD_set_cursor@row,w,c
  4817  002496  1023               	iorwf	LCD_set_cursor@row+1,w,c
  4818  002498  A4D8               	btfss	status,2,c
  4819  00249A  D004               	goto	l4168
  4820                           
  4821                           ;lcd.c: 117:         column +=LCD_LINE4_ADDR;
  4822  00249C  0E50               	movlw	80
  4823  00249E  2624               	addwf	LCD_set_cursor@column,f,c
  4824  0024A0  0E00               	movlw	0
  4825  0024A2  2225               	addwfc	LCD_set_cursor@column+1,f,c
  4826  0024A4                     l4168:
  4827                           
  4828                           ;lcd.c: 120:     { lcdInst(0x80 | column);};
  4829  0024A4  5024               	movf	LCD_set_cursor@column,w,c
  4830  0024A6  0980               	iorlw	128
  4831  0024A8  ECA1  F013         	call	_lcdInst
  4832  0024AC  0012               	return		;funcret
  4833  0024AE                     __end_of_LCD_set_cursor:
  4834                           	opt callstack 0
  4835                           
  4836 ;; *************** function _lcdInst *****************
  4837 ;; Defined at:
  4838 ;;		line 62 in file "lcd.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  data            1    wreg     unsigned char 
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;  data            1   32[COMRAM] unsigned char 
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  1    wreg      void 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;Total ram usage:        1 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    7
  4859 ;; This function calls:
  4860 ;;		_send_byte
  4861 ;; This function is called by:
  4862 ;;		_initLCD
  4863 ;;		_LCD_set_cursor
  4864 ;;		_lcd_shift_cursor
  4865 ;;		_lcd_shift_display
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text30
  4870  002742                     __ptext30:
  4871                           	opt callstack 0
  4872  002742                     _lcdInst:
  4873                           	opt callstack 22
  4874                           
  4875                           ;incstack = 0
  4876                           ;lcdInst@data stored from wreg
  4877  002742  6E21               	movwf	lcdInst@data,c
  4878                           
  4879                           ;lcd.c: 63:     LATDbits.LATD2 = 0;
  4880  002744  948C               	bcf	3980,2,c	;volatile
  4881                           
  4882                           ;lcd.c: 64:     send_byte(data);
  4883  002746  5021               	movf	lcdInst@data,w,c
  4884  002748  EC8B  F013         	call	_send_byte
  4885  00274C  0012               	return		;funcret
  4886  00274E                     __end_of_lcdInst:
  4887                           	opt callstack 0
  4888                           
  4889 ;; *************** function _send_byte *****************
  4890 ;; Defined at:
  4891 ;;		line 53 in file "lcd.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  data            1    wreg     unsigned char 
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  data            1   31[COMRAM] unsigned char 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  1    wreg      void 
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, status,0, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4909 ;;Total ram usage:        1 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    6
  4912 ;; This function calls:
  4913 ;;		_send_nibble
  4914 ;; This function is called by:
  4915 ;;		_lcdInst
  4916 ;;		_initLCD
  4917 ;;		_putch
  4918 ;;		_LCD_write_str
  4919 ;;		_LCD_write_char
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	text31
  4924  002716                     __ptext31:
  4925                           	opt callstack 0
  4926  002716                     _send_byte:
  4927                           	opt callstack 18
  4928                           
  4929                           ;incstack = 0
  4930                           ;send_byte@data stored from wreg
  4931  002716  6E20               	movwf	send_byte@data,c
  4932                           
  4933                           ;lcd.c: 55:     send_nibble(data >> 4);
  4934  002718  3820               	swapf	send_byte@data,w,c
  4935  00271A  0B0F               	andlw	15
  4936  00271C  EC77  F013         	call	_send_nibble
  4937                           
  4938                           ;lcd.c: 58:     send_nibble(data);
  4939  002720  5020               	movf	send_byte@data,w,c
  4940  002722  EC77  F013         	call	_send_nibble
  4941  002726  0012               	return		;funcret
  4942  002728                     __end_of_send_byte:
  4943                           	opt callstack 0
  4944                           
  4945 ;; *************** function _send_nibble *****************
  4946 ;; Defined at:
  4947 ;;		line 42 in file "lcd.c"
  4948 ;; Parameters:    Size  Location     Type
  4949 ;;  data            1    wreg     unsigned char 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  data            1   30[COMRAM] unsigned char 
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;Total ram usage:        1 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    5
  4968 ;; This function calls:
  4969 ;;		_pulse_e
  4970 ;; This function is called by:
  4971 ;;		_send_byte
  4972 ;;		_initLCD
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text32
  4977  0026EE                     __ptext32:
  4978                           	opt callstack 0
  4979  0026EE                     _send_nibble:
  4980                           	opt callstack 18
  4981                           
  4982                           ;incstack = 0
  4983                           ;send_nibble@data stored from wreg
  4984  0026EE  6E1F               	movwf	send_nibble@data,c
  4985                           
  4986                           ;lcd.c: 44:     LATD = (unsigned char)(LATD & 0x0F);
  4987  0026F0  508C               	movf	3980,w,c	;volatile
  4988  0026F2  0B0F               	andlw	15
  4989  0026F4  6E8C               	movwf	3980,c	;volatile
  4990                           
  4991                           ;lcd.c: 45:     LATD = (unsigned char)((data << 4) | LATD);
  4992  0026F6  381F               	swapf	send_nibble@data,w,c
  4993  0026F8  0BF0               	andlw	240
  4994  0026FA  108C               	iorwf	3980,w,c	;volatile
  4995  0026FC  6E8C               	movwf	3980,c	;volatile
  4996                           
  4997                           ;lcd.c: 46:     pulse_e();
  4998  0026FE  EC1E  F013         	call	_pulse_e	;wreg free
  4999  002702  0012               	return		;funcret
  5000  002704                     __end_of_send_nibble:
  5001                           	opt callstack 0
  5002                           
  5003 ;; *************** function _pulse_e *****************
  5004 ;; Defined at:
  5005 ;;		line 26 in file "lcd.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;		None
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;  interruptSta    1   29[COMRAM] unsigned char 
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  1    wreg      void 
  5012 ;; Registers used:
  5013 ;;		wreg
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;Total ram usage:        1 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    4
  5026 ;; This function calls:
  5027 ;;		Nothing
  5028 ;; This function is called by:
  5029 ;;		_send_nibble
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           	psect	text33
  5034  00263C                     __ptext33:
  5035                           	opt callstack 0
  5036  00263C                     _pulse_e:
  5037                           	opt callstack 18
  5038                           
  5039                           ;lcd.c: 27:     unsigned char interruptState = INTCONbits.GIE;
  5040                           
  5041                           ;incstack = 0
  5042  00263C  0E00               	movlw	0
  5043  00263E  BEF2               	btfsc	4082,7,c	;volatile
  5044  002640  0E01               	movlw	1
  5045  002642  6E1E               	movwf	pulse_e@interruptState,c
  5046                           
  5047                           ;lcd.c: 28:     (INTCONbits.GIE = 0);
  5048  002644  9EF2               	bcf	4082,7,c	;volatile
  5049                           
  5050                           ;lcd.c: 29:     LATDbits.LATD3 = 1;
  5051  002646  868C               	bsf	3980,3,c	;volatile
  5052                           
  5053                           ;lcd.c: 32:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  5054  002648  0E14               	movlw	20
  5055  00264A                     u3607:
  5056  00264A  2EE8               	decfsz	wreg,f,c
  5057  00264C  D7FE               	bra	u3607
  5058  00264E  D000               	nop2	
  5059                           
  5060                           ;lcd.c: 33:     LATDbits.LATD3 = 0;
  5061  002650  968C               	bcf	3980,3,c	;volatile
  5062                           
  5063                           ;lcd.c: 34:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  5064  002652  0E53               	movlw	83
  5065  002654                     u3617:
  5066  002654  2EE8               	decfsz	wreg,f,c
  5067  002656  D7FE               	bra	u3617
  5068  002658  F000               	nop	
  5069                           
  5070                           ;lcd.c: 35:     INTCONbits.GIE = interruptState;
  5071  00265A  B01E               	btfsc	pulse_e@interruptState,0,c
  5072  00265C  D002               	bra	u2715
  5073  00265E  9EF2               	bcf	4082,7,c	;volatile
  5074  002660  D001               	bra	u2716
  5075  002662                     u2715:
  5076  002662  8EF2               	bsf	4082,7,c	;volatile
  5077  002664                     u2716:
  5078  002664  0012               	return		;funcret
  5079  002666                     __end_of_pulse_e:
  5080                           	opt callstack 0
  5081                           
  5082 ;; *************** function _I2C_Master_Init *****************
  5083 ;; Defined at:
  5084 ;;		line 28 in file "I2C.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  clockFreq       4   42[COMRAM] const unsigned long 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;		None
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  1    wreg      void 
  5091 ;; Registers used:
  5092 ;;		wreg, status,2, status,0, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5098 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;Total ram usage:        8 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; Hardware stack levels required when called:    5
  5105 ;; This function calls:
  5106 ;;		___lldiv
  5107 ;; This function is called by:
  5108 ;;		_main
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           	psect	text34
  5113  00226C                     __ptext34:
  5114                           	opt callstack 0
  5115  00226C                     _I2C_Master_Init:
  5116                           	opt callstack 25
  5117                           
  5118                           ;I2C.c: 30:     SSPCON1bits.SSPEN = 0;
  5119                           
  5120                           ;incstack = 0
  5121  00226C  9AC6               	bcf	4038,5,c	;volatile
  5122                           
  5123                           ;I2C.c: 33:     TRISCbits.TRISC3 = 1;
  5124  00226E  8694               	bsf	3988,3,c	;volatile
  5125                           
  5126                           ;I2C.c: 34:     TRISCbits.TRISC4 = 1;
  5127  002270  8894               	bsf	3988,4,c	;volatile
  5128                           
  5129                           ;I2C.c: 39:     SSPADD = (10000000 / (4 * clockFreq)) - 1;
  5130  002272  0E80               	movlw	128
  5131  002274  6E1E               	movwf	___lldiv@dividend,c
  5132  002276  0E96               	movlw	150
  5133  002278  6E1F               	movwf	___lldiv@dividend+1,c
  5134  00227A  0E98               	movlw	152
  5135  00227C  6E20               	movwf	___lldiv@dividend+2,c
  5136  00227E  0E00               	movlw	0
  5137  002280  6E21               	movwf	___lldiv@dividend+3,c
  5138  002282  C02B  F02F         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  5139  002286  C02C  F030         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  5140  00228A  C02D  F031         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  5141  00228E  C02E  F032         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  5142  002292  0E02               	movlw	2
  5143  002294                     u3295:
  5144  002294  90D8               	bcf	status,0,c
  5145  002296  362F               	rlcf	??_I2C_Master_Init,f,c
  5146  002298  3630               	rlcf	??_I2C_Master_Init+1,f,c
  5147  00229A  3631               	rlcf	??_I2C_Master_Init+2,f,c
  5148  00229C  3632               	rlcf	??_I2C_Master_Init+3,f,c
  5149  00229E  2EE8               	decfsz	wreg,f,c
  5150  0022A0  D7F9               	goto	u3295
  5151  0022A2  C02F  F022         	movff	??_I2C_Master_Init,___lldiv@divisor
  5152  0022A6  C030  F023         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5153  0022AA  C031  F024         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5154  0022AE  C032  F025         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5155  0022B2  ECC0  F010         	call	___lldiv	;wreg free
  5156  0022B6  041E               	decf	?___lldiv,w,c
  5157  0022B8  6EC8               	movwf	4040,c	;volatile
  5158                           
  5159                           ;I2C.c: 42:     SSPSTAT = 0b10000000;
  5160  0022BA  0E80               	movlw	128
  5161  0022BC  6EC7               	movwf	4039,c	;volatile
  5162                           
  5163                           ;I2C.c: 45:     SSPCON1 = 0b00101000;
  5164  0022BE  0E28               	movlw	40
  5165  0022C0  6EC6               	movwf	4038,c	;volatile
  5166                           
  5167                           ;I2C.c: 48:     SSPCON2 = 0b00000000;
  5168  0022C2  0E00               	movlw	0
  5169  0022C4  6EC5               	movwf	4037,c	;volatile
  5170  0022C6  0012               	return		;funcret
  5171  0022C8                     __end_of_I2C_Master_Init:
  5172                           	opt callstack 0
  5173                           
  5174 ;; *************** function ___lldiv *****************
  5175 ;; Defined at:
  5176 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;  dividend        4   29[COMRAM] unsigned long 
  5179 ;;  divisor         4   33[COMRAM] unsigned long 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  quotient        4   37[COMRAM] unsigned long 
  5182 ;;  counter         1   41[COMRAM] unsigned char 
  5183 ;; Return value:  Size  Location     Type
  5184 ;;                  4   29[COMRAM] unsigned long 
  5185 ;; Registers used:
  5186 ;;		wreg, status,2, status,0
  5187 ;; Tracked objects:
  5188 ;;		On entry : 0/0
  5189 ;;		On exit  : 0/0
  5190 ;;		Unchanged: 0/0
  5191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5192 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5195 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5196 ;;Total ram usage:       13 bytes
  5197 ;; Hardware stack levels used:    1
  5198 ;; Hardware stack levels required when called:    4
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_I2C_Master_Init
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text35
  5207  002180                     __ptext35:
  5208                           	opt callstack 0
  5209  002180                     ___lldiv:
  5210                           	opt callstack 25
  5211                           
  5212                           ;incstack = 0
  5213  002180  0E00               	movlw	0
  5214  002182  6E26               	movwf	___lldiv@quotient,c
  5215  002184  0E00               	movlw	0
  5216  002186  6E27               	movwf	___lldiv@quotient+1,c
  5217  002188  0E00               	movlw	0
  5218  00218A  6E28               	movwf	___lldiv@quotient+2,c
  5219  00218C  0E00               	movlw	0
  5220  00218E  6E29               	movwf	___lldiv@quotient+3,c
  5221  002190  5022               	movf	___lldiv@divisor,w,c
  5222  002192  1023               	iorwf	___lldiv@divisor+1,w,c
  5223  002194  1024               	iorwf	___lldiv@divisor+2,w,c
  5224  002196  1025               	iorwf	___lldiv@divisor+3,w,c
  5225  002198  B4D8               	btfsc	status,2,c
  5226  00219A  D02A               	goto	l548
  5227  00219C  0E01               	movlw	1
  5228  00219E  6E2A               	movwf	___lldiv@counter,c
  5229  0021A0  D006               	goto	l4058
  5230  0021A2                     l4056:
  5231  0021A2  90D8               	bcf	status,0,c
  5232  0021A4  3622               	rlcf	___lldiv@divisor,f,c
  5233  0021A6  3623               	rlcf	___lldiv@divisor+1,f,c
  5234  0021A8  3624               	rlcf	___lldiv@divisor+2,f,c
  5235  0021AA  3625               	rlcf	___lldiv@divisor+3,f,c
  5236  0021AC  2A2A               	incf	___lldiv@counter,f,c
  5237  0021AE                     l4058:
  5238  0021AE  AE25               	btfss	___lldiv@divisor+3,7,c
  5239  0021B0  D7F8               	goto	l4056
  5240  0021B2                     u3210:
  5241  0021B2  90D8               	bcf	status,0,c
  5242  0021B4  3626               	rlcf	___lldiv@quotient,f,c
  5243  0021B6  3627               	rlcf	___lldiv@quotient+1,f,c
  5244  0021B8  3628               	rlcf	___lldiv@quotient+2,f,c
  5245  0021BA  3629               	rlcf	___lldiv@quotient+3,f,c
  5246  0021BC  5022               	movf	___lldiv@divisor,w,c
  5247  0021BE  5C1E               	subwf	___lldiv@dividend,w,c
  5248  0021C0  5023               	movf	___lldiv@divisor+1,w,c
  5249  0021C2  581F               	subwfb	___lldiv@dividend+1,w,c
  5250  0021C4  5024               	movf	___lldiv@divisor+2,w,c
  5251  0021C6  5820               	subwfb	___lldiv@dividend+2,w,c
  5252  0021C8  5025               	movf	___lldiv@divisor+3,w,c
  5253  0021CA  5821               	subwfb	___lldiv@dividend+3,w,c
  5254  0021CC  A0D8               	btfss	status,0,c
  5255  0021CE  D009               	goto	l4068
  5256  0021D0  5022               	movf	___lldiv@divisor,w,c
  5257  0021D2  5E1E               	subwf	___lldiv@dividend,f,c
  5258  0021D4  5023               	movf	___lldiv@divisor+1,w,c
  5259  0021D6  5A1F               	subwfb	___lldiv@dividend+1,f,c
  5260  0021D8  5024               	movf	___lldiv@divisor+2,w,c
  5261  0021DA  5A20               	subwfb	___lldiv@dividend+2,f,c
  5262  0021DC  5025               	movf	___lldiv@divisor+3,w,c
  5263  0021DE  5A21               	subwfb	___lldiv@dividend+3,f,c
  5264  0021E0  8026               	bsf	___lldiv@quotient,0,c
  5265  0021E2                     l4068:
  5266  0021E2  90D8               	bcf	status,0,c
  5267  0021E4  3225               	rrcf	___lldiv@divisor+3,f,c
  5268  0021E6  3224               	rrcf	___lldiv@divisor+2,f,c
  5269  0021E8  3223               	rrcf	___lldiv@divisor+1,f,c
  5270  0021EA  3222               	rrcf	___lldiv@divisor,f,c
  5271  0021EC  2E2A               	decfsz	___lldiv@counter,f,c
  5272  0021EE  D7E1               	goto	u3210
  5273  0021F0                     l548:
  5274  0021F0  C026  F01E         	movff	___lldiv@quotient,?___lldiv
  5275  0021F4  C027  F01F         	movff	___lldiv@quotient+1,?___lldiv+1
  5276  0021F8  C028  F020         	movff	___lldiv@quotient+2,?___lldiv+2
  5277  0021FC  C029  F021         	movff	___lldiv@quotient+3,?___lldiv+3
  5278  002200  0012               	return		;funcret
  5279  002202                     __end_of___lldiv:
  5280                           	opt callstack 0
  5281                           
  5282 ;; *************** function _DCMotorLeftRightFwdON *****************
  5283 ;; Defined at:
  5284 ;;		line 50 in file "motors.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;		None
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      void 
  5291 ;; Registers used:
  5292 ;;		cstack
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;Total ram usage:        0 bytes
  5303 ;; Hardware stack levels used:    1
  5304 ;; Hardware stack levels required when called:    5
  5305 ;; This function calls:
  5306 ;;		_DCMotorLeftFwd
  5307 ;;		_DCMotorRightFwd
  5308 ;; This function is called by:
  5309 ;;		_main
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           	psect	text36
  5314  002758                     __ptext36:
  5315                           	opt callstack 0
  5316  002758                     _DCMotorLeftRightFwdON:
  5317                           	opt callstack 25
  5318                           
  5319                           ;motors.c: 51:     DCMotorLeftFwd();
  5320                           
  5321                           ;incstack = 0
  5322  002758  ECC6  F013         	call	_DCMotorLeftFwd	;wreg free
  5323                           
  5324                           ;motors.c: 52:     DCMotorRightFwd();
  5325  00275C  ECC2  F013         	call	_DCMotorRightFwd	;wreg free
  5326  002760  0012               	return		;funcret
  5327  002762                     __end_of_DCMotorLeftRightFwdON:
  5328                           	opt callstack 0
  5329                           
  5330 ;; *************** function _DCMotorRightFwd *****************
  5331 ;; Defined at:
  5332 ;;		line 20 in file "motors.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;		None
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;		None
  5337 ;; Return value:  Size  Location     Type
  5338 ;;                  1    wreg      void 
  5339 ;; Registers used:
  5340 ;;		None
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5350 ;;Total ram usage:        0 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    4
  5353 ;; This function calls:
  5354 ;;		Nothing
  5355 ;; This function is called by:
  5356 ;;		_main
  5357 ;;		_DCMotorLeftRightFwdON
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           	psect	text37
  5362  002784                     __ptext37:
  5363                           	opt callstack 0
  5364  002784                     _DCMotorRightFwd:
  5365                           	opt callstack 26
  5366                           
  5367                           ;motors.c: 21:     LATAbits.LATA1 = 0;
  5368                           
  5369                           ;incstack = 0
  5370  002784  9289               	bcf	3977,1,c	;volatile
  5371                           
  5372                           ;motors.c: 22:     LATAbits.LATA3 = 0;
  5373  002786  9689               	bcf	3977,3,c	;volatile
  5374                           
  5375                           ;motors.c: 24:     LATAbits.LATA0 = 1;
  5376  002788  8089               	bsf	3977,0,c	;volatile
  5377  00278A  0012               	return		;funcret
  5378  00278C                     __end_of_DCMotorRightFwd:
  5379                           	opt callstack 0
  5380                           
  5381 ;; *************** function _DCMotorLeftFwd *****************
  5382 ;; Defined at:
  5383 ;;		line 14 in file "motors.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;		None
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;		None
  5388 ;; Return value:  Size  Location     Type
  5389 ;;                  1    wreg      void 
  5390 ;; Registers used:
  5391 ;;		None
  5392 ;; Tracked objects:
  5393 ;;		On entry : 0/0
  5394 ;;		On exit  : 0/0
  5395 ;;		Unchanged: 0/0
  5396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5401 ;;Total ram usage:        0 bytes
  5402 ;; Hardware stack levels used:    1
  5403 ;; Hardware stack levels required when called:    4
  5404 ;; This function calls:
  5405 ;;		Nothing
  5406 ;; This function is called by:
  5407 ;;		_main
  5408 ;;		_DCMotorLeftRightFwdON
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text38
  5413  00278C                     __ptext38:
  5414                           	opt callstack 0
  5415  00278C                     _DCMotorLeftFwd:
  5416                           	opt callstack 25
  5417                           
  5418                           ;motors.c: 15:     LATAbits.LATA1 = 0;
  5419                           
  5420                           ;incstack = 0
  5421  00278C  9289               	bcf	3977,1,c	;volatile
  5422                           
  5423                           ;motors.c: 16:     LATAbits.LATA3 = 0;
  5424  00278E  9689               	bcf	3977,3,c	;volatile
  5425                           
  5426                           ;motors.c: 18:     LATAbits.LATA2 = 1;
  5427  002790  8489               	bsf	3977,2,c	;volatile
  5428  002792  0012               	return		;funcret
  5429  002794                     __end_of_DCMotorLeftFwd:
  5430                           	opt callstack 0
  5431                           
  5432 ;; *************** function _DCMotorLeftRightBkwdON *****************
  5433 ;; Defined at:
  5434 ;;		line 54 in file "motors.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;		None
  5437 ;; Auto vars:     Size  Location     Type
  5438 ;;		None
  5439 ;; Return value:  Size  Location     Type
  5440 ;;                  1    wreg      void 
  5441 ;; Registers used:
  5442 ;;		cstack
  5443 ;; Tracked objects:
  5444 ;;		On entry : 0/0
  5445 ;;		On exit  : 0/0
  5446 ;;		Unchanged: 0/0
  5447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;Total ram usage:        0 bytes
  5453 ;; Hardware stack levels used:    1
  5454 ;; Hardware stack levels required when called:    5
  5455 ;; This function calls:
  5456 ;;		_DCMotorLeftBkwd
  5457 ;;		_DCMotorRightBkwd
  5458 ;; This function is called by:
  5459 ;;		_main
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text39
  5464  002762                     __ptext39:
  5465                           	opt callstack 0
  5466  002762                     _DCMotorLeftRightBkwdON:
  5467                           	opt callstack 25
  5468                           
  5469                           ;motors.c: 55:     DCMotorLeftBkwd();
  5470                           
  5471                           ;incstack = 0
  5472  002762  ECCE  F013         	call	_DCMotorLeftBkwd	;wreg free
  5473                           
  5474                           ;motors.c: 56:     DCMotorRightBkwd();
  5475  002766  ECCA  F013         	call	_DCMotorRightBkwd	;wreg free
  5476  00276A  0012               	return		;funcret
  5477  00276C                     __end_of_DCMotorLeftRightBkwdON:
  5478                           	opt callstack 0
  5479                           
  5480 ;; *************** function _DCMotorRightBkwd *****************
  5481 ;; Defined at:
  5482 ;;		line 32 in file "motors.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;		None
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;		None
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  1    wreg      void 
  5489 ;; Registers used:
  5490 ;;		None
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;Total ram usage:        0 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:    4
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_main
  5507 ;;		_DCMotorLeftRightBkwdON
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text40
  5512  002794                     __ptext40:
  5513                           	opt callstack 0
  5514  002794                     _DCMotorRightBkwd:
  5515                           	opt callstack 26
  5516                           
  5517                           ;motors.c: 33:     LATAbits.LATA0 = 0;
  5518                           
  5519                           ;incstack = 0
  5520  002794  9089               	bcf	3977,0,c	;volatile
  5521                           
  5522                           ;motors.c: 34:     LATAbits.LATA2 = 0;
  5523  002796  9489               	bcf	3977,2,c	;volatile
  5524                           
  5525                           ;motors.c: 36:     LATAbits.LATA1 = 1;
  5526  002798  8289               	bsf	3977,1,c	;volatile
  5527  00279A  0012               	return		;funcret
  5528  00279C                     __end_of_DCMotorRightBkwd:
  5529                           	opt callstack 0
  5530                           
  5531 ;; *************** function _DCMotorLeftBkwd *****************
  5532 ;; Defined at:
  5533 ;;		line 26 in file "motors.c"
  5534 ;; Parameters:    Size  Location     Type
  5535 ;;		None
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;		None
  5538 ;; Return value:  Size  Location     Type
  5539 ;;                  1    wreg      void 
  5540 ;; Registers used:
  5541 ;;		None
  5542 ;; Tracked objects:
  5543 ;;		On entry : 0/0
  5544 ;;		On exit  : 0/0
  5545 ;;		Unchanged: 0/0
  5546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;Total ram usage:        0 bytes
  5552 ;; Hardware stack levels used:    1
  5553 ;; Hardware stack levels required when called:    4
  5554 ;; This function calls:
  5555 ;;		Nothing
  5556 ;; This function is called by:
  5557 ;;		_main
  5558 ;;		_DCMotorLeftRightBkwdON
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561                           
  5562                           	psect	text41
  5563  00279C                     __ptext41:
  5564                           	opt callstack 0
  5565  00279C                     _DCMotorLeftBkwd:
  5566                           	opt callstack 25
  5567                           
  5568                           ;motors.c: 27:     LATAbits.LATA0 = 0;
  5569                           
  5570                           ;incstack = 0
  5571  00279C  9089               	bcf	3977,0,c	;volatile
  5572                           
  5573                           ;motors.c: 28:     LATAbits.LATA2 = 0;
  5574  00279E  9489               	bcf	3977,2,c	;volatile
  5575                           
  5576                           ;motors.c: 30:     LATAbits.LATA3 = 1;
  5577  0027A0  8689               	bsf	3977,3,c	;volatile
  5578  0027A2  0012               	return		;funcret
  5579  0027A4                     __end_of_DCMotorLeftBkwd:
  5580                           	opt callstack 0
  5581                           
  5582 ;; *************** function _DCMotorCenterRight *****************
  5583 ;; Defined at:
  5584 ;;		line 9 in file "motors.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;		None
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;		None
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      void 
  5591 ;; Registers used:
  5592 ;;		None
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5602 ;;Total ram usage:        0 bytes
  5603 ;; Hardware stack levels used:    1
  5604 ;; Hardware stack levels required when called:    4
  5605 ;; This function calls:
  5606 ;;		Nothing
  5607 ;; This function is called by:
  5608 ;;		_main
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text42
  5613  0027A4                     __ptext42:
  5614                           	opt callstack 0
  5615  0027A4                     _DCMotorCenterRight:
  5616                           	opt callstack 26
  5617                           
  5618                           ;motors.c: 10:     LATAbits.LATA4 = 0;
  5619                           
  5620                           ;incstack = 0
  5621  0027A4  9889               	bcf	3977,4,c	;volatile
  5622                           
  5623                           ;motors.c: 11:     LATAbits.LATA5 = 1;
  5624  0027A6  8A89               	bsf	3977,5,c	;volatile
  5625  0027A8  0012               	return		;funcret
  5626  0027AA                     __end_of_DCMotorCenterRight:
  5627                           	opt callstack 0
  5628                           
  5629 ;; *************** function _DCMotorCenterLeft *****************
  5630 ;; Defined at:
  5631 ;;		line 4 in file "motors.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      void 
  5638 ;; Registers used:
  5639 ;;		None
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;Total ram usage:        0 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    4
  5652 ;; This function calls:
  5653 ;;		Nothing
  5654 ;; This function is called by:
  5655 ;;		_main
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text43
  5660  0027AA                     __ptext43:
  5661                           	opt callstack 0
  5662  0027AA                     _DCMotorCenterLeft:
  5663                           	opt callstack 26
  5664                           
  5665                           ;motors.c: 5:     LATAbits.LATA5 = 0;
  5666                           
  5667                           ;incstack = 0
  5668  0027AA  9A89               	bcf	3977,5,c	;volatile
  5669                           
  5670                           ;motors.c: 6:     LATAbits.LATA4 = 1;
  5671  0027AC  8889               	bsf	3977,4,c	;volatile
  5672  0027AE  0012               	return		;funcret
  5673  0027B0                     __end_of_DCMotorCenterLeft:
  5674                           	opt callstack 0
  5675                           
  5676 ;; *************** function _DCMotorAllOff *****************
  5677 ;; Defined at:
  5678 ;;		line 38 in file "motors.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;		None
  5683 ;; Return value:  Size  Location     Type
  5684 ;;                  1    wreg      void 
  5685 ;; Registers used:
  5686 ;;		None
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5696 ;;Total ram usage:        0 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    4
  5699 ;; This function calls:
  5700 ;;		Nothing
  5701 ;; This function is called by:
  5702 ;;		_main
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           	psect	text44
  5707  002728                     __ptext44:
  5708                           	opt callstack 0
  5709  002728                     _DCMotorAllOff:
  5710                           	opt callstack 26
  5711                           
  5712                           ;motors.c: 39:     LATAbits.LATA0 = 0;
  5713                           
  5714                           ;incstack = 0
  5715  002728  9089               	bcf	3977,0,c	;volatile
  5716                           
  5717                           ;motors.c: 40:     LATAbits.LATA2 = 0;
  5718  00272A  9489               	bcf	3977,2,c	;volatile
  5719                           
  5720                           ;motors.c: 42:     LATAbits.LATA1 = 0;
  5721  00272C  9289               	bcf	3977,1,c	;volatile
  5722                           
  5723                           ;motors.c: 43:     LATAbits.LATA3 = 0;
  5724  00272E  9689               	bcf	3977,3,c	;volatile
  5725                           
  5726                           ;motors.c: 45:     LATAbits.LATA4 = 0;
  5727  002730  9889               	bcf	3977,4,c	;volatile
  5728                           
  5729                           ;motors.c: 46:     LATAbits.LATA5 = 0;
  5730  002732  9A89               	bcf	3977,5,c	;volatile
  5731  002734  0012               	return		;funcret
  5732  002736                     __end_of_DCMotorAllOff:
  5733                           	opt callstack 0
  5734                           
  5735 ;; *************** function _low_isr *****************
  5736 ;; Defined at:
  5737 ;;		line 365 in file "main.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;		None
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;		None
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  1    wreg      void 
  5744 ;; Registers used:
  5745 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5753 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;Total ram usage:        5 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    3
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		Interrupt level 1
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	intcodelo
  5766  000018                     __pintcodelo:
  5767                           	opt callstack 0
  5768  000018                     _low_isr:
  5769                           	opt callstack 16
  5770                           
  5771                           ;incstack = 0
  5772  000018  8062               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5773  00001A  CFD8 F019          	movff	status,??_low_isr
  5774  00001E  CFE8 F01A          	movff	wreg,??_low_isr+1
  5775  000022  CFE0 F01B          	movff	bsr,??_low_isr+2
  5776  000026  CFD9 F01C          	movff	fsr2l,??_low_isr+3
  5777  00002A  CFDA F01D          	movff	fsr2h,??_low_isr+4
  5778                           
  5779                           ;main.c: 366:     (INTCONbits.GIE = 0);
  5780  00002E  9EF2               	bcf	4082,7,c	;volatile
  5781                           
  5782                           ;main.c: 368:      if(RCIE && RCIF){
  5783  000030  BA9D               	btfsc	3997,5,c	;volatile
  5784  000032  AA9E               	btfss	3998,5,c	;volatile
  5785  000034  D00C               	goto	i1l3512
  5786                           
  5787                           ;main.c: 369:         _rx_buffer[_rx_buffer_head] = RCREG;
  5788  000036  0E40               	movlw	low __rx_buffer
  5789  000038  2459               	addwf	__rx_buffer_head,w,c	;volatile
  5790  00003A  6ED9               	movwf	fsr2l,c
  5791  00003C  6ADA               	clrf	fsr2h,c
  5792  00003E  0E01               	movlw	high __rx_buffer
  5793  000040  22DA               	addwfc	fsr2h,f,c
  5794  000042  CFAE FFDF          	movff	4014,indf2	;volatile
  5795                           
  5796                           ;main.c: 370:         _rx_buffer_head = (unsigned char)(_rx_buffer_head + 1) % 64;
  5797  000046  2859               	incf	__rx_buffer_head,w,c	;volatile
  5798  000048  0B3F               	andlw	63
  5799  00004A  6E59               	movwf	__rx_buffer_head,c	;volatile
  5800                           
  5801                           ;main.c: 371:         RCIF = 0;
  5802  00004C  9A9E               	bcf	3998,5,c	;volatile
  5803  00004E                     i1l3512:
  5804                           
  5805                           ;main.c: 373:     if(TXIE && TXIF){
  5806  00004E  B89D               	btfsc	3997,4,c	;volatile
  5807  000050  A89E               	btfss	3998,4,c	;volatile
  5808  000052  D013               	goto	i1l307
  5809                           
  5810                           ;main.c: 374:         if((_tx_buffer_tail != _tx_buffer_head)){
  5811  000054  5057               	movf	__tx_buffer_head,w,c	;volatile
  5812  000056  1856               	xorwf	__tx_buffer_tail,w,c	;volatile
  5813  000058  B4D8               	btfsc	status,2,c
  5814  00005A  D00D               	goto	i1l308
  5815                           
  5816                           ;main.c: 375:             TXREG = _tx_buffer[_tx_buffer_tail];
  5817  00005C  0E00               	movlw	low __tx_buffer
  5818  00005E  2456               	addwf	__tx_buffer_tail,w,c	;volatile
  5819  000060  6ED9               	movwf	fsr2l,c
  5820  000062  6ADA               	clrf	fsr2h,c
  5821  000064  0E01               	movlw	high __tx_buffer
  5822  000066  22DA               	addwfc	fsr2h,f,c
  5823  000068  50DF               	movf	indf2,w,c
  5824  00006A  6EAD               	movwf	4013,c	;volatile
  5825                           
  5826                           ;main.c: 376:             _tx_buffer_tail = (unsigned char)(_tx_buffer_tail + 1) % 64;
  5827  00006C  2856               	incf	__tx_buffer_tail,w,c	;volatile
  5828  00006E  0B3F               	andlw	63
  5829  000070  6E56               	movwf	__tx_buffer_tail,c	;volatile
  5830                           
  5831                           ;main.c: 377:             TXIF = 0;
  5832  000072  989E               	bcf	3998,4,c	;volatile
  5833                           
  5834                           ;main.c: 378:         }else{
  5835  000074  D002               	goto	i1l307
  5836  000076                     i1l308:
  5837                           
  5838                           ;main.c: 379:             TXIF = 0;
  5839  000076  989E               	bcf	3998,4,c	;volatile
  5840                           
  5841                           ;main.c: 380:             TXIE = 0;
  5842  000078  989D               	bcf	3997,4,c	;volatile
  5843  00007A                     i1l307:
  5844                           
  5845                           ;main.c: 384:     (INTCONbits.GIE = 1);
  5846  00007A  8EF2               	bsf	4082,7,c	;volatile
  5847  00007C  C01D  FFDA         	movff	??_low_isr+4,fsr2h
  5848  000080  C01C  FFD9         	movff	??_low_isr+3,fsr2l
  5849  000084  C01B  FFE0         	movff	??_low_isr+2,bsr
  5850  000088  C01A  FFE8         	movff	??_low_isr+1,wreg
  5851  00008C  C019  FFD8         	movff	??_low_isr,status
  5852  000090  9062               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5853  000092  0010               	retfie	
  5854  000094                     __end_of_low_isr:
  5855                           	opt callstack 0
  5856                           
  5857 ;; *************** function _high_isr *****************
  5858 ;; Defined at:
  5859 ;;		line 334 in file "main.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2, status,0, cstack
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;Total ram usage:        0 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    2
  5880 ;; This function calls:
  5881 ;;		___fladd
  5882 ;;		___flsub
  5883 ;; This function is called by:
  5884 ;;		Interrupt level 2
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           	psect	intcode
  5889  000008                     __pintcode:
  5890                           	opt callstack 0
  5891  000008                     _high_isr:
  5892                           	opt callstack 16
  5893                           
  5894                           ;incstack = 0
  5895  000008  8262               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5896  00000A  EDA1  F00E         	call	int_func,f	;refresh shadow registers
  5897                           
  5898                           	psect	intcode_body
  5899  001D42                     __pintcode_body:
  5900                           	opt callstack 16
  5901  001D42                     int_func:
  5902                           	opt callstack 16
  5903  001D42  0006               	pop		; remove dummy address from shadow register refresh
  5904                           
  5905                           ;main.c: 337:     if (INT0IE && INT0IF){
  5906  001D44  B8F2               	btfsc	4082,4,c	;volatile
  5907  001D46  A2F2               	btfss	4082,1,c	;volatile
  5908  001D48  D038               	goto	i2l3482
  5909                           
  5910                           ;main.c: 338:         if(PORTDbits.RD0){
  5911  001D4A  A083               	btfss	3971,0,c	;volatile
  5912  001D4C  D01B               	goto	i2l3478
  5913                           
  5914                           ;main.c: 339:             distanceL++;
  5915  001D4E  C04A  F001         	movff	_distanceL,___fladd@b	;volatile
  5916  001D52  C04B  F002         	movff	_distanceL+1,___fladd@b+1	;volatile
  5917  001D56  C04C  F003         	movff	_distanceL+2,___fladd@b+2	;volatile
  5918  001D5A  C04D  F004         	movff	_distanceL+3,___fladd@b+3	;volatile
  5919  001D5E  0E00               	movlw	0
  5920  001D60  6E05               	movwf	___fladd@a,c
  5921  001D62  0E00               	movlw	0
  5922  001D64  6E06               	movwf	___fladd@a+1,c
  5923  001D66  0E80               	movlw	128
  5924  001D68  6E07               	movwf	___fladd@a+2,c
  5925  001D6A  0E3F               	movlw	63
  5926  001D6C  6E08               	movwf	___fladd@a+3,c
  5927  001D6E  ECE7  F00B         	call	___fladd	;wreg free
  5928  001D72  C001  F04A         	movff	?___fladd,_distanceL	;volatile
  5929  001D76  C002  F04B         	movff	?___fladd+1,_distanceL+1	;volatile
  5930  001D7A  C003  F04C         	movff	?___fladd+2,_distanceL+2	;volatile
  5931  001D7E  C004  F04D         	movff	?___fladd+3,_distanceL+3	;volatile
  5932                           
  5933                           ;main.c: 340:         }else{
  5934  001D82  D01A               	goto	i2l3480
  5935  001D84                     i2l3478:
  5936                           
  5937                           ;main.c: 341:             distanceL--;
  5938  001D84  C04A  F011         	movff	_distanceL,___flsub@b	;volatile
  5939  001D88  C04B  F012         	movff	_distanceL+1,___flsub@b+1	;volatile
  5940  001D8C  C04C  F013         	movff	_distanceL+2,___flsub@b+2	;volatile
  5941  001D90  C04D  F014         	movff	_distanceL+3,___flsub@b+3	;volatile
  5942  001D94  0E00               	movlw	0
  5943  001D96  6E15               	movwf	___flsub@a,c
  5944  001D98  0E00               	movlw	0
  5945  001D9A  6E16               	movwf	___flsub@a+1,c
  5946  001D9C  0E80               	movlw	128
  5947  001D9E  6E17               	movwf	___flsub@a+2,c
  5948  001DA0  0E3F               	movlw	63
  5949  001DA2  6E18               	movwf	___flsub@a+3,c
  5950  001DA4  EC7C  F012         	call	___flsub	;wreg free
  5951  001DA8  C011  F04A         	movff	?___flsub,_distanceL	;volatile
  5952  001DAC  C012  F04B         	movff	?___flsub+1,_distanceL+1	;volatile
  5953  001DB0  C013  F04C         	movff	?___flsub+2,_distanceL+2	;volatile
  5954  001DB4  C014  F04D         	movff	?___flsub+3,_distanceL+3	;volatile
  5955  001DB8                     i2l3480:
  5956                           
  5957                           ;main.c: 343:         INT0IF = 0;
  5958  001DB8  92F2               	bcf	4082,1,c	;volatile
  5959  001DBA                     i2l3482:
  5960                           
  5961                           ;main.c: 346:     if (INT2IE && INT2IF){
  5962  001DBA  B8F0               	btfsc	4080,4,c	;volatile
  5963  001DBC  A2F0               	btfss	4080,1,c	;volatile
  5964  001DBE  D038               	goto	i2l3494
  5965                           
  5966                           ;main.c: 347:         if(PORTDbits.RD1){
  5967  001DC0  A283               	btfss	3971,1,c	;volatile
  5968  001DC2  D01B               	goto	i2l3490
  5969                           
  5970                           ;main.c: 348:             distanceR++;
  5971  001DC4  C046  F001         	movff	_distanceR,___fladd@b	;volatile
  5972  001DC8  C047  F002         	movff	_distanceR+1,___fladd@b+1	;volatile
  5973  001DCC  C048  F003         	movff	_distanceR+2,___fladd@b+2	;volatile
  5974  001DD0  C049  F004         	movff	_distanceR+3,___fladd@b+3	;volatile
  5975  001DD4  0E00               	movlw	0
  5976  001DD6  6E05               	movwf	___fladd@a,c
  5977  001DD8  0E00               	movlw	0
  5978  001DDA  6E06               	movwf	___fladd@a+1,c
  5979  001DDC  0E80               	movlw	128
  5980  001DDE  6E07               	movwf	___fladd@a+2,c
  5981  001DE0  0E3F               	movlw	63
  5982  001DE2  6E08               	movwf	___fladd@a+3,c
  5983  001DE4  ECE7  F00B         	call	___fladd	;wreg free
  5984  001DE8  C001  F046         	movff	?___fladd,_distanceR	;volatile
  5985  001DEC  C002  F047         	movff	?___fladd+1,_distanceR+1	;volatile
  5986  001DF0  C003  F048         	movff	?___fladd+2,_distanceR+2	;volatile
  5987  001DF4  C004  F049         	movff	?___fladd+3,_distanceR+3	;volatile
  5988                           
  5989                           ;main.c: 349:         }else{
  5990  001DF8  D01A               	goto	i2l3492
  5991  001DFA                     i2l3490:
  5992                           
  5993                           ;main.c: 350:             distanceR--;
  5994  001DFA  C046  F011         	movff	_distanceR,___flsub@b	;volatile
  5995  001DFE  C047  F012         	movff	_distanceR+1,___flsub@b+1	;volatile
  5996  001E02  C048  F013         	movff	_distanceR+2,___flsub@b+2	;volatile
  5997  001E06  C049  F014         	movff	_distanceR+3,___flsub@b+3	;volatile
  5998  001E0A  0E00               	movlw	0
  5999  001E0C  6E15               	movwf	___flsub@a,c
  6000  001E0E  0E00               	movlw	0
  6001  001E10  6E16               	movwf	___flsub@a+1,c
  6002  001E12  0E80               	movlw	128
  6003  001E14  6E17               	movwf	___flsub@a+2,c
  6004  001E16  0E3F               	movlw	63
  6005  001E18  6E18               	movwf	___flsub@a+3,c
  6006  001E1A  EC7C  F012         	call	___flsub	;wreg free
  6007  001E1E  C011  F046         	movff	?___flsub,_distanceR	;volatile
  6008  001E22  C012  F047         	movff	?___flsub+1,_distanceR+1	;volatile
  6009  001E26  C013  F048         	movff	?___flsub+2,_distanceR+2	;volatile
  6010  001E2A  C014  F049         	movff	?___flsub+3,_distanceR+3	;volatile
  6011  001E2E                     i2l3492:
  6012                           
  6013                           ;main.c: 352:         INT2IF = 0;
  6014  001E2E  92F0               	bcf	4080,1,c	;volatile
  6015  001E30                     i2l3494:
  6016                           
  6017                           ;main.c: 355:     if(INT1IF && INT1IE){
  6018  001E30  B0F0               	btfsc	4080,0,c	;volatile
  6019  001E32  A6F0               	btfss	4080,3,c	;volatile
  6020  001E34  D004               	goto	i2l301
  6021                           
  6022                           ;main.c: 358:         key_was_pressed = 1;
  6023  001E36  0E01               	movlw	1
  6024  001E38  0100               	movlb	0	; () banked
  6025  001E3A  6FAC               	movwf	_key_was_pressed& (0+255),b	;volatile
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;main.c: 359:         INT1IF = 0;
  6029  001E3C  90F0               	bcf	4080,0,c	;volatile
  6030  001E3E                     i2l301:
  6031  001E3E  9262               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6032  001E40  0011               	retfie		f
  6033  001E42                     __end_of_high_isr:
  6034                           	opt callstack 0
  6035                           
  6036 ;; *************** function ___flsub *****************
  6037 ;; Defined at:
  6038 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcadd.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;  b               4   16[COMRAM] void 
  6041 ;;  a               4   20[COMRAM] void 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;		None
  6044 ;; Return value:  Size  Location     Type
  6045 ;;                  4   16[COMRAM] void 
  6046 ;; Registers used:
  6047 ;;		wreg, status,2, status,0, cstack
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6053 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;Total ram usage:        8 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    1
  6060 ;; This function calls:
  6061 ;;		___fladd
  6062 ;; This function is called by:
  6063 ;;		_high_isr
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text47
  6068  0024F8                     __ptext47:
  6069                           	opt callstack 0
  6070  0024F8                     ___flsub:
  6071                           	opt callstack 16
  6072                           
  6073                           ;incstack = 0
  6074  0024F8  0E00               	movlw	0
  6075  0024FA  1A15               	xorwf	___flsub@a,f,c
  6076  0024FC  0E00               	movlw	0
  6077  0024FE  1A16               	xorwf	___flsub@a+1,f,c
  6078  002500  0E00               	movlw	0
  6079  002502  1A17               	xorwf	___flsub@a+2,f,c
  6080  002504  0E80               	movlw	128
  6081  002506  1A18               	xorwf	___flsub@a+3,f,c
  6082  002508  C011  F001         	movff	___flsub@b,___fladd@b
  6083  00250C  C012  F002         	movff	___flsub@b+1,___fladd@b+1
  6084  002510  C013  F003         	movff	___flsub@b+2,___fladd@b+2
  6085  002514  C014  F004         	movff	___flsub@b+3,___fladd@b+3
  6086  002518  C015  F005         	movff	___flsub@a,___fladd@a
  6087  00251C  C016  F006         	movff	___flsub@a+1,___fladd@a+1
  6088  002520  C017  F007         	movff	___flsub@a+2,___fladd@a+2
  6089  002524  C018  F008         	movff	___flsub@a+3,___fladd@a+3
  6090  002528  ECE7  F00B         	call	___fladd	;wreg free
  6091  00252C  C001  F011         	movff	?___fladd,?___flsub
  6092  002530  C002  F012         	movff	?___fladd+1,?___flsub+1
  6093  002534  C003  F013         	movff	?___fladd+2,?___flsub+2
  6094  002538  C004  F014         	movff	?___fladd+3,?___flsub+3
  6095  00253C  0012               	return		;funcret
  6096  00253E                     __end_of___flsub:
  6097                           	opt callstack 0
  6098                           
  6099 ;; *************** function ___fladd *****************
  6100 ;; Defined at:
  6101 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\sprcadd.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;  b               4    0[COMRAM] void 
  6104 ;;  a               4    4[COMRAM] void 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;  grs             1   15[COMRAM] unsigned char 
  6107 ;;  bexp            1   14[COMRAM] unsigned char 
  6108 ;;  aexp            1   13[COMRAM] unsigned char 
  6109 ;;  signs           1   12[COMRAM] unsigned char 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  4    0[COMRAM] unsigned char 
  6112 ;; Registers used:
  6113 ;;		wreg, status,2, status,0
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6119 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;Total ram usage:       16 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; This function calls:
  6126 ;;		Nothing
  6127 ;; This function is called by:
  6128 ;;		_high_isr
  6129 ;;		___flsub
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           	psect	text48
  6134  0017CE                     __ptext48:
  6135                           	opt callstack 0
  6136  0017CE                     ___fladd:
  6137                           	opt callstack 16
  6138                           
  6139                           ;incstack = 0
  6140  0017CE  5004               	movf	___fladd@b+3,w,c
  6141  0017D0  0B80               	andlw	128
  6142  0017D2  6E0D               	movwf	___fladd@signs,c
  6143  0017D4  5004               	movf	___fladd@b+3,w,c
  6144  0017D6  2404               	addwf	___fladd@b+3,w,c
  6145  0017D8  6E0F               	movwf	___fladd@bexp,c
  6146  0017DA  BE03               	btfsc	___fladd@b+2,7,c
  6147  0017DC  800F               	bsf	___fladd@bexp,0,c
  6148  0017DE  500F               	movf	___fladd@bexp,w,c
  6149  0017E0  B4D8               	btfsc	status,2,c
  6150  0017E2  D00D               	goto	i2l2904
  6151  0017E4  280F               	incf	___fladd@bexp,w,c
  6152  0017E6  A4D8               	btfss	status,2,c
  6153  0017E8  D008               	goto	i2l2900
  6154  0017EA  0E00               	movlw	0
  6155  0017EC  6E01               	movwf	___fladd@b,c
  6156  0017EE  0E00               	movlw	0
  6157  0017F0  6E02               	movwf	___fladd@b+1,c
  6158  0017F2  0E00               	movlw	0
  6159  0017F4  6E03               	movwf	___fladd@b+2,c
  6160  0017F6  0E00               	movlw	0
  6161  0017F8  6E04               	movwf	___fladd@b+3,c
  6162  0017FA                     i2l2900:
  6163  0017FA  8E03               	bsf	___fladd@b+2,7,c
  6164  0017FC  D006               	goto	L1
  6165  0017FE                     i2l2904:
  6166  0017FE  0E00               	movlw	0
  6167  001800  6E01               	movwf	___fladd@b,c
  6168  001802  0E00               	movlw	0
  6169  001804  6E02               	movwf	___fladd@b+1,c
  6170  001806  0E00               	movlw	0
  6171  001808  6E03               	movwf	___fladd@b+2,c
  6172  00180A                     L1:
  6173  00180A  0E00               	movlw	0
  6174  00180C  6E04               	movwf	___fladd@b+3,c
  6175  00180E  5008               	movf	___fladd@a+3,w,c
  6176  001810  0B80               	andlw	128
  6177  001812  6E0E               	movwf	___fladd@aexp,c
  6178  001814  500D               	movf	___fladd@signs,w,c
  6179  001816  180E               	xorwf	___fladd@aexp,w,c
  6180  001818  A4D8               	btfss	status,2,c
  6181  00181A  8C0D               	bsf	___fladd@signs,6,c
  6182  00181C  5008               	movf	___fladd@a+3,w,c
  6183  00181E  2408               	addwf	___fladd@a+3,w,c
  6184  001820  6E0E               	movwf	___fladd@aexp,c
  6185  001822  BE07               	btfsc	___fladd@a+2,7,c
  6186  001824  800E               	bsf	___fladd@aexp,0,c
  6187  001826  500E               	movf	___fladd@aexp,w,c
  6188  001828  B4D8               	btfsc	status,2,c
  6189  00182A  D00D               	goto	i2l2928
  6190  00182C  280E               	incf	___fladd@aexp,w,c
  6191  00182E  A4D8               	btfss	status,2,c
  6192  001830  D008               	goto	i2l2924
  6193  001832  0E00               	movlw	0
  6194  001834  6E05               	movwf	___fladd@a,c
  6195  001836  0E00               	movlw	0
  6196  001838  6E06               	movwf	___fladd@a+1,c
  6197  00183A  0E00               	movlw	0
  6198  00183C  6E07               	movwf	___fladd@a+2,c
  6199  00183E  0E00               	movlw	0
  6200  001840  6E08               	movwf	___fladd@a+3,c
  6201  001842                     i2l2924:
  6202  001842  8E07               	bsf	___fladd@a+2,7,c
  6203  001844  D006               	goto	L2
  6204  001846                     i2l2928:
  6205  001846  0E00               	movlw	0
  6206  001848  6E05               	movwf	___fladd@a,c
  6207  00184A  0E00               	movlw	0
  6208  00184C  6E06               	movwf	___fladd@a+1,c
  6209  00184E  0E00               	movlw	0
  6210  001850  6E07               	movwf	___fladd@a+2,c
  6211  001852                     L2:
  6212  001852  0E00               	movlw	0
  6213  001854  6E08               	movwf	___fladd@a+3,c
  6214  001856  500F               	movf	___fladd@bexp,w,c
  6215  001858  5C0E               	subwf	___fladd@aexp,w,c
  6216  00185A  B0D8               	btfsc	status,0,c
  6217  00185C  D022               	goto	i2l2966
  6218  00185E  AC0D               	btfss	___fladd@signs,6,c
  6219  001860  D002               	goto	i2l2936
  6220  001862  0E80               	movlw	128
  6221  001864  1A0D               	xorwf	___fladd@signs,f,c
  6222  001866                     i2l2936:
  6223  001866  C00F  F010         	movff	___fladd@bexp,___fladd@grs
  6224  00186A  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  6225  00186E  C010  F00E         	movff	___fladd@grs,___fladd@aexp
  6226  001872  C001  F010         	movff	___fladd@b,___fladd@grs
  6227  001876  C005  F001         	movff	___fladd@a,___fladd@b
  6228  00187A  C010  F005         	movff	___fladd@grs,___fladd@a
  6229  00187E  C002  F010         	movff	___fladd@b+1,___fladd@grs
  6230  001882  C006  F002         	movff	___fladd@a+1,___fladd@b+1
  6231  001886  C010  F006         	movff	___fladd@grs,___fladd@a+1
  6232  00188A  C003  F010         	movff	___fladd@b+2,___fladd@grs
  6233  00188E  C007  F003         	movff	___fladd@a+2,___fladd@b+2
  6234  001892  C010  F007         	movff	___fladd@grs,___fladd@a+2
  6235  001896  C004  F010         	movff	___fladd@b+3,___fladd@grs
  6236  00189A  C008  F004         	movff	___fladd@a+3,___fladd@b+3
  6237  00189E  C010  F008         	movff	___fladd@grs,___fladd@a+3
  6238  0018A2                     i2l2966:
  6239  0018A2  0E00               	movlw	0
  6240  0018A4  6E10               	movwf	___fladd@grs,c
  6241  0018A6  500F               	movf	___fladd@bexp,w,c
  6242  0018A8  C00E  F009         	movff	___fladd@aexp,??___fladd
  6243  0018AC  6A0A               	clrf	(??___fladd+1)& (0+255),c
  6244  0018AE  5E09               	subwf	??___fladd,f,c
  6245  0018B0  0E00               	movlw	0
  6246  0018B2  5A0A               	subwfb	??___fladd+1,f,c
  6247  0018B4  BE0A               	btfsc	??___fladd+1,7,c
  6248  0018B6  D02C               	goto	i2l1050
  6249  0018B8  500A               	movf	??___fladd+1,w,c
  6250  0018BA  E104               	bnz	i2u203_40
  6251  0018BC  0E1A               	movlw	26
  6252  0018BE  5C09               	subwf	??___fladd,w,c
  6253  0018C0  A0D8               	btfss	status,0,c
  6254  0018C2  D026               	goto	i2l1050
  6255  0018C4                     i2u203_40:
  6256  0018C4  5001               	movf	___fladd@b,w,c
  6257  0018C6  1002               	iorwf	___fladd@b+1,w,c
  6258  0018C8  1003               	iorwf	___fladd@b+2,w,c
  6259  0018CA  1004               	iorwf	___fladd@b+3,w,c
  6260  0018CC  B4D8               	btfsc	status,2,c
  6261  0018CE  D002               	goto	i2u204_40
  6262  0018D0  0E01               	movlw	1
  6263  0018D2  D001               	goto	i2u205_40
  6264  0018D4                     i2u204_40:
  6265  0018D4  0E00               	movlw	0
  6266  0018D6                     i2u205_40:
  6267  0018D6  6E10               	movwf	___fladd@grs,c
  6268  0018D8  0E00               	movlw	0
  6269  0018DA  6E01               	movwf	___fladd@b,c
  6270  0018DC  0E00               	movlw	0
  6271  0018DE  6E02               	movwf	___fladd@b+1,c
  6272  0018E0  0E00               	movlw	0
  6273  0018E2  6E03               	movwf	___fladd@b+2,c
  6274  0018E4  0E00               	movlw	0
  6275  0018E6  6E04               	movwf	___fladd@b+3,c
  6276  0018E8  C00E  F00F         	movff	___fladd@aexp,___fladd@bexp
  6277  0018EC  D015               	goto	i2u208_40
  6278  0018EE                     i2l1051:
  6279  0018EE  A010               	btfss	___fladd@grs,0,c
  6280  0018F0  D005               	goto	i2l2978
  6281  0018F2  90D8               	bcf	status,0,c
  6282  0018F4  3010               	rrcf	___fladd@grs,w,c
  6283  0018F6  0901               	iorlw	1
  6284  0018F8  6E10               	movwf	___fladd@grs,c
  6285  0018FA  D002               	goto	i2l2980
  6286  0018FC                     i2l2978:
  6287  0018FC  90D8               	bcf	status,0,c
  6288  0018FE  3210               	rrcf	___fladd@grs,f,c
  6289  001900                     i2l2980:
  6290  001900  B001               	btfsc	___fladd@b,0,c
  6291  001902  8E10               	bsf	___fladd@grs,7,c
  6292  001904  3404               	rlcf	___fladd@b+3,w,c
  6293  001906  3204               	rrcf	___fladd@b+3,f,c
  6294  001908  3203               	rrcf	___fladd@b+2,f,c
  6295  00190A  3202               	rrcf	___fladd@b+1,f,c
  6296  00190C  3201               	rrcf	___fladd@b,f,c
  6297  00190E  2A0F               	incf	___fladd@bexp,f,c
  6298  001910                     i2l1050:
  6299  001910  500E               	movf	___fladd@aexp,w,c
  6300  001912  5C0F               	subwf	___fladd@bexp,w,c
  6301  001914  A0D8               	btfss	status,0,c
  6302  001916  D7EB               	goto	i2l1051
  6303  001918                     i2u208_40:
  6304  001918  BC0D               	btfsc	___fladd@signs,6,c
  6305  00191A  D028               	goto	i2l3012
  6306  00191C  500F               	movf	___fladd@bexp,w,c
  6307  00191E  A4D8               	btfss	status,2,c
  6308  001920  D009               	goto	i2l2994
  6309  001922  0E00               	movlw	0
  6310  001924  6E01               	movwf	?___fladd,c
  6311  001926  0E00               	movlw	0
  6312  001928  6E02               	movwf	?___fladd+1,c
  6313  00192A  0E00               	movlw	0
  6314  00192C  6E03               	movwf	?___fladd+2,c
  6315  00192E  0E00               	movlw	0
  6316  001930  6E04               	movwf	?___fladd+3,c
  6317  001932  0012               	return	
  6318  001934                     i2l2994:
  6319  001934  5005               	movf	___fladd@a,w,c
  6320  001936  2601               	addwf	___fladd@b,f,c
  6321  001938  5006               	movf	___fladd@a+1,w,c
  6322  00193A  2202               	addwfc	___fladd@b+1,f,c
  6323  00193C  5007               	movf	___fladd@a+2,w,c
  6324  00193E  2203               	addwfc	___fladd@b+2,f,c
  6325  001940  5008               	movf	___fladd@a+3,w,c
  6326  001942  2204               	addwfc	___fladd@b+3,f,c
  6327  001944  A004               	btfss	___fladd@b+3,0,c
  6328  001946  D071               	goto	i2u221_40
  6329  001948  A010               	btfss	___fladd@grs,0,c
  6330  00194A  D005               	goto	i2l3002
  6331  00194C  90D8               	bcf	status,0,c
  6332  00194E  3010               	rrcf	___fladd@grs,w,c
  6333  001950  0901               	iorlw	1
  6334  001952  6E10               	movwf	___fladd@grs,c
  6335  001954  D002               	goto	i2l3004
  6336  001956                     i2l3002:
  6337  001956  90D8               	bcf	status,0,c
  6338  001958  3210               	rrcf	___fladd@grs,f,c
  6339  00195A                     i2l3004:
  6340  00195A  B001               	btfsc	___fladd@b,0,c
  6341  00195C  8E10               	bsf	___fladd@grs,7,c
  6342  00195E  3404               	rlcf	___fladd@b+3,w,c
  6343  001960  3204               	rrcf	___fladd@b+3,f,c
  6344  001962  3203               	rrcf	___fladd@b+2,f,c
  6345  001964  3202               	rrcf	___fladd@b+1,f,c
  6346  001966  3201               	rrcf	___fladd@b,f,c
  6347  001968  2A0F               	incf	___fladd@bexp,f,c
  6348  00196A  D05F               	goto	i2u221_40
  6349  00196C                     i2l3012:
  6350  00196C  5005               	movf	___fladd@a,w,c
  6351  00196E  5C01               	subwf	___fladd@b,w,c
  6352  001970  5006               	movf	___fladd@a+1,w,c
  6353  001972  5802               	subwfb	___fladd@b+1,w,c
  6354  001974  5007               	movf	___fladd@a+2,w,c
  6355  001976  5803               	subwfb	___fladd@b+2,w,c
  6356  001978  5004               	movf	___fladd@b+3,w,c
  6357  00197A  0A80               	xorlw	128
  6358  00197C  6E09               	movwf	??___fladd& (0+255),c
  6359  00197E  5008               	movf	___fladd@a+3,w,c
  6360  001980  0A80               	xorlw	128
  6361  001982  5809               	subwfb	??___fladd& (0+255),w,c
  6362  001984  B0D8               	btfsc	status,0,c
  6363  001986  D025               	goto	i2l3022
  6364  001988  5001               	movf	___fladd@b,w,c
  6365  00198A  5C05               	subwf	___fladd@a,w,c
  6366  00198C  6E09               	movwf	??___fladd& (0+255),c
  6367  00198E  5002               	movf	___fladd@b+1,w,c
  6368  001990  5806               	subwfb	___fladd@a+1,w,c
  6369  001992  6E0A               	movwf	(??___fladd+1)& (0+255),c
  6370  001994  5003               	movf	___fladd@b+2,w,c
  6371  001996  5807               	subwfb	___fladd@a+2,w,c
  6372  001998  6E0B               	movwf	(??___fladd+2)& (0+255),c
  6373  00199A  5004               	movf	___fladd@b+3,w,c
  6374  00199C  5808               	subwfb	___fladd@a+3,w,c
  6375  00199E  6E0C               	movwf	(??___fladd+3)& (0+255),c
  6376  0019A0  0EFF               	movlw	255
  6377  0019A2  2409               	addwf	??___fladd,w,c
  6378  0019A4  6E01               	movwf	___fladd@b,c
  6379  0019A6  0EFF               	movlw	255
  6380  0019A8  200A               	addwfc	??___fladd+1,w,c
  6381  0019AA  6E02               	movwf	___fladd@b+1,c
  6382  0019AC  0EFF               	movlw	255
  6383  0019AE  200B               	addwfc	??___fladd+2,w,c
  6384  0019B0  6E03               	movwf	___fladd@b+2,c
  6385  0019B2  0EFF               	movlw	255
  6386  0019B4  200C               	addwfc	??___fladd+3,w,c
  6387  0019B6  6E04               	movwf	___fladd@b+3,c
  6388  0019B8  0E80               	movlw	128
  6389  0019BA  1A0D               	xorwf	___fladd@signs,f,c
  6390  0019BC  6C10               	negf	___fladd@grs,c
  6391  0019BE  5010               	movf	___fladd@grs,w,c
  6392  0019C0  A4D8               	btfss	status,2,c
  6393  0019C2  D00F               	goto	i2l1066
  6394  0019C4  0E01               	movlw	1
  6395  0019C6  2601               	addwf	___fladd@b,f,c
  6396  0019C8  0E00               	movlw	0
  6397  0019CA  2202               	addwfc	___fladd@b+1,f,c
  6398  0019CC  2203               	addwfc	___fladd@b+2,f,c
  6399  0019CE  2204               	addwfc	___fladd@b+3,f,c
  6400  0019D0  D008               	goto	i2l1066
  6401  0019D2                     i2l3022:
  6402  0019D2  5005               	movf	___fladd@a,w,c
  6403  0019D4  5E01               	subwf	___fladd@b,f,c
  6404  0019D6  5006               	movf	___fladd@a+1,w,c
  6405  0019D8  5A02               	subwfb	___fladd@b+1,f,c
  6406  0019DA  5007               	movf	___fladd@a+2,w,c
  6407  0019DC  5A03               	subwfb	___fladd@b+2,f,c
  6408  0019DE  5008               	movf	___fladd@a+3,w,c
  6409  0019E0  5A04               	subwfb	___fladd@b+3,f,c
  6410  0019E2                     i2l1066:
  6411  0019E2  5001               	movf	___fladd@b,w,c
  6412  0019E4  1002               	iorwf	___fladd@b+1,w,c
  6413  0019E6  1003               	iorwf	___fladd@b+2,w,c
  6414  0019E8  1004               	iorwf	___fladd@b+3,w,c
  6415  0019EA  A4D8               	btfss	status,2,c
  6416  0019EC  D01C               	goto	i2l3046
  6417  0019EE  5010               	movf	___fladd@grs,w,c
  6418  0019F0  A4D8               	btfss	status,2,c
  6419  0019F2  D019               	goto	i2l3046
  6420  0019F4  0E00               	movlw	0
  6421  0019F6  6E01               	movwf	?___fladd,c
  6422  0019F8  0E00               	movlw	0
  6423  0019FA  6E02               	movwf	?___fladd+1,c
  6424  0019FC  0E00               	movlw	0
  6425  0019FE  6E03               	movwf	?___fladd+2,c
  6426  001A00  0E00               	movlw	0
  6427  001A02  6E04               	movwf	?___fladd+3,c
  6428  001A04  0012               	return	
  6429  001A06                     i2l3030:
  6430  001A06  90D8               	bcf	status,0,c
  6431  001A08  3601               	rlcf	___fladd@b,f,c
  6432  001A0A  3602               	rlcf	___fladd@b+1,f,c
  6433  001A0C  3603               	rlcf	___fladd@b+2,f,c
  6434  001A0E  3604               	rlcf	___fladd@b+3,f,c
  6435  001A10  BE10               	btfsc	___fladd@grs,7,c
  6436  001A12  8001               	bsf	___fladd@b,0,c
  6437  001A14  A010               	btfss	___fladd@grs,0,c
  6438  001A16  D002               	goto	i2l3040
  6439  001A18  80D8               	bsf	status,0,c
  6440  001A1A  D001               	goto	L3
  6441  001A1C                     i2l3040:
  6442  001A1C  90D8               	bcf	status,0,c
  6443  001A1E                     L3:
  6444  001A1E  3610               	rlcf	___fladd@grs,f,c
  6445  001A20  500F               	movf	___fladd@bexp,w,c
  6446  001A22  A4D8               	btfss	status,2,c
  6447  001A24  060F               	decf	___fladd@bexp,f,c
  6448  001A26                     i2l3046:
  6449  001A26  AE03               	btfss	___fladd@b+2,7,c
  6450  001A28  D7EE               	goto	i2l3030
  6451  001A2A                     i2u221_40:
  6452  001A2A  0E00               	movlw	0
  6453  001A2C  6E0E               	movwf	___fladd@aexp,c
  6454  001A2E  AE10               	btfss	___fladd@grs,7,c
  6455  001A30  D00B               	goto	i2l1075
  6456  001A32  C010  F009         	movff	___fladd@grs,??___fladd
  6457  001A36  0E7F               	movlw	127
  6458  001A38  1609               	andwf	??___fladd,f,c
  6459  001A3A  B4D8               	btfsc	status,2,c
  6460  001A3C  D003               	goto	i2l1076
  6461  001A3E                     i2u223_40:
  6462  001A3E  0E01               	movlw	1
  6463  001A40  6E0E               	movwf	___fladd@aexp,c
  6464  001A42  D002               	goto	i2l1075
  6465  001A44                     i2l1076:
  6466  001A44  B001               	btfsc	___fladd@b,0,c
  6467  001A46  D7FB               	goto	i2u223_40
  6468  001A48                     i2l1075:
  6469  001A48  500E               	movf	___fladd@aexp,w,c
  6470  001A4A  B4D8               	btfsc	status,2,c
  6471  001A4C  D020               	goto	i2l3066
  6472  001A4E  0E01               	movlw	1
  6473  001A50  2601               	addwf	___fladd@b,f,c
  6474  001A52  0E00               	movlw	0
  6475  001A54  2202               	addwfc	___fladd@b+1,f,c
  6476  001A56  2203               	addwfc	___fladd@b+2,f,c
  6477  001A58  2204               	addwfc	___fladd@b+3,f,c
  6478  001A5A  A004               	btfss	___fladd@b+3,0,c
  6479  001A5C  D018               	goto	i2l3066
  6480  001A5E  C001  F009         	movff	___fladd@b,??___fladd
  6481  001A62  C002  F00A         	movff	___fladd@b+1,??___fladd+1
  6482  001A66  C003  F00B         	movff	___fladd@b+2,??___fladd+2
  6483  001A6A  C004  F00C         	movff	___fladd@b+3,??___fladd+3
  6484  001A6E  340C               	rlcf	??___fladd+3,w,c
  6485  001A70  320C               	rrcf	??___fladd+3,f,c
  6486  001A72  320B               	rrcf	??___fladd+2,f,c
  6487  001A74  320A               	rrcf	??___fladd+1,f,c
  6488  001A76  3209               	rrcf	??___fladd,f,c
  6489  001A78  C009  F001         	movff	??___fladd,___fladd@b
  6490  001A7C  C00A  F002         	movff	??___fladd+1,___fladd@b+1
  6491  001A80  C00B  F003         	movff	??___fladd+2,___fladd@b+2
  6492  001A84  C00C  F004         	movff	??___fladd+3,___fladd@b+3
  6493  001A88  280F               	incf	___fladd@bexp,w,c
  6494  001A8A  A4D8               	btfss	status,2,c
  6495  001A8C  2A0F               	incf	___fladd@bexp,f,c
  6496  001A8E                     i2l3066:
  6497  001A8E  280F               	incf	___fladd@bexp,w,c
  6498  001A90  B4D8               	btfsc	status,2,c
  6499  001A92  D003               	goto	i2u229_40
  6500  001A94  500F               	movf	___fladd@bexp,w,c
  6501  001A96  A4D8               	btfss	status,2,c
  6502  001A98  D00D               	goto	i2l3074
  6503  001A9A                     i2u229_40:
  6504  001A9A  0E00               	movlw	0
  6505  001A9C  6E01               	movwf	___fladd@b,c
  6506  001A9E  0E00               	movlw	0
  6507  001AA0  6E02               	movwf	___fladd@b+1,c
  6508  001AA2  0E00               	movlw	0
  6509  001AA4  6E03               	movwf	___fladd@b+2,c
  6510  001AA6  0E00               	movlw	0
  6511  001AA8  6E04               	movwf	___fladd@b+3,c
  6512  001AAA  500F               	movf	___fladd@bexp,w,c
  6513  001AAC  A4D8               	btfss	status,2,c
  6514  001AAE  D002               	goto	i2l3074
  6515  001AB0  0E00               	movlw	0
  6516  001AB2  6E0D               	movwf	___fladd@signs,c
  6517  001AB4                     i2l3074:
  6518  001AB4  A00F               	btfss	___fladd@bexp,0,c
  6519  001AB6  D002               	goto	i2l3078
  6520  001AB8  8E03               	bsf	___fladd@b+2,7,c
  6521  001ABA  D001               	goto	i2l3080
  6522  001ABC                     i2l3078:
  6523  001ABC  9E03               	bcf	___fladd@b+2,7,c
  6524  001ABE                     i2l3080:
  6525  001ABE  90D8               	bcf	status,0,c
  6526  001AC0  300F               	rrcf	___fladd@bexp,w,c
  6527  001AC2  6E04               	movwf	___fladd@b+3,c
  6528  001AC4  BE0D               	btfsc	___fladd@signs,7,c
  6529  001AC6  8E04               	bsf	___fladd@b+3,7,c
  6530  001AC8  C001  F001         	movff	___fladd@b,?___fladd
  6531  001ACC  C002  F002         	movff	___fladd@b+1,?___fladd+1
  6532  001AD0  C003  F003         	movff	___fladd@b+2,?___fladd+2
  6533  001AD4  C004  F004         	movff	___fladd@b+3,?___fladd+3
  6534  001AD8  0012               	return		;funcret
  6535  001ADA                     __end_of___fladd:
  6536                           	opt callstack 0
  6537                           
  6538                           	psect	rparam
  6539  0000                     
  6540                           	psect	temp
  6541  000062                     btemp:
  6542                           	opt callstack 0
  6543  000062                     	ds	1
  6544  0000                     int$flags	set	btemp
  6545  0000                     wtemp8	set	btemp+1
  6546  0000                     ttemp5	set	btemp+1
  6547  0000                     ttemp6	set	btemp+4
  6548  0000                     ttemp7	set	btemp+8
  6549                           tosu	equ	0xFFF
  6550                           tosh	equ	0xFFE
  6551                           tosl	equ	0xFFD
  6552                           stkptr	equ	0xFFC
  6553                           pclatu	equ	0xFFB
  6554                           pclath	equ	0xFFA
  6555                           pcl	equ	0xFF9
  6556                           tblptru	equ	0xFF8
  6557                           tblptrh	equ	0xFF7
  6558                           tblptrl	equ	0xFF6
  6559                           tablat	equ	0xFF5
  6560                           prodh	equ	0xFF4
  6561                           prodl	equ	0xFF3
  6562                           indf0	equ	0xFEF
  6563                           postinc0	equ	0xFEE
  6564                           postdec0	equ	0xFED
  6565                           preinc0	equ	0xFEC
  6566                           plusw0	equ	0xFEB
  6567                           fsr0h	equ	0xFEA
  6568                           fsr0l	equ	0xFE9
  6569                           wreg	equ	0xFE8
  6570                           indf1	equ	0xFE7
  6571                           postinc1	equ	0xFE6
  6572                           postdec1	equ	0xFE5
  6573                           preinc1	equ	0xFE4
  6574                           plusw1	equ	0xFE3
  6575                           fsr1h	equ	0xFE2
  6576                           fsr1l	equ	0xFE1
  6577                           bsr	equ	0xFE0
  6578                           indf2	equ	0xFDF
  6579                           postinc2	equ	0xFDE
  6580                           postdec2	equ	0xFDD
  6581                           preinc2	equ	0xFDC
  6582                           plusw2	equ	0xFDB
  6583                           fsr2h	equ	0xFDA
  6584                           fsr2l	equ	0xFD9
  6585                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    23
    Data        8
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69      97
    BANK0           128     44      77
    BANK1           256     72     200
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_sprintf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK0[32]), main@command(BANK1[25]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_sprintf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK0[32]), main@command(BANK1[25]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK1[25]), main@lcdDisplay(BANK1[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK1[25]), main@lcdDisplay(BANK1[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    S1601_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK1[25]), main@lcdDisplay(BANK1[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK1[25]), main@lcdDisplay(BANK1[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 6
		 -> STR_6(CODE[6]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[5]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), main@command(BANK1[25]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), main@command(BANK1[25]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), stoa@nuls(COMRAM[7]), main@command(BANK1[25]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    UART_send_string@message	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK1[25]), STR_1(CODE[15]), 

    LCD_write_str@str	PTR unsigned char  size(2) Largest target is 16
		 -> main@lcdDisplay(BANK1[16]), 


Critical Paths under _main in COMRAM

    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _stoa->_fputc
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _atoi->_isspace
    _initLCD->_lcdInst
    _UART_send_string->_UART_send_char
    _UART_Init->___aldiv
    _RTC_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _LCD_write_str->_send_byte
    _LCD_set_cursor->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e
    _I2C_Master_Init->___lldiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->___flsub
    ___flsub->___fladd

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                88    88      0   23602
                                             39 BANK0      5     5      0
                                              0 BANK1     72    72      0
                      _DCMotorAllOff
                  _DCMotorCenterLeft
                 _DCMotorCenterRight
                    _DCMotorLeftBkwd
                     _DCMotorLeftFwd
             _DCMotorLeftRightBkwdON
              _DCMotorLeftRightFwdON
                   _DCMotorRightBkwd
                    _DCMotorRightFwd
                    _I2C_Master_Init
                     _LCD_set_cursor
                      _LCD_write_str
                           _RTC_Init
                          _UART_Init
                     _UART_available
                          _UART_read
                   _UART_send_string
                            _initLCD
                          _portSetup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    10      8   15348
                                             21 BANK0     18    10      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   14124
                                             13 BANK0      8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           47    41      6   13588
                                             65 COMRAM     4     4      0
                                              0 BANK0     13     7      6
                               _atoi
                               _ctoa
                              _fputc
                            _isdigit
                               _stoa
 ---------------------------------------------------------------------------------
 (4) _stoa                                                22    18      4    2980
                                             42 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    5272
                                             60 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    4993
                                             49 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               4     2      2     400
                                             29 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    2235
                                             42 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4    1735
                                             33 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0     158
                                             32 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1795
                                             36 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     259
                                             29 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     371
                                             29 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     512
                                             29 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _portSetup                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     350
                                             33 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _UART_send_string                                     6     4      2     403
                                             30 COMRAM     6     4      2
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (2) _UART_send_char                                       1     1      0      31
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_read                                            1     1      0      34
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_available                                       4     2      2       0
                                             29 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     8      0     659
                                             43 COMRAM     8     8      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                             29 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    1381
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1381
                                             30 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_write_str                                        5     3      2     679
                                             32 COMRAM     5     3      2
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _LCD_set_cursor                                       4     0      4    3239
                                             33 COMRAM     4     0      4
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     158
                                             32 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (7) _send_byte                                            1     1      0     127
                                             31 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (8) _send_nibble                                          1     1      0      65
                                             30 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (9) _pulse_e                                              1     1      0      34
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     542
                                             42 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                             29 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _DCMotorLeftRightFwdON                                0     0      0       0
                     _DCMotorLeftFwd
                    _DCMotorRightFwd
 ---------------------------------------------------------------------------------
 (1) _DCMotorRightFwd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DCMotorLeftFwd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCMotorLeftRightBkwdON                               0     0      0       0
                    _DCMotorLeftBkwd
                   _DCMotorRightBkwd
 ---------------------------------------------------------------------------------
 (1) _DCMotorRightBkwd                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DCMotorLeftBkwd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCMotorCenterRight                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCMotorCenterLeft                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCMotorAllOff                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _low_isr                                             5     5      0       0
                                             24 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _high_isr                                            0     0      0    5607
                            ___fladd
                            ___flsub
 ---------------------------------------------------------------------------------
 (14) ___flsub                                             8     0      8    3041
                                             16 COMRAM     8     0      8
                            ___fladd
 ---------------------------------------------------------------------------------
 (15) ___fladd                                            16     8      8    2566
                                              0 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCMotorAllOff
   _DCMotorCenterLeft
   _DCMotorCenterRight
   _DCMotorLeftBkwd
   _DCMotorLeftFwd
   _DCMotorLeftRightBkwdON
     _DCMotorLeftBkwd
     _DCMotorRightBkwd
   _DCMotorLeftRightFwdON
     _DCMotorLeftFwd
     _DCMotorRightFwd
   _DCMotorRightBkwd
   _DCMotorRightFwd
   _I2C_Master_Init
     ___lldiv
   _LCD_set_cursor
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
   _LCD_write_str
     _send_byte
       _send_nibble
         _pulse_e
   _RTC_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _UART_Init
     ___aldiv
   _UART_available
   _UART_read
   _UART_send_string
     _UART_send_char
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _portSetup
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e
         _isdigit
         _stoa
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)
   ___fladd
   ___flsub
     ___fladd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     48      C8       7       78.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2C      4D       5       60.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      61       1       77.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     176      34        0.0%
DATA                 0      0     176       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Mar 05 16:31:45 2019

        UART_send_string@message 001F                               l91 2480  
                             l92 2492                               l98 24B8  
                    __CFG_CPD$ON 000000                               bsr 000FE0  
            ___wmul@multiplicand 0020                      __CFG_BORV$3 000000  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                   __CFG_CP2$OFF 000000                     __CFG_CP3$OFF 000000  
                    __CFG_OSC$HS 000000                              l246 1116  
                            l450 2086                              l276 1402  
                            l471 1C80                              l548 21F0  
                   __CFG_CPB$OFF 000000                              _pad 2058  
                            wreg 000FE8                     __CFG_LVP$OFF 000000  
                    main@command 0199                     __CFG_WDT$OFF 000000  
                           l1220 1C10                             l4004 179A  
                           l4112 1EFC                             l4104 1ED8  
                           l4108 1EE6                             l4046 22DA  
                           l4056 21A2                             l4080 1E5E  
                           l4048 2302                             l4058 21AE  
                           l4242 1F18                             l4250 1F82  
                           l4402 1208                             l4068 21E2  
                           l4092 1E98                             l4404 1236  
                           l4094 1EA4                             l4086 1E76  
                           l4430 1302                             l4422 1292  
                           l4168 24A4                             l4176 24D0  
                           l4264 2698                             l4424 12BA  
                           l4408 1250                             l4450 13B6  
                           l4442 137A                             l4418 126A  
                           l4354 10CA                             l3820 2574  
                           l3900 1B4E                             l4436 133E  
                           l4428 12F4                             l4372 1158  
                           l4364 1124                             l4348 10A0  
                           l3902 1B54                             l3830 2430  
                           l4382 118C                             l4454 13E4  
                           ?_pad 0032                             l3904 1B7C  
                           l4392 11EE                             l4384 11BA  
                           l4376 1172                             l4368 113E  
                           l3754 1FD0                             l3908 1BB0  
                           l3764 261C                             l3828 2424  
                           l3860 1CAE                             l4388 11D4  
                           l3774 2586                             l3766 2620  
                           l3790 2090                             l3870 1CF2  
                           l3846 1C44                             l3942 14F8  
                           l3784 2070                             l3864 1CCC  
                           l3856 1C96                             l3944 1516  
                           l3882 1AEC                             l3778 259C  
                           l3794 20A8                             l3874 1D0C  
                           l3962 15EE                             l3946 1524  
                           l3892 1B36                             l3884 1AF0  
                           l3788 207E                             l3980 16CA  
                           l3964 160C                             l3798 20D4  
                           l3878 1D24                             l3966 161A  
                           l3898 1B46                             l3994 1774  
                           l3988 1738                             l3998 1780  
                           STR_1 1018                             STR_2 102D  
                           STR_3 102D                             STR_4 102D  
                           STR_5 102D                             STR_6 1027  
                           u3000 1BE2                             u3100 156C  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             u3210 21B2  
                           u3130 1652                             u3140 1654  
                           u3150 1662                             u3400 1FB0  
                           u3080 155C                             u3090 155E  
                           u3260 1EA8                             u3407 1FA6  
                           u3370 1F46                             u2730 1FC8  
                           u2715 2662                             u2716 2664  
                           u2820 25DC                             u3460 10DA  
                           u3365 2130                             u3390 1F7A  
                           u2830 25DE                             u2750 2010  
                           u3295 2294                             u3607 264A  
                           u2920 1CC2                             u3617 2654  
                           u3377 1F3C                             u2850 2570  
                           u3547 1084                             u3397 1F70  
                           u3557 2208                             u2950 1D38  
                           u3567 2220                             u2871 1C24  
                           u3577 2232                             u2970 1B32  
                           u3587 2254                             _RCIE 007CED  
                           _RCIF 007CF5                             u3597 2166  
                           u2990 1BE0                             _TXIE 007CEC  
                           _TXIF 007CF4                             _dbuf 00AD  
                           _atoi 1ADA                             _ctoa 2412  
                           _main 1034                             _keys 1001  
                           _prec 0052                             _nout 004E  
                           pad@i 0039                             pad@p 0036  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           indf0 000FEF                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf2 000FDF  
                           fsr1l 000FE1                             pad@w 003B  
                           fsr2l 000FD9                             _stoa 1C1A  
                           btemp 0062                             prodh 000FF4  
                           prodl 000FF3                             start 0094  
                  __CFG_IESO$OFF 000000                    __CFG_MCLRE$ON 000000  
                   ___param_bank 000000        __size_of_UART_send_string 00AA  
                          ??_pad 0038                 ?_I2C_Master_Init 002B  
               ?_I2C_Master_Wait 0001                 ?_I2C_Master_Stop 0001  
     __end_of_DCMotorCenterRight 27AA                  __end_of___aldiv 1F0E  
                          ?_atoi 0025                            ?_ctoa 003D  
                __end_of___fladd 1ADA                            ?_main 0001  
                __end_of___flsub 253E                            ?_stoa 002B  
                __end_of___lldiv 2202                            i1l307 007A  
                          i1l308 0076                            i2l301 1E3E  
                          _RCREG 000FAE                     vfpfcnvrt@fmt 0082  
                          _SPBRG 000FAF                            _PORTB 000F81  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TXREG 000FAD                    __CFG_PWRT$OFF 000000  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000                    __CFG_WRT3$OFF 000000  
                __end_of_lcdInst 274E                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                     main@keypress 01C4  
                 __CFG_EBTR3$OFF 000000               __size_of_UART_Init 0092  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                  __end_of_initLCD 226C  
                 __CFG_EBTRB$OFF 000000               __size_of_UART_read 0026  
                          _flags 0054                  ??_DCMotorAllOff 001E  
                          _fputc 1FB8                            _fputs 257C  
         __size_of_LCD_write_str 004A                  __end_of_isdigit 25E4  
                          atoi@n 0032                 __end_of_RTC_Init 2612  
                          pad@fp 0032                            atoi@s 0025  
                          _width 0050                            ctoa@c 003F  
                          _putch 2736                            ctoa@w 0040  
                __end_of_isspace 257C                  __end_of_low_isr 0094  
                          tablat 000FF5                  send_nibble@data 001F  
                          plusw1 000FE3                            plusw2 000FDB  
                          stoa@i 0037                            stoa@l 003F  
                          stoa@p 003D                            stoa@s 002D  
                          stoa@w 0039                  __end_of_pulse_e 2666  
                          ttemp5 0063                            ttemp6 0066  
                          ttemp7 006A                            status 000FD8  
                          wtemp8 0063                  __end_of_sprintf 23C2  
                 __CFG_PBADEN$ON 000000          __size_of_LCD_set_cursor 004E  
                __initialization 231E                     __end_of_atoi 1C1A  
                   __end_of_ctoa 2460                     __end_of_main 145C  
                   __end_of_keys 1012                     __end_of_stoa 1D42  
                         ??_atoi 0027                           ??_ctoa 0040  
                         ??_main 00A7                           ??_stoa 002F  
                  __activetblptr 000002                ?_I2C_Master_Start 0001  
              ?_I2C_Master_Write 001F               ??_I2C_Master_Start 001F  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
             ??_I2C_Master_Write 0021                           _ADCON2 000FC0  
                   ?_send_nibble 0001                           ?_fputc 0022  
                         ?_fputs 002B          ??_DCMotorLeftRightFwdON 001E  
                         ?_putch 0001                           _INT0IE 007F94  
                         _INT0IF 007F91                           _INT1IE 007F83  
                         _INT1IF 007F80                           _INT2IE 007F84  
                         _INT2IF 007F81                           _CVRCON 000FB5  
                         i1l3512 004E                           i2l1050 1910  
                         i2l1051 18EE                           i2l1066 19E2  
                         i2l3002 1956                           i2l1075 1A48  
                         i2l1076 1A44                           i2l3004 195A  
                         i2l3012 196C                           i2l3030 1A06  
                         i2l3022 19D2                           i2l3040 1A1C  
                         i2l3046 1A26                           i2l3080 1ABE  
                         i2l3074 1AB4                           i2l3066 1A8E  
                         i2l3078 1ABC                           i2l2900 17FA  
                         i2l2904 17FE                           i2l3480 1DB8  
                         i2l3490 1DFA                           i2l3482 1DBA  
                         i2l2924 1842                           i2l3492 1E2E  
                         i2l3494 1E30                           i2l3478 1D84  
                         i2l2936 1866                           i2l2928 1846  
                         i2l2980 1900                           i2l2966 18A2  
                         i2l2994 1934                           i2l2978 18FC  
                         _SSPADD 000FC8                           _SSPBUF 000FC9  
                 __CFG_XINST$OFF 000000                     vfprintf@cfmt 0093  
              __end_of_UART_Init 2180                 __end_of_high_isr 1E42  
      __size_of_DCMotorRightBkwd 0008                        ??___aldiv 0026  
                      ??___fladd 0009                    _LCD_write_str 24AE  
                         ___wmul 2666                __end_of_UART_read 26B2  
                 __CFG_STVREN$ON 000000                        ??___flsub 0019  
                      ??___lldiv 0026                           clear_0 2344  
                         clear_1 2350                           clear_2 235C  
                      ??_lcdInst 0021                           pad@buf 0034  
                         ctoa@fp 003D                 ??_DCMotorLeftFwd 001E  
                         _strlen 2612                        ??_initLCD 0022  
                         fputc@c 0022                           fputs@c 002F  
                         fputs@i 0030                     __pdataCOMRAM 005A  
                         fputs@s 002B                        ??_isdigit 0020  
                   __mediumconst 0000                        ??_isspace 0020  
                      ??_low_isr 0019                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                         stoa@cp 003B                           stoa@fp 002B  
               __end_of_vfprintf 231E                        ??_pulse_e 001E  
                      ??_sprintf 0046            pulse_e@interruptState 001E  
                     __accesstop 0080          __end_of__initialization 2362  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
                 ?_LCD_write_str 0021                 _UART_send_string 1F0E  
                  __end_of_fputc 2058                    __end_of_fputs 25B4  
                  __end_of_putch 2742                        ?_RTC_Init 0001  
                _key_was_pressed 00AC         __size_of_DCMotorLeftBkwd 0008  
                 main@lcdDisplay 01B2         __size_of_DCMotorRightFwd 0008  
                        ??_fputc 0026                          ??_fputs 002F  
                        ??_putch 0021                       __pbssBANK0 00AC  
                     __pbssBANK1 0100          __size_of_UART_available 0020  
                 _LCD_set_cursor 2460                          ?___wmul 001E  
                UART_send_char@c 001E               __size_of_send_byte 0012  
                     ??_RTC_Init 0021         ??_DCMotorLeftRightBkwdON 001E  
                        ?_strlen 001E                       __rx_buffer 0140  
                        _INTEDG0 007F8E                          _INTEDG1 007F8D  
                 LCD_write_str@i 0024               __size_of_portSetup 0050  
             __size_of_vfpfcnvrt 0372                       __tx_buffer 0100  
        __size_of_UART_send_char 001C                          _SSPCON1 000FC6  
                        _SSPCON2 000FC5                        ?_high_isr 0001  
             _DCMotorCenterRight 27A4                          _SSPSTAT 000FC7  
           __size_of_send_nibble 0016           __end_of_LCD_set_cursor 24AE  
            ?_DCMotorCenterRight 0001                  ??_LCD_write_str 0023  
                        __Hparam 0000                          __Lparam 0000  
               _DCMotorRightBkwd 2794                          ___aldiv 1E42  
                        ___fladd 17CE                          ___flsub 24F8  
                        ___lldiv 2180                  __size_of___wmul 0026  
                      ?_vfprintf 008D                        _CMCONbits 000FB4  
                   __psmallconst 1000                          __pcinit 231E  
                        __ramtop 1000                          _lcdInst 2742  
                        __ptext0 1034                          __ptext1 2370  
                        __ptext2 22C8                          __ptext3 145C  
                        __ptext4 1C1A                          __ptext5 2412  
                        __ptext6 2058                          __ptext7 2612  
                        __ptext8 257C                          __ptext9 1FB8  
              UART_send_string@i 0023             ??_DCMotorCenterRight 001E  
                __size_of_strlen 002A                          _initLCD 2202  
                   __size_of_pad 0096                          _isdigit 25B4  
               ___aldiv@dividend 001E                          _isspace 253E  
                        _low_isr 0018         __size_of_I2C_Master_Init 005C  
       __size_of_I2C_Master_Wait 0012         __size_of_I2C_Master_Stop 0008  
                        atoi@neg 002B                          _pulse_e 263C  
              ??_DCMotorLeftBkwd 001E                          _sprintf 2370  
                     ??_high_isr 0019                   __pintcode_body 1D42  
           end_of_initialization 2362            __end_of_DCMotorAllOff 2736  
          __end_of_LCD_SIZE_HORZ 1018                __end_of_send_byte 2728  
          __end_of_LCD_SIZE_VERT 1017   __size_of_DCMotorLeftRightFwdON 000A  
  __end_of_DCMotorLeftRightFwdON 2762                          fputc@fp 0024  
               LCD_write_str@str 0021                    __Lmediumconst 0000  
                        int_func 1D42                          fputs@fp 002D  
                ?_LCD_set_cursor 0022                ??_DCMotorRightFwd 001E  
      __size_of_I2C_Master_Start 0008        __size_of_I2C_Master_Write 000A  
                ___lldiv@divisor 0022                  ___lldiv@counter 002A  
              __end_of_portSetup 2412                __end_of_vfpfcnvrt 17CE  
                      _RCSTAbits 000FAB                 ___aldiv@quotient 0028  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                       ??_vfprintf 0046  
                        strlen@a 0020                          strlen@s 001E  
                      _UART_Init 20EE                  __rx_buffer_head 0059  
                      _UART_read 268C  __size_of_DCMotorLeftRightBkwdON 000A  
                      _PORTDbits 000F83                  __rx_buffer_tail 0058  
                    ___fladd@grs 0010                        _TRISCbits 000F94  
       __end_of_UART_send_string 1FB8                   _UART_available 26B2  
                      _TXSTAbits 000FAC                    send_byte@data 0020  
                    vfpfcnvrt@ap 0084                      vfpfcnvrt@cp 0086  
                    vfpfcnvrt@fp 0080                   __end_of___wmul 268C  
                     ?_UART_Init 0001                    __pidataCOMRAM 276C  
                     ?_UART_read 0001                __size_of_RTC_Init 002E  
                 __end_of_strlen 263C              start_initialization 231E  
                 _UART_send_char 26D2                      __end_of_pad 20EE  
         __end_of_UART_available 26D2                LCD_set_cursor@row 0022  
         _DCMotorLeftRightBkwdON 2762                ??_I2C_Master_Init 002F  
              ??_I2C_Master_Wait 001E                ??_I2C_Master_Stop 001F  
                    vfprintf@fmt 008F                         ??___wmul 0022  
           LCD_set_cursor@column 0024         I2C_Master_Init@clockFreq 002B  
               __CFG_LPT1OSC$OFF 000000                         ??_strlen 0020  
                      ___fladd@a 0005                        ___fladd@b 0001  
         __end_of_UART_send_char 26EE                      __pbssCOMRAM 0046  
                      ___flsub@a 0015                        ___flsub@b 0011  
                  __pcstackBANK0 0080                    __pcstackBANK1 0180  
       __end_of_DCMotorRightBkwd 279C                  ?_UART_available 001E  
        __size_of_DCMotorLeftFwd 0008                __size_of_high_isr 1E3A  
                      _atoi$1580 0031                        _atoi$1581 002F  
                      _atoi$1579 002D                 _I2C_Master_Start 277C  
               _I2C_Master_Write 274E                __CFG_CCP2MX$PORTC 000000  
                      __pintcode 0008                         ?___aldiv 001E  
                       ?___fladd 0001                         ?___flsub 0011  
                       ?___lldiv 001E                        _direction 0061  
                    __pintcodelo 0018                      ??_UART_Init 002C  
                _DCMotorLeftBkwd 279C              main@commandReceived 01C5  
                       ?_lcdInst 0001                      ??_UART_read 001E  
                      _distanceL 004A                        _distanceR 0046  
              _DCMotorCenterLeft 27AA                __size_of_vfprintf 0056  
                       ?_initLCD 0001                      __smallconst 1000  
                ?_UART_send_char 0001                         ?_isdigit 001E  
             ?_DCMotorCenterLeft 0001                         ?_isspace 001E  
                       ?_low_isr 0001                  _DCMotorRightFwd 2784  
          main@uart_char_to_send 0180                    ??_send_nibble 001F  
                       ?_pulse_e 0001                 ??_LCD_set_cursor 0026  
                       ?_sprintf 0095                   __size_of_fputc 00A0  
                 __size_of_fputs 0038              ??_DCMotorCenterLeft 001E  
                 __size_of_putch 000C                  ___aldiv@divisor 0022  
                ___aldiv@counter 0026                   ___wmul@product 0022  
                       _LATAbits 000F89                         _LATDbits 000F8C  
                       _IPR1bits 000F9F                         _PIE1bits 000F9D  
                     UART_read@c 001E                        _send_byte 2716  
                 _LCD_LINE1_ADDR 1015                   _LCD_LINE2_ADDR 1014  
                 _LCD_LINE3_ADDR 1013                   _LCD_LINE4_ADDR 1012  
                       i2u203_40 18C4                         i2u204_40 18D4  
                       i2u221_40 1A2A                         i2u205_40 18D6  
                       i2u223_40 1A3E                         i2u208_40 1918  
                       i2u229_40 1A9A            __end_of_LCD_write_str 24F8  
                       _RCONbits 000FD0                 __CFG_WDTPS$32768 000000  
              UART_Init@baudRate 0030        __end_of_DCMotorCenterLeft 27B0  
                      _portSetup 23C2                        _vfpfcnvrt 145C  
                       _RTC_Init 25E4                       _ADCON2bits 000FC0  
              ___wmul@multiplier 001E                  __tx_buffer_head 0057  
                __tx_buffer_tail 0056      __size_of_DCMotorCenterRight 0006  
                      main@index 01C6                     _isspace$1597 0024  
                     vfpfcnvrt@c 0088                        copy_data0 2332  
              ?_UART_send_string 001F           __end_of_LCD_LINE1_ADDR 1016  
             ??_UART_send_string 0021           __end_of_LCD_LINE2_ADDR 1015  
         __end_of_LCD_LINE3_ADDR 1014           __end_of_LCD_LINE4_ADDR 1013  
            __end_of_send_nibble 2704            _DCMotorLeftRightFwdON 2758  
                     ?_send_byte 0001                         __Hrparam 0000  
        __end_of_DCMotorLeftBkwd 27A4                       vfprintf@ap 0091  
                       __Lrparam 0000                       vfprintf@fp 008D  
             __CFG_BOREN$SBORDIS 000000                 __size_of___aldiv 00CC  
               __size_of___fladd 030C                       ?_portSetup 0001  
               __size_of___flsub 0046                 __size_of___lldiv 0082  
                     ?_vfpfcnvrt 0080           __size_of_DCMotorAllOff 000E  
        __end_of_DCMotorRightFwd 278C                 __size_of_lcdInst 000C  
                     sprintf@fmt 0097                  _I2C_Master_Init 226C  
               __size_of_initLCD 006A                  _I2C_Master_Wait 2704  
                _I2C_Master_Stop 2774                 __size_of_isdigit 0030  
               __size_of_isspace 003E                 __size_of_low_isr 007C  
                       __ptext10 2736                         __ptext11 1ADA  
                       __ptext20 26B2                         __ptext12 253E  
                       __ptext21 20EE                         __ptext13 25B4  
                       __ptext30 2742                         __ptext22 1E42  
                       __ptext14 2666                         __ptext31 2716  
                       __ptext23 25E4                         __ptext15 23C2  
                       __ptext40 2794                         __ptext32 26EE  
                       __ptext24 274E                         __ptext16 2202  
                       __ptext41 279C                         __ptext33 263C  
                       __ptext25 2774                         __ptext17 1F0E  
                       __ptext42 27A4                         __ptext34 226C  
                       __ptext26 277C                         __ptext18 26D2  
                       __ptext43 27AA                         __ptext35 2180  
                       __ptext27 2704                         __ptext19 268C  
                       __ptext44 2728                         __ptext36 2758  
                       __ptext28 24AE                         __ptext37 2784  
                       __ptext29 2460                         __ptext38 278C  
                       __ptext47 24F8                         __ptext39 2762  
                       __ptext48 17CE          ?_DCMotorLeftRightBkwdON 0001  
                 _DCMotorLeftFwd 278C                         _high_isr 0008  
               __size_of_pulse_e 002A                 __size_of_sprintf 0052  
                  __size_of_atoi 0140                    __size_of_ctoa 004E  
                  __size_of_main 0428                    __size_of_stoa 0128  
                      stoa@F1136 005A                         int$flags 0062  
                       _vfprintf 22C8       __size_of_DCMotorCenterLeft 0006  
    I2C_Master_Write@byteToWrite 001F                        putch@data 0021  
                 _vfpfcnvrt$1122 0089                   _vfpfcnvrt$1123 008B  
       __end_of_I2C_Master_Start 2784         __end_of_I2C_Master_Write 2758  
                     _INTCONbits 000FF2                 ??_UART_available 0020  
 __end_of_DCMotorLeftRightBkwdON 276C           __end_of_DCMotorLeftFwd 2794  
                       isdigit@c 001E                ?_DCMotorRightBkwd 0001  
                    _send_nibble 26EE                         intlevel1 0000  
                       intlevel2 0000                        sprintf@ap 009F  
             ??_DCMotorRightBkwd 001E                    _DCMotorAllOff 2728  
                  _LCD_SIZE_HORZ 1017                    _LCD_SIZE_VERT 1016  
                       isspace@c 001E                 ___lldiv@dividend 001E  
         ?_DCMotorLeftRightFwdON 0001                      ??_send_byte 0020  
               ?_DCMotorLeftBkwd 0001                 ??_UART_send_char 001E  
                    ??_portSetup 001E          __end_of_I2C_Master_Init 22C8  
        __end_of_I2C_Master_Wait 2716          __end_of_I2C_Master_Stop 277C  
                    ??_vfpfcnvrt 0042                      lcdInst@data 0021  
                       stoa@nuls 0030                 ?_DCMotorRightFwd 0001  
                       sprintf@f 00A1                         sprintf@s 0095  
               ___lldiv@quotient 0026                     ___aldiv@sign 0027  
                ?_DCMotorLeftFwd 0001                      _SSPCON1bits 000FC6  
                    _SSPCON2bits 000FC5                    ___fladd@signs 000D  
                 ?_DCMotorAllOff 0001                     ___fladd@aexp 000E  
                   ___fladd@bexp 000F  
