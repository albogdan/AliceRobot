

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Feb 25 23:15:10 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,inline
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63  0000                     
    64                           ; Version 2.05
    65                           ; Generated 20/12/2018 GMT
    66                           ; 
    67                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F4620 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     
    99                           	psect	idataCOMRAM
   100  0024BC                     __pidataCOMRAM:
   101                           	opt callstack 0
   102                           
   103                           ;initializer for stoa@F1136
   104  0024BC  28                 	db	40
   105  0024BD  6E                 	db	110
   106  0024BE  75                 	db	117
   107  0024BF  6C                 	db	108
   108  0024C0  6C                 	db	108
   109  0024C1  29                 	db	41
   110  0024C2  00                 	db	0
   111                           
   112                           ;initializer for _direction
   113  0024C3  46                 	db	70
   114                           
   115                           	psect	smallconst
   116  001000                     __psmallconst:
   117                           	opt callstack 0
   118  001000  00                 	db	0
   119  001001                     _keys:
   120                           	opt callstack 0
   121  001001  31                 	db	49
   122  001002  32                 	db	50
   123  001003  33                 	db	51
   124  001004  41                 	db	65
   125  001005  34                 	db	52
   126  001006  35                 	db	53
   127  001007  36                 	db	54
   128  001008  42                 	db	66
   129  001009  37                 	db	55
   130  00100A  38                 	db	56
   131  00100B  39                 	db	57
   132  00100C  43                 	db	67
   133  00100D  2A                 	db	42
   134  00100E  30                 	db	48
   135  00100F  23                 	db	35
   136  001010  44                 	db	68
   137  001011  00                 	db	0
   138  001012                     __end_of_keys:
   139                           	opt callstack 0
   140  001012  50                 	db	80
   141  001013                     __end_of_LCD_LINE4_ADDR:
   142                           	opt callstack 0
   143  001013  10                 	db	16
   144  001014                     __end_of_LCD_LINE3_ADDR:
   145                           	opt callstack 0
   146  001014  40                 	db	64
   147  001015                     __end_of_LCD_LINE2_ADDR:
   148                           	opt callstack 0
   149  001015                     _LCD_LINE1_ADDR:
   150                           	opt callstack 0
   151  001015  00                 	db	0
   152  001016                     __end_of_LCD_LINE1_ADDR:
   153                           	opt callstack 0
   154  001016                     _LCD_SIZE_VERT:
   155                           	opt callstack 0
   156  001016  04                 	db	4
   157  001017                     __end_of_LCD_SIZE_VERT:
   158                           	opt callstack 0
   159  001017                     _LCD_SIZE_HORZ:
   160                           	opt callstack 0
   161  001017  10                 	db	16
   162  001018                     __end_of_LCD_SIZE_HORZ:
   163                           	opt callstack 0
   164  0000                     _LATAbits	set	3977
   165  0000                     _IPR1bits	set	3999
   166  0000                     _PIE1bits	set	3997
   167  0000                     _RCSTAbits	set	4011
   168  0000                     _TXSTAbits	set	4012
   169  0000                     _SPBRG	set	4015
   170  0000                     _RCONbits	set	4048
   171  0000                     _ADCON2	set	4032
   172  0000                     _CMCONbits	set	4020
   173  0000                     _CVRCON	set	4021
   174  0000                     _ADCON2bits	set	4032
   175  0000                     _ADCON1	set	4033
   176  0000                     _ADCON0	set	4034
   177  0000                     _TRISD	set	3989
   178  0000                     _TRISC	set	3988
   179  0000                     _TRISB	set	3987
   180  0000                     _TRISA	set	3986
   181  0000                     _LATE	set	3981
   182  0000                     _LATC	set	3979
   183  0000                     _LATB	set	3978
   184  0000                     _LATA	set	3977
   185  0000                     _TXREG	set	4013
   186  0000                     _RCREG	set	4014
   187  0000                     _PORTDbits	set	3971
   188  0000                     _PORTB	set	3969
   189  0000                     _LATD	set	3980
   190  0000                     _LATDbits	set	3980
   191  0000                     _INTCONbits	set	4082
   192  0000                     _SSPBUF	set	4041
   193  0000                     _SSPCON2bits	set	4037
   194  0000                     _SSPCON1	set	4038
   195  0000                     _SSPADD	set	4040
   196  0000                     _TRISCbits	set	3988
   197  0000                     _SSPCON1bits	set	4038
   198  0000                     _SSPCON2	set	4037
   199  0000                     _SSPSTAT	set	4039
   200  0000                     _INTEDG1	set	32653
   201  0000                     _INTEDG0	set	32654
   202  0000                     _TXIF	set	31988
   203  0000                     _TXIE	set	31980
   204  0000                     _RCIF	set	31989
   205  0000                     _RCIE	set	31981
   206  0000                     _INT1IE	set	32643
   207  0000                     _INT1IF	set	32640
   208  0000                     _INT0IF	set	32657
   209  0000                     _INT0IE	set	32660
   210  001018                     STR_4:
   211  001018  4D                 	db	77	;'M'
   212  001019  6F                 	db	111	;'o'
   213  00101A  76                 	db	118	;'v'
   214  00101B  65                 	db	101	;'e'
   215  00101C  20                 	db	32
   216  00101D  52                 	db	82	;'R'
   217  00101E  69                 	db	105	;'i'
   218  00101F  67                 	db	103	;'g'
   219  001020  68                 	db	104	;'h'
   220  001021  74                 	db	116	;'t'
   221  001022  20                 	db	32
   222  001023  46                 	db	70	;'F'
   223  001024  77                 	db	119	;'w'
   224  001025  64                 	db	100	;'d'
   225  001026  20                 	db	32
   226  001027  20                 	db	32
   227  001028  20                 	db	32
   228  001029  00                 	db	0
   229  00102A                     STR_8:
   230  00102A  4D                 	db	77	;'M'
   231  00102B  6F                 	db	111	;'o'
   232  00102C  76                 	db	118	;'v'
   233  00102D  65                 	db	101	;'e'
   234  00102E  20                 	db	32
   235  00102F  52                 	db	82	;'R'
   236  001030  69                 	db	105	;'i'
   237  001031  67                 	db	103	;'g'
   238  001032  68                 	db	104	;'h'
   239  001033  74                 	db	116	;'t'
   240  001034  20                 	db	32
   241  001035  42                 	db	66	;'B'
   242  001036  6B                 	db	107	;'k'
   243  001037  77                 	db	119	;'w'
   244  001038  64                 	db	100	;'d'
   245  001039  20                 	db	32
   246  00103A  20                 	db	32
   247  00103B  00                 	db	0
   248  00103C                     STR_5:
   249  00103C  53                 	db	83	;'S'
   250  00103D  74                 	db	116	;'t'
   251  00103E  6F                 	db	111	;'o'
   252  00103F  70                 	db	112	;'p'
   253  001040  20                 	db	32
   254  001041  46                 	db	70	;'F'
   255  001042  77                 	db	119	;'w'
   256  001043  64                 	db	100	;'d'
   257  001044  20                 	db	32
   258  001045  6D                 	db	109	;'m'
   259  001046  6F                 	db	111	;'o'
   260  001047  76                 	db	118	;'v'
   261  001048  65                 	db	101	;'e'
   262  001049  20                 	db	32
   263  00104A  20                 	db	32
   264  00104B  20                 	db	32
   265  00104C  00                 	db	0
   266  00104D                     STR_9:
   267  00104D  53                 	db	83	;'S'
   268  00104E  74                 	db	116	;'t'
   269  00104F  6F                 	db	111	;'o'
   270  001050  70                 	db	112	;'p'
   271  001051  20                 	db	32
   272  001052  42                 	db	66	;'B'
   273  001053  6B                 	db	107	;'k'
   274  001054  77                 	db	119	;'w'
   275  001055  64                 	db	100	;'d'
   276  001056  20                 	db	32
   277  001057  6D                 	db	109	;'m'
   278  001058  6F                 	db	111	;'o'
   279  001059  76                 	db	118	;'v'
   280  00105A  65                 	db	101	;'e'
   281  00105B  20                 	db	32
   282  00105C  20                 	db	32
   283  00105D  00                 	db	0
   284  00105E                     STR_2:
   285  00105E  4D                 	db	77	;'M'
   286  00105F  6F                 	db	111	;'o'
   287  001060  76                 	db	118	;'v'
   288  001061  65                 	db	101	;'e'
   289  001062  20                 	db	32
   290  001063  4C                 	db	76	;'L'
   291  001064  2B                 	db	43
   292  001065  52                 	db	82	;'R'
   293  001066  20                 	db	32
   294  001067  46                 	db	70	;'F'
   295  001068  77                 	db	119	;'w'
   296  001069  64                 	db	100	;'d'
   297  00106A  20                 	db	32
   298  00106B  20                 	db	32
   299  00106C  20                 	db	32
   300  00106D  00                 	db	0
   301  00106E                     STR_3:
   302  00106E  4D                 	db	77	;'M'
   303  00106F  6F                 	db	111	;'o'
   304  001070  76                 	db	118	;'v'
   305  001071  65                 	db	101	;'e'
   306  001072  20                 	db	32
   307  001073  4C                 	db	76	;'L'
   308  001074  65                 	db	101	;'e'
   309  001075  66                 	db	102	;'f'
   310  001076  74                 	db	116	;'t'
   311  001077  20                 	db	32
   312  001078  46                 	db	70	;'F'
   313  001079  77                 	db	119	;'w'
   314  00107A  64                 	db	100	;'d'
   315  00107B  20                 	db	32
   316  00107C  20                 	db	32
   317  00107D  00                 	db	0
   318  00107E                     STR_6:
   319  00107E  4D                 	db	77	;'M'
   320  00107F  6F                 	db	111	;'o'
   321  001080  76                 	db	118	;'v'
   322  001081  65                 	db	101	;'e'
   323  001082  20                 	db	32
   324  001083  4C                 	db	76	;'L'
   325  001084  2B                 	db	43
   326  001085  52                 	db	82	;'R'
   327  001086  20                 	db	32
   328  001087  42                 	db	66	;'B'
   329  001088  6B                 	db	107	;'k'
   330  001089  77                 	db	119	;'w'
   331  00108A  64                 	db	100	;'d'
   332  00108B  20                 	db	32
   333  00108C  20                 	db	32
   334  00108D  00                 	db	0
   335  00108E                     STR_7:
   336  00108E  4D                 	db	77	;'M'
   337  00108F  6F                 	db	111	;'o'
   338  001090  76                 	db	118	;'v'
   339  001091  65                 	db	101	;'e'
   340  001092  20                 	db	32
   341  001093  4C                 	db	76	;'L'
   342  001094  65                 	db	101	;'e'
   343  001095  66                 	db	102	;'f'
   344  001096  74                 	db	116	;'t'
   345  001097  20                 	db	32
   346  001098  42                 	db	66	;'B'
   347  001099  6B                 	db	107	;'k'
   348  00109A  77                 	db	119	;'w'
   349  00109B  64                 	db	100	;'d'
   350  00109C  20                 	db	32
   351  00109D  00                 	db	0
   352  00109E                     STR_10:
   353  00109E  4D                 	db	77	;'M'
   354  00109F  69                 	db	105	;'i'
   355  0010A0  64                 	db	100	;'d'
   356  0010A1  20                 	db	32
   357  0010A2  6D                 	db	109	;'m'
   358  0010A3  6F                 	db	111	;'o'
   359  0010A4  74                 	db	116	;'t'
   360  0010A5  6F                 	db	111	;'o'
   361  0010A6  72                 	db	114	;'r'
   362  0010A7  20                 	db	32
   363  0010A8  6C                 	db	108	;'l'
   364  0010A9  65                 	db	101	;'e'
   365  0010AA  66                 	db	102	;'f'
   366  0010AB  74                 	db	116	;'t'
   367  0010AC  20                 	db	32
   368  0010AD  00                 	db	0
   369  0010AE                     STR_11:
   370  0010AE  4D                 	db	77	;'M'
   371  0010AF  69                 	db	105	;'i'
   372  0010B0  64                 	db	100	;'d'
   373  0010B1  20                 	db	32
   374  0010B2  6D                 	db	109	;'m'
   375  0010B3  6F                 	db	111	;'o'
   376  0010B4  74                 	db	116	;'t'
   377  0010B5  6F                 	db	111	;'o'
   378  0010B6  72                 	db	114	;'r'
   379  0010B7  20                 	db	32
   380  0010B8  72                 	db	114	;'r'
   381  0010B9  69                 	db	105	;'i'
   382  0010BA  67                 	db	103	;'g'
   383  0010BB  68                 	db	104	;'h'
   384  0010BC  74                 	db	116	;'t'
   385  0010BD  00                 	db	0
   386  0010BE                     STR_1:
   387  0010BE  49                 	db	73	;'I'
   388  0010BF  6E                 	db	110	;'n'
   389  0010C0  69                 	db	105	;'i'
   390  0010C1  74                 	db	116	;'t'
   391  0010C2  20                 	db	32
   392  0010C3  63                 	db	99	;'c'
   393  0010C4  6F                 	db	111	;'o'
   394  0010C5  6D                 	db	109	;'m'
   395  0010C6  70                 	db	112	;'p'
   396  0010C7  6C                 	db	108	;'l'
   397  0010C8  65                 	db	101	;'e'
   398  0010C9  74                 	db	116	;'t'
   399  0010CA  65                 	db	101	;'e'
   400  0010CB  0A                 	db	10
   401  0010CC  00                 	db	0
   402  0010CD                     STR_12:
   403  0010CD  4D                 	db	77	;'M'
   404  0010CE  69                 	db	105	;'i'
   405  0010CF  64                 	db	100	;'d'
   406  0010D0  20                 	db	32
   407  0010D1  6D                 	db	109	;'m'
   408  0010D2  6F                 	db	111	;'o'
   409  0010D3  74                 	db	116	;'t'
   410  0010D4  6F                 	db	111	;'o'
   411  0010D5  72                 	db	114	;'r'
   412  0010D6  20                 	db	32
   413  0010D7  73                 	db	115	;'s'
   414  0010D8  74                 	db	116	;'t'
   415  0010D9  6F                 	db	111	;'o'
   416  0010DA  70                 	db	112	;'p'
   417  0010DB  00                 	db	0
   418  0010DC                     STR_17:
   419  0010DC  25                 	db	37
   420  0010DD  63                 	db	99	;'c'
   421  0010DE  25                 	db	37
   422  0010DF  63                 	db	99	;'c'
   423  0010E0  0A                 	db	10
   424  0010E1  00                 	db	0
   425  0010E2                     STR_13:
   426  0010E2  25                 	db	37
   427  0010E3  2E                 	db	46
   428  0010E4  2A                 	db	42
   429  0010E5  73                 	db	115	;'s'
   430  0010E6  00                 	db	0
   431  0000                     
   432                           ; #config settings
   433  0010E7  00                 	db	0	; dummy byte at the end
   434  0000                     
   435                           	psect	cinit
   436  002088                     __pcinit:
   437                           	opt callstack 0
   438  002088                     start_initialization:
   439                           	opt callstack 0
   440  002088                     __initialization:
   441                           	opt callstack 0
   442                           
   443                           ; Initialize objects allocated to COMRAM (8 bytes)
   444                           ; load TBLPTR registers with __pidataCOMRAM
   445  002088  0EBC               	movlw	low __pidataCOMRAM
   446  00208A  6EF6               	movwf	tblptrl,c
   447  00208C  0E24               	movlw	high __pidataCOMRAM
   448  00208E  6EF7               	movwf	tblptrh,c
   449  002090  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   450  002092  6EF8               	movwf	tblptru,c
   451  002094  EE00  F06A         	lfsr	0,__pdataCOMRAM
   452  002098  EE10 F008          	lfsr	1,8
   453  00209C                     copy_data0:
   454  00209C  0009               	tblrd		*+
   455  00209E  CFF5 FFEE          	movff	tablat,postinc0
   456  0020A2  50E5               	movf	postdec1,w,c
   457  0020A4  50E1               	movf	fsr1l,w,c
   458  0020A6  E1FA               	bnz	copy_data0
   459                           
   460                           ; Clear objects allocated to BANK1 (128 bytes)
   461  0020A8  EE01  F000         	lfsr	0,__pbssBANK1
   462  0020AC  0E80               	movlw	128
   463  0020AE                     clear_0:
   464  0020AE  6AEE               	clrf	postinc0,c
   465  0020B0  06E8               	decf	wreg,f,c
   466  0020B2  E1FD               	bnz	clear_0
   467                           
   468                           ; Clear objects allocated to BANK0 (33 bytes)
   469  0020B4  EE00  F0C8         	lfsr	0,__pbssBANK0
   470  0020B8  0E21               	movlw	33
   471  0020BA                     clear_1:
   472  0020BA  6AEE               	clrf	postinc0,c
   473  0020BC  06E8               	decf	wreg,f,c
   474  0020BE  E1FD               	bnz	clear_1
   475                           
   476                           ; Clear objects allocated to COMRAM (20 bytes)
   477  0020C0  EE00  F056         	lfsr	0,__pbssCOMRAM
   478  0020C4  0E14               	movlw	20
   479  0020C6                     clear_2:
   480  0020C6  6AEE               	clrf	postinc0,c
   481  0020C8  06E8               	decf	wreg,f,c
   482  0020CA  E1FD               	bnz	clear_2
   483  0020CC                     end_of_initialization:
   484                           	opt callstack 0
   485  0020CC                     __end_of__initialization:
   486                           	opt callstack 0
   487  0020CC  9072               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   488  0020CE  9272               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   489  0020D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   490  0020D2  6EF8               	movwf	tblptru,c
   491  0020D4  0100               	movlb	0
   492  0020D6  EF74  F008         	goto	_main	;jump to C main() function
   493                           
   494                           	psect	bssCOMRAM
   495  000056                     __pbssCOMRAM:
   496                           	opt callstack 0
   497  000056                     _distanceR:
   498                           	opt callstack 0
   499  000056                     	ds	4
   500  00005A                     _distanceL:
   501                           	opt callstack 0
   502  00005A                     	ds	4
   503  00005E                     _nout:
   504                           	opt callstack 0
   505  00005E                     	ds	2
   506  000060                     _width:
   507                           	opt callstack 0
   508  000060                     	ds	2
   509  000062                     _prec:
   510                           	opt callstack 0
   511  000062                     	ds	2
   512  000064                     _flags:
   513                           	opt callstack 0
   514  000064                     	ds	2
   515  000066                     __tx_buffer_tail:
   516                           	opt callstack 0
   517  000066                     	ds	1
   518  000067                     __tx_buffer_head:
   519                           	opt callstack 0
   520  000067                     	ds	1
   521  000068                     __rx_buffer_tail:
   522                           	opt callstack 0
   523  000068                     	ds	1
   524  000069                     __rx_buffer_head:
   525                           	opt callstack 0
   526  000069                     	ds	1
   527                           
   528                           	psect	dataCOMRAM
   529  00006A                     __pdataCOMRAM:
   530                           	opt callstack 0
   531  00006A                     stoa@F1136:
   532                           	opt callstack 0
   533  00006A                     	ds	7
   534  000071                     _direction:
   535                           	opt callstack 0
   536  000071                     	ds	1
   537                           
   538                           	psect	bssBANK0
   539  0000C8                     __pbssBANK0:
   540                           	opt callstack 0
   541  0000C8                     _key_was_pressed:
   542                           	opt callstack 0
   543  0000C8                     	ds	1
   544  0000C9                     _dbuf:
   545                           	opt callstack 0
   546  0000C9                     	ds	32
   547                           
   548                           	psect	bssBANK1
   549  000100                     __pbssBANK1:
   550                           	opt callstack 0
   551  000100                     __tx_buffer:
   552                           	opt callstack 0
   553  000100                     	ds	64
   554  000140                     __rx_buffer:
   555                           	opt callstack 0
   556  000140                     	ds	64
   557                           
   558                           	psect	cstackBANK0
   559  000080                     __pcstackBANK0:
   560                           	opt callstack 0
   561  000080                     main@uart_char_to_send:
   562                           	opt callstack 0
   563                           
   564                           ; 25 bytes @ 0x0
   565  000080                     	ds	25
   566  000099                     main@command:
   567                           	opt callstack 0
   568                           
   569                           ; 25 bytes @ 0x19
   570  000099                     	ds	25
   571  0000B2                     main@lcdDisplay:
   572                           	opt callstack 0
   573                           
   574                           ; 16 bytes @ 0x32
   575  0000B2                     	ds	18
   576  0000C4                     main@keypress:
   577                           	opt callstack 0
   578                           
   579                           ; 1 bytes @ 0x44
   580  0000C4                     	ds	1
   581  0000C5                     main@commandReceived:
   582                           	opt callstack 0
   583                           
   584                           ; 1 bytes @ 0x45
   585  0000C5                     	ds	1
   586  0000C6                     main@index:
   587                           	opt callstack 0
   588                           
   589                           ; 2 bytes @ 0x46
   590  0000C6                     	ds	2
   591                           
   592                           	psect	cstackCOMRAM
   593  000001                     __pcstackCOMRAM:
   594                           	opt callstack 0
   595  000001                     ??_low_isr:
   596  000001                     
   597                           ; 1 bytes @ 0x0
   598  000001                     	ds	5
   599  000006                     ??_I2C_Master_Wait:
   600  000006                     ?_UART_available:
   601                           	opt callstack 0
   602  000006                     ?_strlen:
   603                           	opt callstack 0
   604  000006                     ?_isdigit:
   605                           	opt callstack 0
   606  000006                     ?_isspace:
   607                           	opt callstack 0
   608  000006                     ?___wmul:
   609                           	opt callstack 0
   610  000006                     ?___lldiv:
   611                           	opt callstack 0
   612  000006                     ?___aldiv:
   613                           	opt callstack 0
   614  000006                     pulse_e@interruptState:
   615                           	opt callstack 0
   616  000006                     UART_send_char@c:
   617                           	opt callstack 0
   618  000006                     UART_read@c:
   619                           	opt callstack 0
   620  000006                     ___wmul@multiplier:
   621                           	opt callstack 0
   622  000006                     isdigit@c:
   623                           	opt callstack 0
   624  000006                     isspace@c:
   625                           	opt callstack 0
   626  000006                     fputc@c:
   627                           	opt callstack 0
   628  000006                     strlen@s:
   629                           	opt callstack 0
   630  000006                     ___lldiv@dividend:
   631                           	opt callstack 0
   632  000006                     ___aldiv@dividend:
   633                           	opt callstack 0
   634                           
   635                           ; 4 bytes @ 0x5
   636  000006                     	ds	1
   637  000007                     send_nibble@data:
   638                           	opt callstack 0
   639  000007                     I2C_Master_Write@byteToWrite:
   640                           	opt callstack 0
   641  000007                     UART_send_string@message:
   642                           	opt callstack 0
   643                           
   644                           ; 2 bytes @ 0x6
   645  000007                     	ds	1
   646  000008                     ??_UART_available:
   647  000008                     ??_isdigit:
   648  000008                     ??_isspace:
   649  000008                     send_byte@data:
   650                           	opt callstack 0
   651  000008                     ___wmul@multiplicand:
   652                           	opt callstack 0
   653  000008                     fputc@fp:
   654                           	opt callstack 0
   655  000008                     strlen@a:
   656                           	opt callstack 0
   657                           
   658                           ; 2 bytes @ 0x7
   659  000008                     	ds	1
   660  000009                     ??_UART_send_string:
   661  000009                     lcdInst@data:
   662                           	opt callstack 0
   663  000009                     LCD_write_str@str:
   664                           	opt callstack 0
   665                           
   666                           ; 2 bytes @ 0x8
   667  000009                     	ds	1
   668  00000A                     ??_fputc:
   669  00000A                     ??_initLCD:
   670  00000A                     LCD_set_cursor@row:
   671                           	opt callstack 0
   672  00000A                     ___wmul@product:
   673                           	opt callstack 0
   674  00000A                     ___lldiv@divisor:
   675                           	opt callstack 0
   676  00000A                     ___aldiv@divisor:
   677                           	opt callstack 0
   678                           
   679                           ; 4 bytes @ 0x9
   680  00000A                     	ds	1
   681  00000B                     ??_LCD_write_str:
   682  00000B                     UART_send_string@i:
   683                           	opt callstack 0
   684                           
   685                           ; 2 bytes @ 0xA
   686  00000B                     	ds	1
   687  00000C                     _isspace$1577:
   688                           	opt callstack 0
   689  00000C                     LCD_set_cursor@column:
   690                           	opt callstack 0
   691                           
   692                           ; 2 bytes @ 0xB
   693  00000C                     	ds	1
   694  00000D                     ?_atoi:
   695                           	opt callstack 0
   696  00000D                     LCD_write_str@i:
   697                           	opt callstack 0
   698  00000D                     atoi@s:
   699                           	opt callstack 0
   700                           
   701                           ; 2 bytes @ 0xC
   702  00000D                     	ds	1
   703  00000E                     ___aldiv@counter:
   704                           	opt callstack 0
   705  00000E                     ___lldiv@quotient:
   706                           	opt callstack 0
   707                           
   708                           ; 4 bytes @ 0xD
   709  00000E                     	ds	1
   710  00000F                     ??_atoi:
   711  00000F                     ?_stoa:
   712                           	opt callstack 0
   713  00000F                     ___aldiv@sign:
   714                           	opt callstack 0
   715  00000F                     stoa@fp:
   716                           	opt callstack 0
   717  00000F                     fputs@s:
   718                           	opt callstack 0
   719                           
   720                           ; 2 bytes @ 0xE
   721  00000F                     	ds	1
   722  000010                     ___aldiv@quotient:
   723                           	opt callstack 0
   724                           
   725                           ; 4 bytes @ 0xF
   726  000010                     	ds	1
   727  000011                     stoa@s:
   728                           	opt callstack 0
   729  000011                     fputs@fp:
   730                           	opt callstack 0
   731                           
   732                           ; 2 bytes @ 0x10
   733  000011                     	ds	1
   734  000012                     ___lldiv@counter:
   735                           	opt callstack 0
   736                           
   737                           ; 1 bytes @ 0x11
   738  000012                     	ds	1
   739  000013                     ??_stoa:
   740  000013                     fputs@c:
   741                           	opt callstack 0
   742  000013                     atoi@neg:
   743                           	opt callstack 0
   744  000013                     I2C_Master_Init@clockFreq:
   745                           	opt callstack 0
   746                           
   747                           ; 4 bytes @ 0x12
   748  000013                     	ds	1
   749  000014                     ??_UART_Init:
   750  000014                     fputs@i:
   751                           	opt callstack 0
   752  000014                     stoa@nuls:
   753                           	opt callstack 0
   754                           
   755                           ; 7 bytes @ 0x13
   756  000014                     	ds	1
   757  000015                     _atoi$1559:
   758                           	opt callstack 0
   759                           
   760                           ; 2 bytes @ 0x14
   761  000015                     	ds	1
   762  000016                     ?_pad:
   763                           	opt callstack 0
   764  000016                     pad@fp:
   765                           	opt callstack 0
   766                           
   767                           ; 2 bytes @ 0x15
   768  000016                     	ds	1
   769  000017                     ??_I2C_Master_Init:
   770  000017                     _atoi$1561:
   771                           	opt callstack 0
   772                           
   773                           ; 2 bytes @ 0x16
   774  000017                     	ds	1
   775  000018                     pad@buf:
   776                           	opt callstack 0
   777  000018                     UART_Init@baudRate:
   778                           	opt callstack 0
   779                           
   780                           ; 4 bytes @ 0x17
   781  000018                     	ds	1
   782  000019                     _atoi$1560:
   783                           	opt callstack 0
   784                           
   785                           ; 1 bytes @ 0x18
   786  000019                     	ds	1
   787  00001A                     pad@p:
   788                           	opt callstack 0
   789  00001A                     atoi@n:
   790                           	opt callstack 0
   791                           
   792                           ; 2 bytes @ 0x19
   793  00001A                     	ds	1
   794  00001B                     stoa@i:
   795                           	opt callstack 0
   796                           
   797                           ; 2 bytes @ 0x1A
   798  00001B                     	ds	1
   799  00001C                     ??_pad:
   800                           
   801                           ; 1 bytes @ 0x1B
   802  00001C                     	ds	1
   803  00001D                     pad@i:
   804                           	opt callstack 0
   805  00001D                     stoa@w:
   806                           	opt callstack 0
   807                           
   808                           ; 2 bytes @ 0x1C
   809  00001D                     	ds	2
   810  00001F                     pad@w:
   811                           	opt callstack 0
   812  00001F                     stoa@cp:
   813                           	opt callstack 0
   814                           
   815                           ; 2 bytes @ 0x1E
   816  00001F                     	ds	2
   817  000021                     ?_ctoa:
   818                           	opt callstack 0
   819  000021                     ctoa@fp:
   820                           	opt callstack 0
   821  000021                     stoa@p:
   822                           	opt callstack 0
   823                           
   824                           ; 2 bytes @ 0x20
   825  000021                     	ds	2
   826  000023                     ctoa@c:
   827                           	opt callstack 0
   828  000023                     stoa@l:
   829                           	opt callstack 0
   830                           
   831                           ; 2 bytes @ 0x22
   832  000023                     	ds	1
   833  000024                     ctoa@w:
   834                           	opt callstack 0
   835                           
   836                           ; 2 bytes @ 0x23
   837  000024                     	ds	2
   838  000026                     ?_vfpfcnvrt:
   839                           	opt callstack 0
   840  000026                     vfpfcnvrt@fp:
   841                           	opt callstack 0
   842                           
   843                           ; 2 bytes @ 0x25
   844  000026                     	ds	2
   845  000028                     vfpfcnvrt@fmt:
   846                           	opt callstack 0
   847                           
   848                           ; 2 bytes @ 0x27
   849  000028                     	ds	2
   850  00002A                     vfpfcnvrt@ap:
   851                           	opt callstack 0
   852                           
   853                           ; 2 bytes @ 0x29
   854  00002A                     	ds	2
   855  00002C                     ??_vfpfcnvrt:
   856                           
   857                           ; 1 bytes @ 0x2B
   858  00002C                     	ds	4
   859  000030                     vfpfcnvrt@cp:
   860                           	opt callstack 0
   861                           
   862                           ; 2 bytes @ 0x2F
   863  000030                     	ds	2
   864  000032                     _vfpfcnvrt$1102:
   865                           	opt callstack 0
   866                           
   867                           ; 2 bytes @ 0x31
   868  000032                     	ds	2
   869  000034                     _vfpfcnvrt$1103:
   870                           	opt callstack 0
   871                           
   872                           ; 2 bytes @ 0x33
   873  000034                     	ds	2
   874  000036                     vfpfcnvrt@c:
   875                           	opt callstack 0
   876                           
   877                           ; 1 bytes @ 0x35
   878  000036                     	ds	1
   879  000037                     ?_vfprintf:
   880                           	opt callstack 0
   881  000037                     vfprintf@fp:
   882                           	opt callstack 0
   883                           
   884                           ; 2 bytes @ 0x36
   885  000037                     	ds	2
   886  000039                     vfprintf@fmt:
   887                           	opt callstack 0
   888                           
   889                           ; 2 bytes @ 0x38
   890  000039                     	ds	2
   891  00003B                     vfprintf@ap:
   892                           	opt callstack 0
   893                           
   894                           ; 2 bytes @ 0x3A
   895  00003B                     	ds	2
   896  00003D                     vfprintf@cfmt:
   897                           	opt callstack 0
   898                           
   899                           ; 2 bytes @ 0x3C
   900  00003D                     	ds	2
   901  00003F                     ?_sprintf:
   902                           	opt callstack 0
   903  00003F                     sprintf@s:
   904                           	opt callstack 0
   905                           
   906                           ; 2 bytes @ 0x3E
   907  00003F                     	ds	2
   908  000041                     sprintf@fmt:
   909                           	opt callstack 0
   910                           
   911                           ; 2 bytes @ 0x40
   912  000041                     	ds	6
   913  000047                     
   914                           ; 1 bytes @ 0x46
   915  000047                     	ds	2
   916  000049                     sprintf@ap:
   917                           	opt callstack 0
   918                           
   919                           ; 2 bytes @ 0x48
   920  000049                     	ds	2
   921  00004B                     sprintf@f:
   922                           	opt callstack 0
   923                           
   924                           ; 6 bytes @ 0x4A
   925  00004B                     	ds	6
   926  000051                     ??_main:
   927                           
   928                           ; 1 bytes @ 0x50
   929  000051                     	ds	5
   930                           
   931 ;;
   932 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   933 ;;
   934 ;; *************** function _main *****************
   935 ;; Defined at:
   936 ;;		line 134 in file "main.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;		None
   939 ;; Auto vars:     Size  Location     Type
   940 ;;  keypress        1   68[BANK0 ] unsigned char 
   941 ;;  command        25   25[BANK0 ] unsigned char [25]
   942 ;;  uart_char_to   25    0[BANK0 ] unsigned char [25]
   943 ;;  lcdDisplay     16   50[BANK0 ] unsigned char [16]
   944 ;;  index           2   70[BANK0 ] int 
   945 ;;  commandLengt    2    0        int 
   946 ;;  commandRecei    1   69[BANK0 ] _Bool 
   947 ;;  toPrint         1    0        unsigned char 
   948 ;; Return value:  Size  Location     Type
   949 ;;                  1    wreg      void 
   950 ;; Registers used:
   951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;      Totals:         5      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   961 ;;Total ram usage:       77 bytes
   962 ;; Hardware stack levels required when called:   10
   963 ;; This function calls:
   964 ;;		_DCMotorAllOff
   965 ;;		_DCMotorLeftBkwd
   966 ;;		_DCMotorLeftFwd
   967 ;;		_DCMotorLeftRightBkwdON
   968 ;;		_DCMotorLeftRightFwdON
   969 ;;		_DCMotorRightBkwd
   970 ;;		_DCMotorRightFwd
   971 ;;		_I2C_Master_Init
   972 ;;		_LCD_set_cursor
   973 ;;		_LCD_write_str
   974 ;;		_RTC_Init
   975 ;;		_UART_Init
   976 ;;		_UART_available
   977 ;;		_UART_read
   978 ;;		_UART_send_string
   979 ;;		_initLCD
   980 ;;		_portSetup
   981 ;;		_sprintf
   982 ;; This function is called by:
   983 ;;		Startup code after reset
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text0
   988  0010E8                     __ptext0:
   989                           	opt callstack 0
   990  0010E8                     _main:
   991                           	opt callstack 21
   992                           
   993                           ;main.c: 136:     portSetup();
   994                           
   995                           ;incstack = 0
   996  0010E8  EC0B  F011         	call	_portSetup	;wreg free
   997                           
   998                           ;main.c: 137:     initLCD();
   999  0010EC  ECE1  F00F         	call	_initLCD	;wreg free
  1000                           
  1001                           ;main.c: 138:     I2C_Master_Init(100000);
  1002  0010F0  0EA0               	movlw	160
  1003  0010F2  6E13               	movwf	I2C_Master_Init@clockFreq,c
  1004  0010F4  0E86               	movlw	134
  1005  0010F6  6E14               	movwf	I2C_Master_Init@clockFreq+1,c
  1006  0010F8  0E01               	movlw	1
  1007  0010FA  6E15               	movwf	I2C_Master_Init@clockFreq+2,c
  1008  0010FC  0E00               	movlw	0
  1009  0010FE  6E16               	movwf	I2C_Master_Init@clockFreq+3,c
  1010  001100  EC16  F010         	call	_I2C_Master_Init	;wreg free
  1011                           
  1012                           ;main.c: 139:     RTC_Init();
  1013  001104  ECA2  F011         	call	_RTC_Init	;wreg free
  1014                           
  1015                           ;main.c: 140:     UART_Init();
  1016  001108  EC57  F00F         	call	_UART_Init	;wreg free
  1017                           
  1018                           ;main.c: 142:     LCD_set_cursor(0,0);
  1019  00110C  0E00               	movlw	0
  1020  00110E  6E0B               	movwf	LCD_set_cursor@row+1,c
  1021  001110  0E00               	movlw	0
  1022  001112  6E0A               	movwf	LCD_set_cursor@row,c
  1023  001114  0E00               	movlw	0
  1024  001116  6E0D               	movwf	LCD_set_cursor@column+1,c
  1025  001118  0E00               	movlw	0
  1026  00111A  6E0C               	movwf	LCD_set_cursor@column,c
  1027  00111C  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1028                           
  1029                           ;main.c: 146:     UART_send_string("Init complete\n");
  1030  001120  0EBE               	movlw	low STR_1
  1031  001122  6E07               	movwf	UART_send_string@message,c
  1032  001124  0E10               	movlw	high STR_1
  1033  001126  6E08               	movwf	UART_send_string@message+1,c
  1034  001128  EC67  F00E         	call	_UART_send_string	;wreg free
  1035                           
  1036                           ;main.c: 148:     _delay((unsigned long)((500)*(10000000/4000.0)));
  1037  00112C  0E07               	movlw	7
  1038  00112E  6E52               	movwf	(??_main+1)& (0+255),c
  1039  001130  0E58               	movlw	88
  1040  001132  6E51               	movwf	??_main& (0+255),c
  1041  001134  0E5A               	movlw	90
  1042  001136                     u1857:
  1043  001136  2EE8               	decfsz	wreg,f,c
  1044  001138  D7FE               	bra	u1857
  1045  00113A  2E51               	decfsz	??_main& (0+255),f,c
  1046  00113C  D7FC               	bra	u1857
  1047  00113E  2E52               	decfsz	(??_main+1)& (0+255),f,c
  1048  001140  D7FA               	bra	u1857
  1049                           
  1050                           ;main.c: 150:     _Bool commandReceived = 0;
  1051  001142  0E00               	movlw	0
  1052  001144  0100               	movlb	0	; () banked
  1053  001146  6FC5               	movwf	main@commandReceived& (0+255),b
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;main.c: 152:     unsigned char command [25];;main.c: 153:     unsigned char lcdDisplay 
      +                          [16];;main.c: 154:     unsigned char uart_char_to_send[25];;main.c: 155:     int index =
      +                           0;
  1057                           
  1058                           ; BSR set to: 0
  1059  001148  0E00               	movlw	0
  1060  00114A  6FC7               	movwf	(main@index+1)& (0+255),b
  1061  00114C  0E00               	movlw	0
  1062  00114E  6FC6               	movwf	main@index& (0+255),b
  1063  001150                     l2836:
  1064                           
  1065                           ;main.c: 162:         if(UART_available()){
  1066  001150  EC09  F012         	call	_UART_available	;wreg free
  1067  001154  5006               	movf	?_UART_available,w,c
  1068  001156  1007               	iorwf	?_UART_available+1,w,c
  1069  001158  B4D8               	btfsc	status,2,c
  1070  00115A  D00E               	goto	l2842
  1071                           
  1072                           ;main.c: 163:             command[index] = UART_read();
  1073  00115C  ECF6  F011         	call	_UART_read	;wreg free
  1074  001160  6E51               	movwf	??_main& (0+255),c
  1075  001162  0E99               	movlw	low main@command
  1076  001164  0100               	movlb	0	; () banked
  1077  001166  25C6               	addwf	main@index& (0+255),w,b
  1078  001168  6ED9               	movwf	fsr2l,c
  1079  00116A  0E00               	movlw	high main@command
  1080  00116C  21C7               	addwfc	(main@index+1)& (0+255),w,b
  1081  00116E  6EDA               	movwf	fsr2h,c
  1082  001170  C051  FFDF         	movff	??_main,indf2
  1083                           
  1084                           ; BSR set to: 0
  1085                           ;main.c: 164:             index++;
  1086  001174  4BC6               	infsnz	main@index& (0+255),f,b
  1087  001176  2BC7               	incf	(main@index+1)& (0+255),f,b
  1088  001178                     l2842:
  1089                           
  1090                           ;main.c: 166:         if(index>0 && command[index-1] == '\n'){
  1091  001178  0100               	movlb	0	; () banked
  1092  00117A  BFC7               	btfsc	(main@index+1)& (0+255),7,b
  1093  00117C  D021               	goto	l231
  1094  00117E  51C7               	movf	(main@index+1)& (0+255),w,b
  1095  001180  E103               	bnz	u1710
  1096  001182  05C6               	decf	main@index& (0+255),w,b
  1097  001184  A0D8               	btfss	status,0,c
  1098  001186  D01C               	goto	l231
  1099  001188                     u1710:
  1100                           
  1101                           ; BSR set to: 0
  1102  001188  0EFF               	movlw	255
  1103  00118A  6E51               	movwf	??_main& (0+255),c
  1104  00118C  0EFF               	movlw	255
  1105  00118E  6E52               	movwf	(??_main+1)& (0+255),c
  1106  001190  C0C6  F053         	movff	main@index,??_main+2
  1107  001194  C0C7  F054         	movff	main@index+1,??_main+3
  1108  001198  5051               	movf	??_main,w,c
  1109  00119A  2653               	addwf	??_main+2,f,c
  1110  00119C  5052               	movf	??_main+1,w,c
  1111  00119E  2254               	addwfc	??_main+3,f,c
  1112  0011A0  0E99               	movlw	low main@command
  1113  0011A2  2453               	addwf	??_main+2,w,c
  1114  0011A4  6ED9               	movwf	fsr2l,c
  1115  0011A6  0E00               	movlw	high main@command
  1116  0011A8  2054               	addwfc	??_main+3,w,c
  1117  0011AA  6EDA               	movwf	fsr2h,c
  1118  0011AC  0E0A               	movlw	10
  1119  0011AE  18DE               	xorwf	postinc2,w,c
  1120  0011B0  A4D8               	btfss	status,2,c
  1121  0011B2  D006               	goto	l231
  1122                           
  1123                           ; BSR set to: 0
  1124                           ;main.c: 167:             commandReceived = 1;
  1125  0011B4  0E01               	movlw	1
  1126  0011B6  6FC5               	movwf	main@commandReceived& (0+255),b
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;main.c: 169:             index = 0;
  1130  0011B8  0E00               	movlw	0
  1131  0011BA  6FC7               	movwf	(main@index+1)& (0+255),b
  1132  0011BC  0E00               	movlw	0
  1133  0011BE  6FC6               	movwf	main@index& (0+255),b
  1134  0011C0                     l231:
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;main.c: 172:         if(commandReceived){
  1138  0011C0  51C5               	movf	main@commandReceived& (0+255),w,b
  1139  0011C2  B4D8               	btfsc	status,2,c
  1140  0011C4  D1B7               	goto	l261
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;main.c: 174:             commandReceived = 0;
  1144  0011C6  0E00               	movlw	0
  1145  0011C8  6FC5               	movwf	main@commandReceived& (0+255),b
  1146                           
  1147                           ;main.c: 175:             switch(command[0]){
  1148  0011CA  D1A6               	goto	l2964
  1149  0011CC                     l2852:
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;main.c: 182:                                     LCD_set_cursor(0,0);
  1153  0011CC  0E00               	movlw	0
  1154  0011CE  6E0B               	movwf	LCD_set_cursor@row+1,c
  1155  0011D0  0E00               	movlw	0
  1156  0011D2  6E0A               	movwf	LCD_set_cursor@row,c
  1157  0011D4  0E00               	movlw	0
  1158  0011D6  6E0D               	movwf	LCD_set_cursor@column+1,c
  1159  0011D8  0E00               	movlw	0
  1160  0011DA  6E0C               	movwf	LCD_set_cursor@column,c
  1161  0011DC  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1162                           
  1163                           ;main.c: 183:                                     LCD_write_str("Move L+R Fwd   ");
  1164  0011E0  0E5E               	movlw	low STR_2
  1165  0011E2  6E09               	movwf	LCD_write_str@str,c
  1166  0011E4  0E10               	movlw	high STR_2
  1167  0011E6  6E0A               	movwf	LCD_write_str@str+1,c
  1168  0011E8  EC11  F00E         	call	_LCD_write_str	;wreg free
  1169                           
  1170                           ;main.c: 184:                                     DCMotorLeftRightFwdON();
  1171  0011EC  EC4F  F012         	call	_DCMotorLeftRightFwdON	;wreg free
  1172                           
  1173                           ;main.c: 185:                                     break;
  1174  0011F0  D1A1               	goto	l261
  1175  0011F2                     l2858:
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;main.c: 187:                                     LCD_set_cursor(0,0);
  1179  0011F2  0E00               	movlw	0
  1180  0011F4  6E0B               	movwf	LCD_set_cursor@row+1,c
  1181  0011F6  0E00               	movlw	0
  1182  0011F8  6E0A               	movwf	LCD_set_cursor@row,c
  1183  0011FA  0E00               	movlw	0
  1184  0011FC  6E0D               	movwf	LCD_set_cursor@column+1,c
  1185  0011FE  0E00               	movlw	0
  1186  001200  6E0C               	movwf	LCD_set_cursor@column,c
  1187  001202  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1188                           
  1189                           ;main.c: 188:                                     LCD_write_str("Move Left Fwd  ");
  1190  001206  0E6E               	movlw	low STR_3
  1191  001208  6E09               	movwf	LCD_write_str@str,c
  1192  00120A  0E10               	movlw	high STR_3
  1193  00120C  6E0A               	movwf	LCD_write_str@str+1,c
  1194  00120E  EC11  F00E         	call	_LCD_write_str	;wreg free
  1195  001212                     l2862:
  1196                           
  1197                           ;main.c: 189:                                     DCMotorLeftFwd();
  1198  001212  EC6E  F012         	call	_DCMotorLeftFwd	;wreg free
  1199                           
  1200                           ;main.c: 190:                                     break;
  1201  001216  D18E               	goto	l261
  1202  001218                     l2864:
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;main.c: 192:                                     LCD_set_cursor(0,0);
  1206  001218  0E00               	movlw	0
  1207  00121A  6E0B               	movwf	LCD_set_cursor@row+1,c
  1208  00121C  0E00               	movlw	0
  1209  00121E  6E0A               	movwf	LCD_set_cursor@row,c
  1210  001220  0E00               	movlw	0
  1211  001222  6E0D               	movwf	LCD_set_cursor@column+1,c
  1212  001224  0E00               	movlw	0
  1213  001226  6E0C               	movwf	LCD_set_cursor@column,c
  1214  001228  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1215                           
  1216                           ;main.c: 193:                                     LCD_write_str("Move Right Fwd   ");
  1217  00122C  0E18               	movlw	low STR_4
  1218  00122E  6E09               	movwf	LCD_write_str@str,c
  1219  001230  0E10               	movlw	high STR_4
  1220  001232  6E0A               	movwf	LCD_write_str@str+1,c
  1221  001234  EC11  F00E         	call	_LCD_write_str	;wreg free
  1222                           
  1223                           ;main.c: 194:                                     DCMotorRightFwd();
  1224  001238  EC6A  F012         	call	_DCMotorRightFwd	;wreg free
  1225                           
  1226                           ;main.c: 195:                                     break;
  1227  00123C  D17B               	goto	l261
  1228  00123E                     l2870:
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 197:                                     LCD_set_cursor(0,0);
  1232  00123E  0E00               	movlw	0
  1233  001240  6E0B               	movwf	LCD_set_cursor@row+1,c
  1234  001242  0E00               	movlw	0
  1235  001244  6E0A               	movwf	LCD_set_cursor@row,c
  1236  001246  0E00               	movlw	0
  1237  001248  6E0D               	movwf	LCD_set_cursor@column+1,c
  1238  00124A  0E00               	movlw	0
  1239  00124C  6E0C               	movwf	LCD_set_cursor@column,c
  1240  00124E  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1241                           
  1242                           ;main.c: 198:                                     LCD_write_str("Stop Fwd move   ");
  1243  001252  0E3C               	movlw	low STR_5
  1244  001254  6E09               	movwf	LCD_write_str@str,c
  1245  001256  0E10               	movlw	high STR_5
  1246  001258  6E0A               	movwf	LCD_write_str@str+1,c
  1247  00125A  EC11  F00E         	call	_LCD_write_str	;wreg free
  1248  00125E                     l2874:
  1249                           
  1250                           ;main.c: 199:                                     DCMotorAllOff();
  1251  00125E  EC59  F012         	call	_DCMotorAllOff	;wreg free
  1252                           
  1253                           ;main.c: 200:                                     break;
  1254  001262  D168               	goto	l261
  1255  001264                     l2878:
  1256                           
  1257                           ; BSR set to: 0
  1258  001264  519B               	movf	(main@command+2)& (0+255),w,b
  1259  001266  6E51               	movwf	??_main& (0+255),c
  1260  001268  6A52               	clrf	(??_main+1)& (0+255),c
  1261                           
  1262                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1263                           ; Switch size 1, requested type "simple"
  1264                           ; Number of cases is 1, Range of values is 0 to 0
  1265                           ; switch strategies available:
  1266                           ; Name         Instructions Cycles
  1267                           ; simple_byte            4     3 (average)
  1268                           ;	Chosen strategy is simple_byte
  1269  00126A  5052               	movf	??_main+1,w,c
  1270  00126C  0A00               	xorlw	0	; case 0
  1271  00126E  A4D8               	btfss	status,2,c
  1272  001270  D161               	goto	l261
  1273                           
  1274                           ; BSR set to: 0
  1275                           ; Switch size 1, requested type "simple"
  1276                           ; Number of cases is 4, Range of values is 66 to 82
  1277                           ; switch strategies available:
  1278                           ; Name         Instructions Cycles
  1279                           ; simple_byte           13     7 (average)
  1280                           ;	Chosen strategy is simple_byte
  1281  001272  5051               	movf	??_main,w,c
  1282  001274  0A42               	xorlw	66	; case 66
  1283  001276  B4D8               	btfsc	status,2,c
  1284  001278  D7A9               	goto	l2852
  1285  00127A  0A04               	xorlw	4	; case 70
  1286  00127C  B4D8               	btfsc	status,2,c
  1287  00127E  D7DF               	goto	l2870
  1288  001280  0A0A               	xorlw	10	; case 76
  1289  001282  B4D8               	btfsc	status,2,c
  1290  001284  D7B6               	goto	l2858
  1291  001286  0A1E               	xorlw	30	; case 82
  1292  001288  B4D8               	btfsc	status,2,c
  1293  00128A  D7C6               	goto	l2864
  1294  00128C  D153               	goto	l261
  1295  00128E                     l2880:
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;main.c: 208:                                     LCD_set_cursor(0,0);
  1299  00128E  0E00               	movlw	0
  1300  001290  6E0B               	movwf	LCD_set_cursor@row+1,c
  1301  001292  0E00               	movlw	0
  1302  001294  6E0A               	movwf	LCD_set_cursor@row,c
  1303  001296  0E00               	movlw	0
  1304  001298  6E0D               	movwf	LCD_set_cursor@column+1,c
  1305  00129A  0E00               	movlw	0
  1306  00129C  6E0C               	movwf	LCD_set_cursor@column,c
  1307  00129E  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1308                           
  1309                           ;main.c: 209:                                     LCD_write_str("Move L+R Bkwd  ");
  1310  0012A2  0E7E               	movlw	low STR_6
  1311  0012A4  6E09               	movwf	LCD_write_str@str,c
  1312  0012A6  0E10               	movlw	high STR_6
  1313  0012A8  6E0A               	movwf	LCD_write_str@str+1,c
  1314  0012AA  EC11  F00E         	call	_LCD_write_str	;wreg free
  1315                           
  1316                           ;main.c: 210:                                     DCMotorLeftRightBkwdON();
  1317  0012AE  EC54  F012         	call	_DCMotorLeftRightBkwdON	;wreg free
  1318                           
  1319                           ;main.c: 211:                                     break;
  1320  0012B2  D140               	goto	l261
  1321  0012B4                     l2886:
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;main.c: 213:                                     LCD_set_cursor(0,0);
  1325  0012B4  0E00               	movlw	0
  1326  0012B6  6E0B               	movwf	LCD_set_cursor@row+1,c
  1327  0012B8  0E00               	movlw	0
  1328  0012BA  6E0A               	movwf	LCD_set_cursor@row,c
  1329  0012BC  0E00               	movlw	0
  1330  0012BE  6E0D               	movwf	LCD_set_cursor@column+1,c
  1331  0012C0  0E00               	movlw	0
  1332  0012C2  6E0C               	movwf	LCD_set_cursor@column,c
  1333  0012C4  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1334                           
  1335                           ;main.c: 214:                                     LCD_write_str("Move Left Bkwd ");
  1336  0012C8  0E8E               	movlw	low STR_7
  1337  0012CA  6E09               	movwf	LCD_write_str@str,c
  1338  0012CC  0E10               	movlw	high STR_7
  1339  0012CE  6E0A               	movwf	LCD_write_str@str+1,c
  1340  0012D0  EC11  F00E         	call	_LCD_write_str	;wreg free
  1341                           
  1342                           ;main.c: 215:                                     DCMotorLeftBkwd();
  1343  0012D4  EC76  F012         	call	_DCMotorLeftBkwd	;wreg free
  1344                           
  1345                           ;main.c: 216:                                     break;
  1346  0012D8  D12D               	goto	l261
  1347  0012DA                     l2892:
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;main.c: 218:                                     LCD_set_cursor(0,0);
  1351  0012DA  0E00               	movlw	0
  1352  0012DC  6E0B               	movwf	LCD_set_cursor@row+1,c
  1353  0012DE  0E00               	movlw	0
  1354  0012E0  6E0A               	movwf	LCD_set_cursor@row,c
  1355  0012E2  0E00               	movlw	0
  1356  0012E4  6E0D               	movwf	LCD_set_cursor@column+1,c
  1357  0012E6  0E00               	movlw	0
  1358  0012E8  6E0C               	movwf	LCD_set_cursor@column,c
  1359  0012EA  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1360                           
  1361                           ;main.c: 219:                                     LCD_write_str("Move Right Bkwd  ");
  1362  0012EE  0E2A               	movlw	low STR_8
  1363  0012F0  6E09               	movwf	LCD_write_str@str,c
  1364  0012F2  0E10               	movlw	high STR_8
  1365  0012F4  6E0A               	movwf	LCD_write_str@str+1,c
  1366  0012F6  EC11  F00E         	call	_LCD_write_str	;wreg free
  1367                           
  1368                           ;main.c: 220:                                     DCMotorRightBkwd();
  1369  0012FA  EC72  F012         	call	_DCMotorRightBkwd	;wreg free
  1370                           
  1371                           ;main.c: 221:                                     break;
  1372  0012FE  D11A               	goto	l261
  1373  001300                     l2898:
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;main.c: 223:                                     LCD_set_cursor(0,0);
  1377  001300  0E00               	movlw	0
  1378  001302  6E0B               	movwf	LCD_set_cursor@row+1,c
  1379  001304  0E00               	movlw	0
  1380  001306  6E0A               	movwf	LCD_set_cursor@row,c
  1381  001308  0E00               	movlw	0
  1382  00130A  6E0D               	movwf	LCD_set_cursor@column+1,c
  1383  00130C  0E00               	movlw	0
  1384  00130E  6E0C               	movwf	LCD_set_cursor@column,c
  1385  001310  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1386                           
  1387                           ;main.c: 224:                                     LCD_write_str("Stop Bkwd move  ");
  1388  001314  0E4D               	movlw	low STR_9
  1389  001316  6E09               	movwf	LCD_write_str@str,c
  1390  001318  0E10               	movlw	high STR_9
  1391  00131A  6E0A               	movwf	LCD_write_str@str+1,c
  1392  00131C  EC11  F00E         	call	_LCD_write_str	;wreg free
  1393  001320  D79E               	goto	l2874
  1394  001322                     l2906:
  1395                           
  1396                           ; BSR set to: 0
  1397  001322  519B               	movf	(main@command+2)& (0+255),w,b
  1398  001324  6E51               	movwf	??_main& (0+255),c
  1399  001326  6A52               	clrf	(??_main+1)& (0+255),c
  1400                           
  1401                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1402                           ; Switch size 1, requested type "simple"
  1403                           ; Number of cases is 1, Range of values is 0 to 0
  1404                           ; switch strategies available:
  1405                           ; Name         Instructions Cycles
  1406                           ; simple_byte            4     3 (average)
  1407                           ;	Chosen strategy is simple_byte
  1408  001328  5052               	movf	??_main+1,w,c
  1409  00132A  0A00               	xorlw	0	; case 0
  1410  00132C  A4D8               	btfss	status,2,c
  1411  00132E  D102               	goto	l261
  1412                           
  1413                           ; BSR set to: 0
  1414                           ; Switch size 1, requested type "simple"
  1415                           ; Number of cases is 4, Range of values is 66 to 82
  1416                           ; switch strategies available:
  1417                           ; Name         Instructions Cycles
  1418                           ; simple_byte           13     7 (average)
  1419                           ;	Chosen strategy is simple_byte
  1420  001330  5051               	movf	??_main,w,c
  1421  001332  0A42               	xorlw	66	; case 66
  1422  001334  B4D8               	btfsc	status,2,c
  1423  001336  D7AB               	goto	l2880
  1424  001338  0A04               	xorlw	4	; case 70
  1425  00133A  B4D8               	btfsc	status,2,c
  1426  00133C  D7E1               	goto	l2898
  1427  00133E  0A0A               	xorlw	10	; case 76
  1428  001340  B4D8               	btfsc	status,2,c
  1429  001342  D7B8               	goto	l2886
  1430  001344  0A1E               	xorlw	30	; case 82
  1431  001346  B4D8               	btfsc	status,2,c
  1432  001348  D7C8               	goto	l2892
  1433  00134A  D0F4               	goto	l261
  1434  00134C                     l2908:
  1435                           
  1436                           ; BSR set to: 0
  1437                           ;main.c: 234:                                     LCD_set_cursor(0,0);
  1438  00134C  0E00               	movlw	0
  1439  00134E  6E0B               	movwf	LCD_set_cursor@row+1,c
  1440  001350  0E00               	movlw	0
  1441  001352  6E0A               	movwf	LCD_set_cursor@row,c
  1442  001354  0E00               	movlw	0
  1443  001356  6E0D               	movwf	LCD_set_cursor@column+1,c
  1444  001358  0E00               	movlw	0
  1445  00135A  6E0C               	movwf	LCD_set_cursor@column,c
  1446  00135C  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1447                           
  1448                           ;main.c: 235:                                     LCD_write_str("Mid motor left ");
  1449  001360  0E9E               	movlw	low STR_10
  1450  001362  6E09               	movwf	LCD_write_str@str,c
  1451  001364  0E10               	movlw	high STR_10
  1452  001366  6E0A               	movwf	LCD_write_str@str+1,c
  1453  001368  EC11  F00E         	call	_LCD_write_str	;wreg free
  1454  00136C  D752               	goto	l2862
  1455  00136E                     l2914:
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;main.c: 239:                                     LCD_set_cursor(0,0);
  1459  00136E  0E00               	movlw	0
  1460  001370  6E0B               	movwf	LCD_set_cursor@row+1,c
  1461  001372  0E00               	movlw	0
  1462  001374  6E0A               	movwf	LCD_set_cursor@row,c
  1463  001376  0E00               	movlw	0
  1464  001378  6E0D               	movwf	LCD_set_cursor@column+1,c
  1465  00137A  0E00               	movlw	0
  1466  00137C  6E0C               	movwf	LCD_set_cursor@column,c
  1467  00137E  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1468                           
  1469                           ;main.c: 240:                                     LCD_write_str("Mid motor right");
  1470  001382  0EAE               	movlw	low STR_11
  1471  001384  6E09               	movwf	LCD_write_str@str,c
  1472  001386  0E10               	movlw	high STR_11
  1473  001388  6E0A               	movwf	LCD_write_str@str+1,c
  1474  00138A  EC11  F00E         	call	_LCD_write_str	;wreg free
  1475  00138E  D741               	goto	l2862
  1476  001390                     l2920:
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;main.c: 244:                                     LCD_set_cursor(0,0);
  1480  001390  0E00               	movlw	0
  1481  001392  6E0B               	movwf	LCD_set_cursor@row+1,c
  1482  001394  0E00               	movlw	0
  1483  001396  6E0A               	movwf	LCD_set_cursor@row,c
  1484  001398  0E00               	movlw	0
  1485  00139A  6E0D               	movwf	LCD_set_cursor@column+1,c
  1486  00139C  0E00               	movlw	0
  1487  00139E  6E0C               	movwf	LCD_set_cursor@column,c
  1488  0013A0  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1489                           
  1490                           ;main.c: 245:                                     LCD_write_str("Mid motor stop");
  1491  0013A4  0ECD               	movlw	low STR_12
  1492  0013A6  6E09               	movwf	LCD_write_str@str,c
  1493  0013A8  0E10               	movlw	high STR_12
  1494  0013AA  6E0A               	movwf	LCD_write_str@str+1,c
  1495  0013AC  EC11  F00E         	call	_LCD_write_str	;wreg free
  1496  0013B0  D756               	goto	l2874
  1497  0013B2                     l2928:
  1498                           
  1499                           ; BSR set to: 0
  1500  0013B2  519B               	movf	(main@command+2)& (0+255),w,b
  1501  0013B4  6E51               	movwf	??_main& (0+255),c
  1502  0013B6  6A52               	clrf	(??_main+1)& (0+255),c
  1503                           
  1504                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1505                           ; Switch size 1, requested type "simple"
  1506                           ; Number of cases is 1, Range of values is 0 to 0
  1507                           ; switch strategies available:
  1508                           ; Name         Instructions Cycles
  1509                           ; simple_byte            4     3 (average)
  1510                           ;	Chosen strategy is simple_byte
  1511  0013B8  5052               	movf	??_main+1,w,c
  1512  0013BA  0A00               	xorlw	0	; case 0
  1513  0013BC  A4D8               	btfss	status,2,c
  1514  0013BE  D0BA               	goto	l261
  1515                           
  1516                           ; BSR set to: 0
  1517                           ; Switch size 1, requested type "simple"
  1518                           ; Number of cases is 3, Range of values is 70 to 82
  1519                           ; switch strategies available:
  1520                           ; Name         Instructions Cycles
  1521                           ; simple_byte           10     6 (average)
  1522                           ;	Chosen strategy is simple_byte
  1523  0013C0  5051               	movf	??_main,w,c
  1524  0013C2  0A46               	xorlw	70	; case 70
  1525  0013C4  B4D8               	btfsc	status,2,c
  1526  0013C6  D7E4               	goto	l2920
  1527  0013C8  0A0A               	xorlw	10	; case 76
  1528  0013CA  B4D8               	btfsc	status,2,c
  1529  0013CC  D7BF               	goto	l2908
  1530  0013CE  0A1E               	xorlw	30	; case 82
  1531  0013D0  B4D8               	btfsc	status,2,c
  1532  0013D2  D7CD               	goto	l2914
  1533  0013D4  D0AF               	goto	l261
  1534  0013D6                     l2932:
  1535                           
  1536                           ; BSR set to: 0
  1537  0013D6  519A               	movf	(main@command+1)& (0+255),w,b
  1538  0013D8  6E51               	movwf	??_main& (0+255),c
  1539  0013DA  6A52               	clrf	(??_main+1)& (0+255),c
  1540                           
  1541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1542                           ; Switch size 1, requested type "simple"
  1543                           ; Number of cases is 1, Range of values is 0 to 0
  1544                           ; switch strategies available:
  1545                           ; Name         Instructions Cycles
  1546                           ; simple_byte            4     3 (average)
  1547                           ;	Chosen strategy is simple_byte
  1548  0013DC  5052               	movf	??_main+1,w,c
  1549  0013DE  0A00               	xorlw	0	; case 0
  1550  0013E0  A4D8               	btfss	status,2,c
  1551  0013E2  D0A8               	goto	l261
  1552                           
  1553                           ; BSR set to: 0
  1554                           ; Switch size 1, requested type "simple"
  1555                           ; Number of cases is 3, Range of values is 66 to 83
  1556                           ; switch strategies available:
  1557                           ; Name         Instructions Cycles
  1558                           ; simple_byte           10     6 (average)
  1559                           ;	Chosen strategy is simple_byte
  1560  0013E4  5051               	movf	??_main,w,c
  1561  0013E6  0A42               	xorlw	66	; case 66
  1562  0013E8  B4D8               	btfsc	status,2,c
  1563  0013EA  D79B               	goto	l2906
  1564  0013EC  0A04               	xorlw	4	; case 70
  1565  0013EE  B4D8               	btfsc	status,2,c
  1566  0013F0  D739               	goto	l2878
  1567  0013F2  0A15               	xorlw	21	; case 83
  1568  0013F4  B4D8               	btfsc	status,2,c
  1569  0013F6  D7DD               	goto	l2928
  1570  0013F8  D09D               	goto	l261
  1571  0013FA                     l2934:
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;main.c: 261:                             LCD_set_cursor(0,0);
  1575  0013FA  0E00               	movlw	0
  1576  0013FC  6E0B               	movwf	LCD_set_cursor@row+1,c
  1577  0013FE  0E00               	movlw	0
  1578  001400  6E0A               	movwf	LCD_set_cursor@row,c
  1579  001402  0E00               	movlw	0
  1580  001404  6E0D               	movwf	LCD_set_cursor@column+1,c
  1581  001406  0E00               	movlw	0
  1582  001408  6E0C               	movwf	LCD_set_cursor@column,c
  1583  00140A  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1584                           
  1585                           ;main.c: 262:                             sprintf(lcdDisplay,"%.*s", 16, command + 2);
  1586  00140E  0EB2               	movlw	low main@lcdDisplay
  1587  001410  6E3F               	movwf	sprintf@s,c
  1588  001412  0E00               	movlw	high main@lcdDisplay
  1589  001414  6E40               	movwf	sprintf@s+1,c
  1590  001416  0EE2               	movlw	low STR_13
  1591  001418  6E41               	movwf	sprintf@fmt,c
  1592  00141A  0E10               	movlw	high STR_13
  1593  00141C  6E42               	movwf	sprintf@fmt+1,c
  1594  00141E  0E00               	movlw	0
  1595  001420  6E44               	movwf	?_sprintf+5,c
  1596  001422  0E10               	movlw	16
  1597  001424  6E43               	movwf	?_sprintf+4,c
  1598  001426  0E9B               	movlw	low (main@command+2)
  1599  001428  6E45               	movwf	?_sprintf+6,c
  1600  00142A  0E00               	movlw	high (main@command+2)
  1601  00142C  6E46               	movwf	?_sprintf+7,c
  1602  00142E  EC96  F010         	call	_sprintf	;wreg free
  1603  001432                     l2938:
  1604                           
  1605                           ;main.c: 263:                             LCD_write_str(lcdDisplay);
  1606  001432  0EB2               	movlw	low main@lcdDisplay
  1607  001434  6E09               	movwf	LCD_write_str@str,c
  1608  001436  0E00               	movlw	high main@lcdDisplay
  1609  001438  6E0A               	movwf	LCD_write_str@str+1,c
  1610  00143A  EC11  F00E         	call	_LCD_write_str	;wreg free
  1611                           
  1612                           ;main.c: 264:                             break;
  1613  00143E  D07A               	goto	l261
  1614  001440                     l2940:
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;main.c: 266:                             LCD_set_cursor(1,0);
  1618  001440  0E00               	movlw	0
  1619  001442  6E0B               	movwf	LCD_set_cursor@row+1,c
  1620  001444  0E01               	movlw	1
  1621  001446  6E0A               	movwf	LCD_set_cursor@row,c
  1622  001448  0E00               	movlw	0
  1623  00144A  6E0D               	movwf	LCD_set_cursor@column+1,c
  1624  00144C  0E00               	movlw	0
  1625  00144E  6E0C               	movwf	LCD_set_cursor@column,c
  1626  001450  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1627                           
  1628                           ;main.c: 267:                             sprintf(lcdDisplay,"%.*s", 16, command + 2);
  1629  001454  0EB2               	movlw	low main@lcdDisplay
  1630  001456  6E3F               	movwf	sprintf@s,c
  1631  001458  0E00               	movlw	high main@lcdDisplay
  1632  00145A  6E40               	movwf	sprintf@s+1,c
  1633  00145C  0EE2               	movlw	low STR_13
  1634  00145E  6E41               	movwf	sprintf@fmt,c
  1635  001460  0E10               	movlw	high STR_13
  1636  001462  6E42               	movwf	sprintf@fmt+1,c
  1637  001464  0E00               	movlw	0
  1638  001466  6E44               	movwf	?_sprintf+5,c
  1639  001468  0E10               	movlw	16
  1640  00146A  6E43               	movwf	?_sprintf+4,c
  1641  00146C  0E9B               	movlw	low (main@command+2)
  1642  00146E  6E45               	movwf	?_sprintf+6,c
  1643  001470  0E00               	movlw	high (main@command+2)
  1644  001472  6E46               	movwf	?_sprintf+7,c
  1645  001474  EC96  F010         	call	_sprintf	;wreg free
  1646  001478  D7DC               	goto	l2938
  1647  00147A                     l2946:
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;main.c: 271:                             LCD_set_cursor(2,0);
  1651  00147A  0E00               	movlw	0
  1652  00147C  6E0B               	movwf	LCD_set_cursor@row+1,c
  1653  00147E  0E02               	movlw	2
  1654  001480  6E0A               	movwf	LCD_set_cursor@row,c
  1655  001482  0E00               	movlw	0
  1656  001484  6E0D               	movwf	LCD_set_cursor@column+1,c
  1657  001486  0E00               	movlw	0
  1658  001488  6E0C               	movwf	LCD_set_cursor@column,c
  1659  00148A  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1660                           
  1661                           ;main.c: 272:                             sprintf(lcdDisplay,"%.*s", 16, command + 2);
  1662  00148E  0EB2               	movlw	low main@lcdDisplay
  1663  001490  6E3F               	movwf	sprintf@s,c
  1664  001492  0E00               	movlw	high main@lcdDisplay
  1665  001494  6E40               	movwf	sprintf@s+1,c
  1666  001496  0EE2               	movlw	low STR_13
  1667  001498  6E41               	movwf	sprintf@fmt,c
  1668  00149A  0E10               	movlw	high STR_13
  1669  00149C  6E42               	movwf	sprintf@fmt+1,c
  1670  00149E  0E00               	movlw	0
  1671  0014A0  6E44               	movwf	?_sprintf+5,c
  1672  0014A2  0E10               	movlw	16
  1673  0014A4  6E43               	movwf	?_sprintf+4,c
  1674  0014A6  0E9B               	movlw	low (main@command+2)
  1675  0014A8  6E45               	movwf	?_sprintf+6,c
  1676  0014AA  0E00               	movlw	high (main@command+2)
  1677  0014AC  6E46               	movwf	?_sprintf+7,c
  1678  0014AE  EC96  F010         	call	_sprintf	;wreg free
  1679  0014B2  D7BF               	goto	l2938
  1680  0014B4                     l2952:
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;main.c: 276:                             LCD_set_cursor(3,0);
  1684  0014B4  0E00               	movlw	0
  1685  0014B6  6E0B               	movwf	LCD_set_cursor@row+1,c
  1686  0014B8  0E03               	movlw	3
  1687  0014BA  6E0A               	movwf	LCD_set_cursor@row,c
  1688  0014BC  0E00               	movlw	0
  1689  0014BE  6E0D               	movwf	LCD_set_cursor@column+1,c
  1690  0014C0  0E00               	movlw	0
  1691  0014C2  6E0C               	movwf	LCD_set_cursor@column,c
  1692  0014C4  ECE4  F010         	call	_LCD_set_cursor	;wreg free
  1693                           
  1694                           ;main.c: 277:                             sprintf(lcdDisplay,"%.*s", 16, command + 2);
  1695  0014C8  0EB2               	movlw	low main@lcdDisplay
  1696  0014CA  6E3F               	movwf	sprintf@s,c
  1697  0014CC  0E00               	movlw	high main@lcdDisplay
  1698  0014CE  6E40               	movwf	sprintf@s+1,c
  1699  0014D0  0EE2               	movlw	low STR_13
  1700  0014D2  6E41               	movwf	sprintf@fmt,c
  1701  0014D4  0E10               	movlw	high STR_13
  1702  0014D6  6E42               	movwf	sprintf@fmt+1,c
  1703  0014D8  0E00               	movlw	0
  1704  0014DA  6E44               	movwf	?_sprintf+5,c
  1705  0014DC  0E10               	movlw	16
  1706  0014DE  6E43               	movwf	?_sprintf+4,c
  1707  0014E0  0E9B               	movlw	low (main@command+2)
  1708  0014E2  6E45               	movwf	?_sprintf+6,c
  1709  0014E4  0E00               	movlw	high (main@command+2)
  1710  0014E6  6E46               	movwf	?_sprintf+7,c
  1711  0014E8  EC96  F010         	call	_sprintf	;wreg free
  1712  0014EC  D7A2               	goto	l2938
  1713  0014EE                     l2960:
  1714                           
  1715                           ; BSR set to: 0
  1716  0014EE  519A               	movf	(main@command+1)& (0+255),w,b
  1717  0014F0  6E51               	movwf	??_main& (0+255),c
  1718  0014F2  6A52               	clrf	(??_main+1)& (0+255),c
  1719                           
  1720                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1721                           ; Switch size 1, requested type "simple"
  1722                           ; Number of cases is 1, Range of values is 0 to 0
  1723                           ; switch strategies available:
  1724                           ; Name         Instructions Cycles
  1725                           ; simple_byte            4     3 (average)
  1726                           ;	Chosen strategy is simple_byte
  1727  0014F4  5052               	movf	??_main+1,w,c
  1728  0014F6  0A00               	xorlw	0	; case 0
  1729  0014F8  A4D8               	btfss	status,2,c
  1730  0014FA  D01C               	goto	l261
  1731                           
  1732                           ; BSR set to: 0
  1733                           ; Switch size 1, requested type "simple"
  1734                           ; Number of cases is 4, Range of values is 49 to 52
  1735                           ; switch strategies available:
  1736                           ; Name         Instructions Cycles
  1737                           ; simple_byte           13     7 (average)
  1738                           ;	Chosen strategy is simple_byte
  1739  0014FC  5051               	movf	??_main,w,c
  1740  0014FE  0A31               	xorlw	49	; case 49
  1741  001500  B4D8               	btfsc	status,2,c
  1742  001502  D77B               	goto	l2934
  1743  001504  0A03               	xorlw	3	; case 50
  1744  001506  B4D8               	btfsc	status,2,c
  1745  001508  D79B               	goto	l2940
  1746  00150A  0A01               	xorlw	1	; case 51
  1747  00150C  B4D8               	btfsc	status,2,c
  1748  00150E  D7B5               	goto	l2946
  1749  001510  0A07               	xorlw	7	; case 52
  1750  001512  B4D8               	btfsc	status,2,c
  1751  001514  D7CF               	goto	l2952
  1752  001516  D00E               	goto	l261
  1753  001518                     l2964:
  1754                           
  1755                           ; BSR set to: 0
  1756  001518  5199               	movf	main@command& (0+255),w,b
  1757  00151A  6E51               	movwf	??_main& (0+255),c
  1758  00151C  6A52               	clrf	(??_main+1)& (0+255),c
  1759                           
  1760                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1761                           ; Switch size 1, requested type "simple"
  1762                           ; Number of cases is 1, Range of values is 0 to 0
  1763                           ; switch strategies available:
  1764                           ; Name         Instructions Cycles
  1765                           ; simple_byte            4     3 (average)
  1766                           ;	Chosen strategy is simple_byte
  1767  00151E  5052               	movf	??_main+1,w,c
  1768  001520  0A00               	xorlw	0	; case 0
  1769  001522  A4D8               	btfss	status,2,c
  1770  001524  D007               	goto	l261
  1771                           
  1772                           ; BSR set to: 0
  1773                           ; Switch size 1, requested type "simple"
  1774                           ; Number of cases is 2, Range of values is 68 to 77
  1775                           ; switch strategies available:
  1776                           ; Name         Instructions Cycles
  1777                           ; simple_byte            7     4 (average)
  1778                           ;	Chosen strategy is simple_byte
  1779  001526  5051               	movf	??_main,w,c
  1780  001528  0A44               	xorlw	68	; case 68
  1781  00152A  B4D8               	btfsc	status,2,c
  1782  00152C  D7E0               	goto	l2960
  1783  00152E  0A09               	xorlw	9	; case 77
  1784  001530  B4D8               	btfsc	status,2,c
  1785  001532  D751               	goto	l2932
  1786  001534                     l261:
  1787                           
  1788                           ;main.c: 289:         if(key_was_pressed){
  1789                           
  1790                           ; BSR set to: 0
  1791  001534  0100               	movlb	0	; () banked
  1792  001536  51C8               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1793  001538  B4D8               	btfsc	status,2,c
  1794  00153A  D60A               	goto	l2836
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 290:             key_was_pressed = 0;
  1798  00153C  0E00               	movlw	0
  1799  00153E  6FC8               	movwf	_key_was_pressed& (0+255),b	;volatile
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;main.c: 291:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1803  001540  3881               	swapf	3969,w,c	;volatile
  1804  001542  0B0F               	andlw	15
  1805  001544  0B0F               	andlw	15
  1806  001546  6FC4               	movwf	main@keypress& (0+255),b
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 292:             sprintf(uart_char_to_send, "%c%c\n", 'K', keys[keypress]);
  1810  001548  0E80               	movlw	low main@uart_char_to_send
  1811  00154A  6E3F               	movwf	sprintf@s,c
  1812  00154C  0E00               	movlw	high main@uart_char_to_send
  1813  00154E  6E40               	movwf	sprintf@s+1,c
  1814  001550  0EDC               	movlw	low STR_17
  1815  001552  6E41               	movwf	sprintf@fmt,c
  1816  001554  0E10               	movlw	high STR_17
  1817  001556  6E42               	movwf	sprintf@fmt+1,c
  1818  001558  0E00               	movlw	0
  1819  00155A  6E44               	movwf	?_sprintf+5,c
  1820  00155C  0E4B               	movlw	75
  1821  00155E  6E43               	movwf	?_sprintf+4,c
  1822  001560  0E01               	movlw	low _keys
  1823  001562  25C4               	addwf	main@keypress& (0+255),w,b
  1824  001564  6EF6               	movwf	tblptrl,c
  1825  001566  6AF7               	clrf	tblptrh,c
  1826  001568  0E10               	movlw	high _keys
  1827  00156A  22F7               	addwfc	tblptrh,f,c
  1828  00156C                     	if	0	;There are less than 3 active tblptr bytes
  1829  00156C                     	endif
  1830  00156C  0008               	tblrd		*
  1831  00156E  50F5               	movf	tablat,w,c
  1832  001570  6E45               	movwf	?_sprintf+6,c
  1833  001572  6A46               	clrf	?_sprintf+7,c
  1834  001574  EC96  F010         	call	_sprintf	;wreg free
  1835                           
  1836                           ;main.c: 293:             UART_send_string(uart_char_to_send);
  1837  001578  0E80               	movlw	low main@uart_char_to_send
  1838  00157A  6E07               	movwf	UART_send_string@message,c
  1839  00157C  0E00               	movlw	high main@uart_char_to_send
  1840  00157E  6E08               	movwf	UART_send_string@message+1,c
  1841  001580  EC67  F00E         	call	_UART_send_string	;wreg free
  1842  001584  D5E5               	goto	l2836
  1843  001586                     __end_of_main:
  1844                           	opt callstack 0
  1845                           
  1846 ;; *************** function _sprintf *****************
  1847 ;; Defined at:
  1848 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  s               2   62[COMRAM] PTR unsigned char 
  1851 ;;		 -> main@uart_char_to_send(25), main@lcdDisplay(16), 
  1852 ;;  fmt             2   64[COMRAM] PTR const unsigned char 
  1853 ;;		 -> STR_17(6), STR_16(5), STR_15(5), STR_14(5), 
  1854 ;;		 -> STR_13(5), 
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;  f               6   74[COMRAM] struct _IO_FILE
  1857 ;;  ap              2   72[COMRAM] PTR void [1]
  1858 ;;		 -> ?_sprintf(2), 
  1859 ;;  ret             2    0        int 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  2   62[COMRAM] int 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1869 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;Total ram usage:       18 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    9
  1876 ;; This function calls:
  1877 ;;		_vfprintf
  1878 ;; This function is called by:
  1879 ;;		_main
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text1
  1884  00212C                     __ptext1:
  1885                           	opt callstack 0
  1886  00212C                     _sprintf:
  1887                           	opt callstack 21
  1888                           
  1889                           ;incstack = 0
  1890  00212C  0E43               	movlw	low (?_sprintf+4)
  1891  00212E  6E49               	movwf	sprintf@ap,c
  1892  002130  0E00               	movlw	high (?_sprintf+4)
  1893  002132  6E4A               	movwf	sprintf@ap+1,c
  1894  002134  C03F  F04B         	movff	sprintf@s,sprintf@f
  1895  002138  C040  F04C         	movff	sprintf@s+1,sprintf@f+1
  1896  00213C  0E00               	movlw	0
  1897  00213E  6E4E               	movwf	sprintf@f+3,c
  1898  002140  0E00               	movlw	0
  1899  002142  6E4D               	movwf	sprintf@f+2,c
  1900  002144  0E00               	movlw	0
  1901  002146  6E50               	movwf	sprintf@f+5,c
  1902  002148  0E00               	movlw	0
  1903  00214A  6E4F               	movwf	sprintf@f+4,c
  1904  00214C  0E4B               	movlw	low sprintf@f
  1905  00214E  6E37               	movwf	vfprintf@fp,c
  1906  002150  0E00               	movlw	high sprintf@f
  1907  002152  6E38               	movwf	vfprintf@fp+1,c
  1908  002154  C041  F039         	movff	sprintf@fmt,vfprintf@fmt
  1909  002158  C042  F03A         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1910  00215C  0E49               	movlw	low sprintf@ap
  1911  00215E  6E3B               	movwf	vfprintf@ap,c
  1912  002160  0E00               	movlw	high sprintf@ap
  1913  002162  6E3C               	movwf	vfprintf@ap+1,c
  1914  002164  EC6D  F010         	call	_vfprintf	;wreg free
  1915  002168  504D               	movf	sprintf@f+2,w,c
  1916  00216A  243F               	addwf	sprintf@s,w,c
  1917  00216C  6ED9               	movwf	fsr2l,c
  1918  00216E  504E               	movf	sprintf@f+3,w,c
  1919  002170  2040               	addwfc	sprintf@s+1,w,c
  1920  002172  6EDA               	movwf	fsr2h,c
  1921  002174  0E00               	movlw	0
  1922  002176  6EDF               	movwf	indf2,c
  1923  002178  0012               	return		;funcret
  1924  00217A                     __end_of_sprintf:
  1925                           	opt callstack 0
  1926                           
  1927 ;; *************** function _vfprintf *****************
  1928 ;; Defined at:
  1929 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;  fp              2   54[COMRAM] PTR struct _IO_FILE
  1932 ;;		 -> sprintf@f(6), 
  1933 ;;  fmt             2   56[COMRAM] PTR const unsigned char 
  1934 ;;		 -> STR_17(6), STR_16(5), STR_15(5), STR_14(5), 
  1935 ;;		 -> STR_13(5), 
  1936 ;;  ap              2   58[COMRAM] PTR PTR void 
  1937 ;;		 -> sprintf@ap(2), 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  cfmt            2   60[COMRAM] PTR unsigned char 
  1940 ;;		 -> STR_17(6), STR_16(5), STR_15(5), STR_14(5), 
  1941 ;;		 -> STR_13(5), 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  2   54[COMRAM] int 
  1944 ;; Registers used:
  1945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1951 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;Total ram usage:        8 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:    8
  1958 ;; This function calls:
  1959 ;;		_vfpfcnvrt
  1960 ;; This function is called by:
  1961 ;;		_sprintf
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text2
  1966  0020DA                     __ptext2:
  1967                           	opt callstack 0
  1968  0020DA                     _vfprintf:
  1969                           	opt callstack 21
  1970                           
  1971                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1972                           
  1973                           ;incstack = 0
  1974  0020DA  C039  F03D         	movff	vfprintf@fmt,vfprintf@cfmt
  1975  0020DE  C03A  F03E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1976                           
  1977                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  1978  0020E2  0E00               	movlw	0
  1979  0020E4  6E5F               	movwf	_nout+1,c
  1980  0020E6  0E00               	movlw	0
  1981  0020E8  6E5E               	movwf	_nout,c
  1982                           
  1983                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  1984  0020EA  D012               	goto	l2544
  1985  0020EC                     l2542:
  1986                           
  1987                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  1988  0020EC  C037  F026         	movff	vfprintf@fp,vfpfcnvrt@fp
  1989  0020F0  C038  F027         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1990  0020F4  0E3D               	movlw	low vfprintf@cfmt
  1991  0020F6  6E28               	movwf	vfpfcnvrt@fmt,c
  1992  0020F8  0E00               	movlw	high vfprintf@cfmt
  1993  0020FA  6E29               	movwf	vfpfcnvrt@fmt+1,c
  1994  0020FC  C03B  F02A         	movff	vfprintf@ap,vfpfcnvrt@ap
  1995  002100  C03C  F02B         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1996  002104  ECC3  F00A         	call	_vfpfcnvrt	;wreg free
  1997  002108  5026               	movf	?_vfpfcnvrt,w,c
  1998  00210A  265E               	addwf	_nout,f,c
  1999  00210C  5027               	movf	?_vfpfcnvrt+1,w,c
  2000  00210E  225F               	addwfc	_nout+1,f,c
  2001  002110                     l2544:
  2002                           
  2003                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  2004  002110  C03D  FFF6         	movff	vfprintf@cfmt,tblptrl
  2005  002114  C03E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2006  002118                     	if	0	;tblptru may be non-zero
  2007  002118                     	endif
  2008  002118                     	if	0	;tblptru may be non-zero
  2009  002118                     	endif
  2010  002118  0008               	tblrd		*
  2011  00211A  50F5               	movf	tablat,w,c
  2012  00211C  0900               	iorlw	0
  2013  00211E  A4D8               	btfss	status,2,c
  2014  002120  D7E5               	goto	l2542
  2015                           
  2016                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  2017  002122  C05E  F037         	movff	_nout,?_vfprintf
  2018  002126  C05F  F038         	movff	_nout+1,?_vfprintf+1
  2019  00212A  0012               	return		;funcret
  2020  00212C                     __end_of_vfprintf:
  2021                           	opt callstack 0
  2022                           
  2023 ;; *************** function _vfpfcnvrt *****************
  2024 ;; Defined at:
  2025 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  fp              2   37[COMRAM] PTR struct _IO_FILE
  2028 ;;		 -> sprintf@f(6), 
  2029 ;;  fmt             2   39[COMRAM] PTR PTR unsigned char 
  2030 ;;		 -> vfprintf@cfmt(2), 
  2031 ;;  ap              2   41[COMRAM] PTR PTR void 
  2032 ;;		 -> sprintf@ap(2), 
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;  llu             8    0        unsigned long long 
  2035 ;;  ll              8    0        long long 
  2036 ;;  f               4    0        long long 
  2037 ;;  vp              3    0        PTR void 
  2038 ;;  ct              3    0        unsigned char [3]
  2039 ;;  cp              2   47[COMRAM] PTR unsigned char 
  2040 ;;		 -> ?_sprintf(2), main@command(25), 
  2041 ;;  i               2    0        int 
  2042 ;;  done            2    0        int 
  2043 ;;  c               1   53[COMRAM] unsigned char 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  2   37[COMRAM] int 
  2046 ;; Registers used:
  2047 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2053 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2054 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2055 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;Total ram usage:       17 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:    7
  2060 ;; This function calls:
  2061 ;;		_atoi
  2062 ;;		_ctoa
  2063 ;;		_fputc
  2064 ;;		_isdigit
  2065 ;;		_stoa
  2066 ;; This function is called by:
  2067 ;;		_vfprintf
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text3
  2072  001586                     __ptext3:
  2073                           	opt callstack 0
  2074  001586                     _vfpfcnvrt:
  2075                           	opt callstack 21
  2076                           
  2077                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  2078                           
  2079                           ;incstack = 0
  2080  001586  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2081  00158A  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2082  00158E  CFDE FFF6          	movff	postinc2,tblptrl
  2083  001592  CFDD FFF7          	movff	postdec2,tblptrh
  2084  001596                     	if	0	;tblptru may be non-zero
  2085  001596                     	endif
  2086  001596                     	if	0	;tblptru may be non-zero
  2087  001596                     	endif
  2088  001596  0008               	tblrd		*
  2089  001598  50F5               	movf	tablat,w,c
  2090  00159A  0A25               	xorlw	37
  2091  00159C  A4D8               	btfss	status,2,c
  2092  00159E  D18D               	goto	l2500
  2093                           
  2094                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  2095  0015A0  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2096  0015A4  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2097  0015A8  2ADE               	incf	postinc2,f,c
  2098  0015AA  0E00               	movlw	0
  2099  0015AC  22DD               	addwfc	postdec2,f,c
  2100                           
  2101                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  2102  0015AE  0E00               	movlw	0
  2103  0015B0  6E61               	movwf	_width+1,c
  2104  0015B2  0E00               	movlw	0
  2105  0015B4  6E60               	movwf	_width,c
  2106  0015B6  C060  F064         	movff	_width,_flags
  2107  0015BA  C061  F065         	movff	_width+1,_flags+1
  2108                           
  2109                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  2110  0015BE  6862               	setf	_prec,c
  2111  0015C0  6863               	setf	_prec+1,c
  2112                           
  2113                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  2114  0015C2  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2115  0015C6  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2116  0015CA  CFDE FFF6          	movff	postinc2,tblptrl
  2117  0015CE  CFDD FFF7          	movff	postdec2,tblptrh
  2118  0015D2                     	if	0	;tblptru may be non-zero
  2119  0015D2                     	endif
  2120  0015D2                     	if	0	;tblptru may be non-zero
  2121  0015D2                     	endif
  2122  0015D2  0008               	tblrd		*
  2123  0015D4  50F5               	movf	tablat,w,c
  2124  0015D6  0A2A               	xorlw	42
  2125  0015D8  A4D8               	btfss	status,2,c
  2126  0015DA  D023               	goto	l2438
  2127                           
  2128                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  2129  0015DC  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2130  0015E0  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2131  0015E4  2ADE               	incf	postinc2,f,c
  2132  0015E6  0E00               	movlw	0
  2133  0015E8  22DD               	addwfc	postdec2,f,c
  2134                           
  2135                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  2136  0015EA  C02A  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2137  0015EE  C02B  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2138  0015F2  CFDF F02C          	movff	indf2,??_vfpfcnvrt
  2139  0015F6  0E02               	movlw	2
  2140  0015F8  26DE               	addwf	postinc2,f,c
  2141  0015FA  CFDF F02D          	movff	indf2,??_vfpfcnvrt+1
  2142  0015FE  0E00               	movlw	0
  2143  001600  22DD               	addwfc	postdec2,f,c
  2144  001602  C02C  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2145  001606  C02D  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2146  00160A  CFDE F060          	movff	postinc2,_width
  2147  00160E  CFDD F061          	movff	postdec2,_width+1
  2148                           
  2149                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  2150  001612  AE61               	btfss	_width+1,7,c
  2151  001614  D03F               	goto	u1320
  2152                           
  2153                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  2154  001616  8064               	bsf	_flags,0,c
  2155                           
  2156                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  2157  001618  6C60               	negf	_width,c
  2158  00161A  1E61               	comf	_width+1,f,c
  2159  00161C  B0D8               	btfsc	status,0,c
  2160  00161E  2A61               	incf	_width+1,f,c
  2161  001620  D039               	goto	u1320
  2162  001622                     l2438:
  2163                           
  2164                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  2165  001622  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2166  001626  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2167  00162A  CFDE F00D          	movff	postinc2,atoi@s
  2168  00162E  CFDD F00E          	movff	postdec2,atoi@s+1
  2169  001632  EC77  F00C         	call	_atoi	;wreg free
  2170  001636  C00D  F060         	movff	?_atoi,_width
  2171  00163A  C00E  F061         	movff	?_atoi+1,_width+1
  2172                           
  2173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  2174  00163E  D007               	goto	l2442
  2175  001640                     l2440:
  2176                           
  2177                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  2178  001640  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2179  001644  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2180  001648  2ADE               	incf	postinc2,f,c
  2181  00164A  0E00               	movlw	0
  2182  00164C  22DD               	addwfc	postdec2,f,c
  2183  00164E                     l2442:
  2184  00164E  0ED0               	movlw	208
  2185  001650  6E2C               	movwf	??_vfpfcnvrt& (0+255),c
  2186  001652  0EFF               	movlw	255
  2187  001654  6E2D               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  2188  001656  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2189  00165A  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2190  00165E  CFDE FFF6          	movff	postinc2,tblptrl
  2191  001662  CFDD FFF7          	movff	postdec2,tblptrh
  2192  001666                     	if	0	;tblptru may be non-zero
  2193  001666                     	endif
  2194  001666                     	if	0	;tblptru may be non-zero
  2195  001666                     	endif
  2196  001666  0008               	tblrd		*
  2197  001668  50F5               	movf	tablat,w,c
  2198  00166A  6E2E               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  2199  00166C  6A2F               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  2200  00166E  502C               	movf	??_vfpfcnvrt,w,c
  2201  001670  262E               	addwf	??_vfpfcnvrt+2,f,c
  2202  001672  502D               	movf	??_vfpfcnvrt+1,w,c
  2203  001674  222F               	addwfc	??_vfpfcnvrt+3,f,c
  2204  001676  502F               	movf	??_vfpfcnvrt+3,w,c
  2205  001678  E106               	bnz	u1300
  2206  00167A  0E0A               	movlw	10
  2207  00167C  5C2E               	subwf	??_vfpfcnvrt+2,w,c
  2208  00167E  B0D8               	btfsc	status,0,c
  2209  001680  D002               	goto	u1300
  2210  001682  0E01               	movlw	1
  2211  001684  D001               	goto	u1310
  2212  001686                     u1300:
  2213  001686  0E00               	movlw	0
  2214  001688                     u1310:
  2215  001688  6E32               	movwf	_vfpfcnvrt$1102,c
  2216  00168A  6A33               	clrf	_vfpfcnvrt$1102+1,c
  2217  00168C  5032               	movf	_vfpfcnvrt$1102,w,c
  2218  00168E  1033               	iorwf	_vfpfcnvrt$1102+1,w,c
  2219  001690  A4D8               	btfss	status,2,c
  2220  001692  D7D6               	goto	l2440
  2221  001694                     u1320:
  2222                           
  2223                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 740:       
      +                            if ((*fmt)[0] == '.') {
  2224  001694  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2225  001698  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2226  00169C  CFDE FFF6          	movff	postinc2,tblptrl
  2227  0016A0  CFDD FFF7          	movff	postdec2,tblptrh
  2228  0016A4                     	if	0	;tblptru may be non-zero
  2229  0016A4                     	endif
  2230  0016A4                     	if	0	;tblptru may be non-zero
  2231  0016A4                     	endif
  2232  0016A4  0008               	tblrd		*
  2233  0016A6  50F5               	movf	tablat,w,c
  2234  0016A8  0A2E               	xorlw	46
  2235  0016AA  A4D8               	btfss	status,2,c
  2236  0016AC  D06D               	goto	u1370
  2237                           
  2238                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 741:       
      +                                prec = 0;
  2239  0016AE  0E00               	movlw	0
  2240  0016B0  6E63               	movwf	_prec+1,c
  2241  0016B2  0E00               	movlw	0
  2242  0016B4  6E62               	movwf	_prec,c
  2243                           
  2244                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 742:       
      +                                ++*fmt;
  2245  0016B6  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2246  0016BA  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2247  0016BE  2ADE               	incf	postinc2,f,c
  2248  0016C0  0E00               	movlw	0
  2249  0016C2  22DD               	addwfc	postdec2,f,c
  2250                           
  2251                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 743:       
      +                                if ((*fmt)[0] == '*') {
  2252  0016C4  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2253  0016C8  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2254  0016CC  CFDE FFF6          	movff	postinc2,tblptrl
  2255  0016D0  CFDD FFF7          	movff	postdec2,tblptrh
  2256  0016D4                     	if	0	;tblptru may be non-zero
  2257  0016D4                     	endif
  2258  0016D4                     	if	0	;tblptru may be non-zero
  2259  0016D4                     	endif
  2260  0016D4  0008               	tblrd		*
  2261  0016D6  50F5               	movf	tablat,w,c
  2262  0016D8  0A2A               	xorlw	42
  2263  0016DA  A4D8               	btfss	status,2,c
  2264  0016DC  D01C               	goto	l2458
  2265                           
  2266                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 744:       
      +                                    ++*fmt;
  2267  0016DE  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2268  0016E2  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2269  0016E6  2ADE               	incf	postinc2,f,c
  2270  0016E8  0E00               	movlw	0
  2271  0016EA  22DD               	addwfc	postdec2,f,c
  2272                           
  2273                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 745:       
      +                                    prec = (*(int *)__va_arg(*(int **)ap, (int)0));
  2274  0016EC  C02A  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2275  0016F0  C02B  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2276  0016F4  CFDF F02C          	movff	indf2,??_vfpfcnvrt
  2277  0016F8  0E02               	movlw	2
  2278  0016FA  26DE               	addwf	postinc2,f,c
  2279  0016FC  CFDF F02D          	movff	indf2,??_vfpfcnvrt+1
  2280  001700  0E00               	movlw	0
  2281  001702  22DD               	addwfc	postdec2,f,c
  2282  001704  C02C  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2283  001708  C02D  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2284  00170C  CFDE F062          	movff	postinc2,_prec
  2285  001710  CFDD F063          	movff	postdec2,_prec+1
  2286                           
  2287                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 746:       
      +                                } else {
  2288  001714  D039               	goto	u1370
  2289  001716                     l2458:
  2290                           
  2291                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 747:       
      +                                    prec = atoi(*fmt);
  2292  001716  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2293  00171A  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2294  00171E  CFDE F00D          	movff	postinc2,atoi@s
  2295  001722  CFDD F00E          	movff	postdec2,atoi@s+1
  2296  001726  EC77  F00C         	call	_atoi	;wreg free
  2297  00172A  C00D  F062         	movff	?_atoi,_prec
  2298  00172E  C00E  F063         	movff	?_atoi+1,_prec+1
  2299                           
  2300                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 748:       
      +                                    while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  2301  001732  D007               	goto	l2462
  2302  001734                     l2460:
  2303                           
  2304                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 749:       
      +                                        ++*fmt;
  2305  001734  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2306  001738  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2307  00173C  2ADE               	incf	postinc2,f,c
  2308  00173E  0E00               	movlw	0
  2309  001740  22DD               	addwfc	postdec2,f,c
  2310  001742                     l2462:
  2311  001742  0ED0               	movlw	208
  2312  001744  6E2C               	movwf	??_vfpfcnvrt& (0+255),c
  2313  001746  0EFF               	movlw	255
  2314  001748  6E2D               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  2315  00174A  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2316  00174E  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2317  001752  CFDE FFF6          	movff	postinc2,tblptrl
  2318  001756  CFDD FFF7          	movff	postdec2,tblptrh
  2319  00175A                     	if	0	;tblptru may be non-zero
  2320  00175A                     	endif
  2321  00175A                     	if	0	;tblptru may be non-zero
  2322  00175A                     	endif
  2323  00175A  0008               	tblrd		*
  2324  00175C  50F5               	movf	tablat,w,c
  2325  00175E  6E2E               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  2326  001760  6A2F               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  2327  001762  502C               	movf	??_vfpfcnvrt,w,c
  2328  001764  262E               	addwf	??_vfpfcnvrt+2,f,c
  2329  001766  502D               	movf	??_vfpfcnvrt+1,w,c
  2330  001768  222F               	addwfc	??_vfpfcnvrt+3,f,c
  2331  00176A  502F               	movf	??_vfpfcnvrt+3,w,c
  2332  00176C  E106               	bnz	u1350
  2333  00176E  0E0A               	movlw	10
  2334  001770  5C2E               	subwf	??_vfpfcnvrt+2,w,c
  2335  001772  B0D8               	btfsc	status,0,c
  2336  001774  D002               	goto	u1350
  2337  001776  0E01               	movlw	1
  2338  001778  D001               	goto	u1360
  2339  00177A                     u1350:
  2340  00177A  0E00               	movlw	0
  2341  00177C                     u1360:
  2342  00177C  6E34               	movwf	_vfpfcnvrt$1103,c
  2343  00177E  6A35               	clrf	_vfpfcnvrt$1103+1,c
  2344  001780  5034               	movf	_vfpfcnvrt$1103,w,c
  2345  001782  1035               	iorwf	_vfpfcnvrt$1103+1,w,c
  2346  001784  A4D8               	btfss	status,2,c
  2347  001786  D7D6               	goto	l2460
  2348  001788                     u1370:
  2349                           
  2350                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  2351  001788  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2352  00178C  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2353  001790  CFDE FFF6          	movff	postinc2,tblptrl
  2354  001794  CFDD FFF7          	movff	postdec2,tblptrh
  2355  001798                     	if	0	;tblptru may be non-zero
  2356  001798                     	endif
  2357  001798                     	if	0	;tblptru may be non-zero
  2358  001798                     	endif
  2359  001798  0008               	tblrd		*
  2360  00179A  50F5               	movf	tablat,w,c
  2361  00179C  0A63               	xorlw	99
  2362  00179E  A4D8               	btfss	status,2,c
  2363  0017A0  D026               	goto	l2476
  2364                           
  2365                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  2366  0017A2  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2367  0017A6  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2368  0017AA  2ADE               	incf	postinc2,f,c
  2369  0017AC  0E00               	movlw	0
  2370  0017AE  22DD               	addwfc	postdec2,f,c
  2371                           
  2372                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  2373  0017B0  C02A  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2374  0017B4  C02B  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2375  0017B8  CFDF F02C          	movff	indf2,??_vfpfcnvrt
  2376  0017BC  0E02               	movlw	2
  2377  0017BE  26DE               	addwf	postinc2,f,c
  2378  0017C0  CFDF F02D          	movff	indf2,??_vfpfcnvrt+1
  2379  0017C4  0E00               	movlw	0
  2380  0017C6  22DD               	addwfc	postdec2,f,c
  2381  0017C8  C02C  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2382  0017CC  C02D  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2383  0017D0  50DF               	movf	indf2,w,c
  2384  0017D2  6E36               	movwf	vfpfcnvrt@c,c
  2385                           
  2386                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  2387  0017D4  C026  F021         	movff	vfpfcnvrt@fp,ctoa@fp
  2388  0017D8  C027  F022         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  2389  0017DC  C036  F023         	movff	vfpfcnvrt@c,ctoa@c
  2390  0017E0  ECBD  F010         	call	_ctoa	;wreg free
  2391  0017E4  C021  F026         	movff	?_ctoa,?_vfpfcnvrt
  2392  0017E8  C022  F027         	movff	?_ctoa+1,?_vfpfcnvrt+1
  2393  0017EC  0012               	return	
  2394  0017EE                     l2476:
  2395                           
  2396                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
  2397  0017EE  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2398  0017F2  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2399  0017F6  CFDE FFF6          	movff	postinc2,tblptrl
  2400  0017FA  CFDD FFF7          	movff	postdec2,tblptrh
  2401  0017FE                     	if	0	;tblptru may be non-zero
  2402  0017FE                     	endif
  2403  0017FE                     	if	0	;tblptru may be non-zero
  2404  0017FE                     	endif
  2405  0017FE  0008               	tblrd		*
  2406  001800  50F5               	movf	tablat,w,c
  2407  001802  0A73               	xorlw	115
  2408  001804  A4D8               	btfss	status,2,c
  2409  001806  D02A               	goto	l2484
  2410                           
  2411                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
  2412  001808  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2413  00180C  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2414  001810  2ADE               	incf	postinc2,f,c
  2415  001812  0E00               	movlw	0
  2416  001814  22DD               	addwfc	postdec2,f,c
  2417                           
  2418                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
  2419  001816  C02A  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2420  00181A  C02B  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2421  00181E  CFDF F02C          	movff	indf2,??_vfpfcnvrt
  2422  001822  0E02               	movlw	2
  2423  001824  26DE               	addwf	postinc2,f,c
  2424  001826  CFDF F02D          	movff	indf2,??_vfpfcnvrt+1
  2425  00182A  0E00               	movlw	0
  2426  00182C  22DD               	addwfc	postdec2,f,c
  2427  00182E  C02C  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2428  001832  C02D  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2429  001836  CFDE F030          	movff	postinc2,vfpfcnvrt@cp
  2430  00183A  CFDD F031          	movff	postdec2,vfpfcnvrt@cp+1
  2431                           
  2432                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
  2433  00183E  C026  F00F         	movff	vfpfcnvrt@fp,stoa@fp
  2434  001842  C027  F010         	movff	vfpfcnvrt@fp+1,stoa@fp+1
  2435  001846  C030  F011         	movff	vfpfcnvrt@cp,stoa@s
  2436  00184A  C031  F012         	movff	vfpfcnvrt@cp+1,stoa@s+1
  2437  00184E  EC17  F00D         	call	_stoa	;wreg free
  2438  001852  C00F  F026         	movff	?_stoa,?_vfpfcnvrt
  2439  001856  C010  F027         	movff	?_stoa+1,?_vfpfcnvrt+1
  2440  00185A  0012               	return	
  2441  00185C                     l2484:
  2442                           
  2443                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  2444  00185C  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2445  001860  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2446  001864  CFDE FFF6          	movff	postinc2,tblptrl
  2447  001868  CFDD FFF7          	movff	postdec2,tblptrh
  2448  00186C                     	if	0	;tblptru may be non-zero
  2449  00186C                     	endif
  2450  00186C                     	if	0	;tblptru may be non-zero
  2451  00186C                     	endif
  2452  00186C  0008               	tblrd		*
  2453  00186E  50F5               	movf	tablat,w,c
  2454  001870  0A25               	xorlw	37
  2455  001872  A4D8               	btfss	status,2,c
  2456  001874  D016               	goto	l2494
  2457                           
  2458                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  2459  001876  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2460  00187A  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2461  00187E  2ADE               	incf	postinc2,f,c
  2462  001880  0E00               	movlw	0
  2463  001882  22DD               	addwfc	postdec2,f,c
  2464                           
  2465                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  2466  001884  0E00               	movlw	0
  2467  001886  6E07               	movwf	fputc@c+1,c
  2468  001888  0E25               	movlw	37
  2469  00188A  6E06               	movwf	fputc@c,c
  2470  00188C  C026  F008         	movff	vfpfcnvrt@fp,fputc@fp
  2471  001890  C027  F009         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2472  001894  ECBC  F00E         	call	_fputc	;wreg free
  2473  001898                     l2490:
  2474                           
  2475                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  2476  001898  0E00               	movlw	0
  2477  00189A  6E27               	movwf	?_vfpfcnvrt+1,c
  2478  00189C  0E01               	movlw	1
  2479  00189E  6E26               	movwf	?_vfpfcnvrt,c
  2480  0018A0  0012               	return	
  2481  0018A2                     l2494:
  2482                           
  2483                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  2484  0018A2  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2485  0018A6  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2486  0018AA  2ADE               	incf	postinc2,f,c
  2487  0018AC  0E00               	movlw	0
  2488  0018AE  22DD               	addwfc	postdec2,f,c
  2489                           
  2490                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  2491  0018B0  0E00               	movlw	0
  2492  0018B2  6E27               	movwf	?_vfpfcnvrt+1,c
  2493  0018B4  0E00               	movlw	0
  2494  0018B6  6E26               	movwf	?_vfpfcnvrt,c
  2495  0018B8  0012               	return	
  2496  0018BA                     l2500:
  2497                           
  2498                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  2499  0018BA  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2500  0018BE  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2501  0018C2  CFDE FFF6          	movff	postinc2,tblptrl
  2502  0018C6  CFDD FFF7          	movff	postdec2,tblptrh
  2503  0018CA                     	if	0	;tblptru may be non-zero
  2504  0018CA                     	endif
  2505  0018CA                     	if	0	;tblptru may be non-zero
  2506  0018CA                     	endif
  2507  0018CA  0008               	tblrd		*
  2508  0018CC  50F5               	movf	tablat,w,c
  2509  0018CE  6E06               	movwf	fputc@c,c
  2510  0018D0  6A07               	clrf	fputc@c+1,c
  2511  0018D2  C026  F008         	movff	vfpfcnvrt@fp,fputc@fp
  2512  0018D6  C027  F009         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2513  0018DA  ECBC  F00E         	call	_fputc	;wreg free
  2514                           
  2515                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  2516  0018DE  C028  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2517  0018E2  C029  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2518  0018E6  2ADE               	incf	postinc2,f,c
  2519  0018E8  0E00               	movlw	0
  2520  0018EA  22DD               	addwfc	postdec2,f,c
  2521  0018EC  D7D5               	goto	l2490
  2522  0018EE                     __end_of_vfpfcnvrt:
  2523                           	opt callstack 0
  2524                           
  2525 ;; *************** function _stoa *****************
  2526 ;; Defined at:
  2527 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  fp              2   14[COMRAM] PTR struct _IO_FILE
  2530 ;;		 -> sprintf@f(6), 
  2531 ;;  s               2   16[COMRAM] PTR unsigned char 
  2532 ;;		 -> ?_sprintf(2), main@command(25), 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  nuls            7   19[COMRAM] unsigned char [7]
  2535 ;;  l               2   34[COMRAM] int 
  2536 ;;  p               2   32[COMRAM] int 
  2537 ;;  cp              2   30[COMRAM] PTR unsigned char 
  2538 ;;		 -> ?_sprintf(2), stoa@nuls(7), main@command(25), 
  2539 ;;  w               2   28[COMRAM] int 
  2540 ;;  i               2   26[COMRAM] int 
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  2   14[COMRAM] int 
  2543 ;; Registers used:
  2544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2550 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;Total ram usage:       22 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    4
  2557 ;; This function calls:
  2558 ;;		_fputc
  2559 ;;		_strlen
  2560 ;; This function is called by:
  2561 ;;		_vfpfcnvrt
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text4
  2566  001A2E                     __ptext4:
  2567                           	opt callstack 0
  2568  001A2E                     _stoa:
  2569                           	opt callstack 23
  2570                           
  2571                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
  2572                           
  2573                           ;incstack = 0
  2574  001A2E  EE20  F06A         	lfsr	2,stoa@F1136
  2575  001A32  EE10  F014         	lfsr	1,stoa@nuls
  2576  001A36  0E06               	movlw	6
  2577  001A38                     u1091:
  2578  001A38  CFDB FFE3          	movff	plusw2,plusw1
  2579  001A3C  06E8               	decf	wreg,f,c
  2580  001A3E  E2FC               	bc	u1091
  2581                           
  2582                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
  2583  001A40  C011  F01F         	movff	stoa@s,stoa@cp
  2584  001A44  C012  F020         	movff	stoa@s+1,stoa@cp+1
  2585                           
  2586                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
  2587  001A48  501F               	movf	stoa@cp,w,c
  2588  001A4A  1020               	iorwf	stoa@cp+1,w,c
  2589  001A4C  A4D8               	btfss	status,2,c
  2590  001A4E  D004               	goto	l2340
  2591                           
  2592                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
  2593  001A50  0E14               	movlw	low stoa@nuls
  2594  001A52  6E1F               	movwf	stoa@cp,c
  2595  001A54  0E00               	movlw	high stoa@nuls
  2596  001A56  6E20               	movwf	stoa@cp+1,c
  2597  001A58                     l2340:
  2598                           
  2599                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
  2600  001A58  C01F  F006         	movff	stoa@cp,strlen@s
  2601  001A5C  C020  F007         	movff	stoa@cp+1,strlen@s+1
  2602  001A60  ECB9  F011         	call	_strlen	;wreg free
  2603  001A64  C006  F023         	movff	?_strlen,stoa@l
  2604  001A68  C007  F024         	movff	?_strlen+1,stoa@l+1
  2605                           
  2606                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
  2607  001A6C  C062  F021         	movff	_prec,stoa@p
  2608  001A70  C063  F022         	movff	_prec+1,stoa@p+1
  2609                           
  2610                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
  2611  001A74  BE22               	btfsc	stoa@p+1,7,c
  2612  001A76  D00E               	goto	l434
  2613  001A78  5023               	movf	stoa@l,w,c
  2614  001A7A  5C21               	subwf	stoa@p,w,c
  2615  001A7C  5022               	movf	stoa@p+1,w,c
  2616  001A7E  0A80               	xorlw	128
  2617  001A80  6E13               	movwf	??_stoa& (0+255),c
  2618  001A82  5024               	movf	stoa@l+1,w,c
  2619  001A84  0A80               	xorlw	128
  2620  001A86  5813               	subwfb	??_stoa& (0+255),w,c
  2621  001A88  B0D8               	btfsc	status,0,c
  2622  001A8A  D004               	goto	l434
  2623  001A8C  C021  F023         	movff	stoa@p,stoa@l
  2624  001A90  C022  F024         	movff	stoa@p+1,stoa@l+1
  2625  001A94                     l434:
  2626                           
  2627                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
  2628  001A94  C023  F021         	movff	stoa@l,stoa@p
  2629  001A98  C024  F022         	movff	stoa@l+1,stoa@p+1
  2630                           
  2631                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
  2632  001A9C  C060  F01D         	movff	_width,stoa@w
  2633  001AA0  C061  F01E         	movff	_width+1,stoa@w+1
  2634                           
  2635                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
  2636  001AA4  A064               	btfss	_flags,0,c
  2637  001AA6  D00D               	goto	l2354
  2638  001AA8  D016               	goto	u1140
  2639  001AAA                     l2350:
  2640                           
  2641                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
  2642  001AAA  0E00               	movlw	0
  2643  001AAC  6E07               	movwf	fputc@c+1,c
  2644  001AAE  0E20               	movlw	32
  2645  001AB0  6E06               	movwf	fputc@c,c
  2646  001AB2  C00F  F008         	movff	stoa@fp,fputc@fp
  2647  001AB6  C010  F009         	movff	stoa@fp+1,fputc@fp+1
  2648  001ABA  ECBC  F00E         	call	_fputc	;wreg free
  2649                           
  2650                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
  2651  001ABE  4A23               	infsnz	stoa@l,f,c
  2652  001AC0  2A24               	incf	stoa@l+1,f,c
  2653  001AC2                     l2354:
  2654                           
  2655                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
  2656  001AC2  501D               	movf	stoa@w,w,c
  2657  001AC4  5C23               	subwf	stoa@l,w,c
  2658  001AC6  5024               	movf	stoa@l+1,w,c
  2659  001AC8  0A80               	xorlw	128
  2660  001ACA  6E13               	movwf	??_stoa& (0+255),c
  2661  001ACC  501E               	movf	stoa@w+1,w,c
  2662  001ACE  0A80               	xorlw	128
  2663  001AD0  5813               	subwfb	??_stoa& (0+255),w,c
  2664  001AD2  A0D8               	btfss	status,0,c
  2665  001AD4  D7EA               	goto	l2350
  2666  001AD6                     u1140:
  2667                           
  2668                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
  2669  001AD6  0E00               	movlw	0
  2670  001AD8  6E1C               	movwf	stoa@i+1,c
  2671  001ADA  0E00               	movlw	0
  2672  001ADC  6E1B               	movwf	stoa@i,c
  2673                           
  2674                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  2675  001ADE  D013               	goto	l2364
  2676  001AE0                     l2358:
  2677                           
  2678                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
  2679  001AE0  C01F  FFD9         	movff	stoa@cp,fsr2l
  2680  001AE4  C020  FFDA         	movff	stoa@cp+1,fsr2h
  2681  001AE8  50DF               	movf	indf2,w,c
  2682  001AEA  6E13               	movwf	??_stoa& (0+255),c
  2683  001AEC  5013               	movf	??_stoa,w,c
  2684  001AEE  6E06               	movwf	fputc@c,c
  2685  001AF0  6A07               	clrf	fputc@c+1,c
  2686  001AF2  C00F  F008         	movff	stoa@fp,fputc@fp
  2687  001AF6  C010  F009         	movff	stoa@fp+1,fputc@fp+1
  2688  001AFA  ECBC  F00E         	call	_fputc	;wreg free
  2689                           
  2690                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
  2691  001AFE  4A1F               	infsnz	stoa@cp,f,c
  2692  001B00  2A20               	incf	stoa@cp+1,f,c
  2693                           
  2694                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
  2695  001B02  4A1B               	infsnz	stoa@i,f,c
  2696  001B04  2A1C               	incf	stoa@i+1,f,c
  2697  001B06                     l2364:
  2698                           
  2699                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
  2700  001B06  5021               	movf	stoa@p,w,c
  2701  001B08  5C1B               	subwf	stoa@i,w,c
  2702  001B0A  501C               	movf	stoa@i+1,w,c
  2703  001B0C  0A80               	xorlw	128
  2704  001B0E  6E13               	movwf	??_stoa& (0+255),c
  2705  001B10  5022               	movf	stoa@p+1,w,c
  2706  001B12  0A80               	xorlw	128
  2707  001B14  5813               	subwfb	??_stoa& (0+255),w,c
  2708  001B16  A0D8               	btfss	status,0,c
  2709  001B18  D7E3               	goto	l2358
  2710                           
  2711                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
  2712  001B1A  B064               	btfsc	_flags,0,c
  2713  001B1C  D00D               	goto	l2372
  2714  001B1E  D016               	goto	u1170
  2715  001B20                     l2368:
  2716                           
  2717                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
  2718  001B20  0E00               	movlw	0
  2719  001B22  6E07               	movwf	fputc@c+1,c
  2720  001B24  0E20               	movlw	32
  2721  001B26  6E06               	movwf	fputc@c,c
  2722  001B28  C00F  F008         	movff	stoa@fp,fputc@fp
  2723  001B2C  C010  F009         	movff	stoa@fp+1,fputc@fp+1
  2724  001B30  ECBC  F00E         	call	_fputc	;wreg free
  2725                           
  2726                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
  2727  001B34  4A23               	infsnz	stoa@l,f,c
  2728  001B36  2A24               	incf	stoa@l+1,f,c
  2729  001B38                     l2372:
  2730                           
  2731                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
  2732  001B38  501D               	movf	stoa@w,w,c
  2733  001B3A  5C23               	subwf	stoa@l,w,c
  2734  001B3C  5024               	movf	stoa@l+1,w,c
  2735  001B3E  0A80               	xorlw	128
  2736  001B40  6E13               	movwf	??_stoa& (0+255),c
  2737  001B42  501E               	movf	stoa@w+1,w,c
  2738  001B44  0A80               	xorlw	128
  2739  001B46  5813               	subwfb	??_stoa& (0+255),w,c
  2740  001B48  A0D8               	btfss	status,0,c
  2741  001B4A  D7EA               	goto	l2368
  2742  001B4C                     u1170:
  2743                           
  2744                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
  2745                           
  2746                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 586:     }
  2747  001B4C  C023  F00F         	movff	stoa@l,?_stoa
  2748  001B50  C024  F010         	movff	stoa@l+1,?_stoa+1
  2749  001B54  0012               	return		;funcret
  2750  001B56                     __end_of_stoa:
  2751                           	opt callstack 0
  2752                           
  2753 ;; *************** function _ctoa *****************
  2754 ;; Defined at:
  2755 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;  fp              2   32[COMRAM] PTR struct _IO_FILE
  2758 ;;		 -> sprintf@f(6), 
  2759 ;;  c               1   34[COMRAM] unsigned char 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  w               2   35[COMRAM] int 
  2762 ;;  l               2    0        int 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  2   32[COMRAM] int 
  2765 ;; Registers used:
  2766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2772 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;Total ram usage:        5 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    6
  2779 ;; This function calls:
  2780 ;;		_pad
  2781 ;; This function is called by:
  2782 ;;		_vfpfcnvrt
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text5
  2787  00217A                     __ptext5:
  2788                           	opt callstack 0
  2789  00217A                     _ctoa:
  2790                           	opt callstack 21
  2791                           
  2792                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  2793                           
  2794                           ;incstack = 0
  2795  00217A  5060               	movf	_width,w,c
  2796  00217C  1061               	iorwf	_width+1,w,c
  2797  00217E  A4D8               	btfss	status,2,c
  2798  002180  D005               	goto	l2322
  2799  002182  C060  F024         	movff	_width,ctoa@w
  2800  002186  C061  F025         	movff	_width+1,ctoa@w+1
  2801  00218A  D006               	goto	l2324
  2802  00218C                     l2322:
  2803  00218C  0EFF               	movlw	255
  2804  00218E  2460               	addwf	_width,w,c
  2805  002190  6E24               	movwf	ctoa@w,c
  2806  002192  0EFF               	movlw	255
  2807  002194  2061               	addwfc	_width+1,w,c
  2808  002196  6E25               	movwf	ctoa@w+1,c
  2809  002198                     l2324:
  2810                           
  2811                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  2812  002198  C023  F0C9         	movff	ctoa@c,_dbuf
  2813                           
  2814                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  2815  00219C  0E00               	movlw	0
  2816  00219E  0100               	movlb	0	; () banked
  2817  0021A0  6FCA               	movwf	(_dbuf+1)& (0+255),b
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  2821  0021A2  C021  F016         	movff	ctoa@fp,pad@fp
  2822  0021A6  C022  F017         	movff	ctoa@fp+1,pad@fp+1
  2823  0021AA  0EC9               	movlw	low _dbuf
  2824  0021AC  6E18               	movwf	pad@buf,c
  2825  0021AE  0E00               	movlw	high _dbuf
  2826  0021B0  6E19               	movwf	pad@buf+1,c
  2827  0021B2  C024  F01A         	movff	ctoa@w,pad@p
  2828  0021B6  C025  F01B         	movff	ctoa@w+1,pad@p+1
  2829  0021BA  EC0C  F00F         	call	_pad	;wreg free
  2830  0021BE  C016  F021         	movff	?_pad,?_ctoa
  2831  0021C2  C017  F022         	movff	?_pad+1,?_ctoa+1
  2832  0021C6  0012               	return		;funcret
  2833  0021C8                     __end_of_ctoa:
  2834                           	opt callstack 0
  2835                           
  2836 ;; *************** function _pad *****************
  2837 ;; Defined at:
  2838 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  fp              2   21[COMRAM] PTR struct _IO_FILE
  2841 ;;		 -> sprintf@f(6), 
  2842 ;;  buf             2   23[COMRAM] PTR unsigned char 
  2843 ;;		 -> dbuf(32), 
  2844 ;;  p               2   25[COMRAM] int 
  2845 ;; Auto vars:     Size  Location     Type
  2846 ;;  w               2   30[COMRAM] int 
  2847 ;;  i               2   28[COMRAM] int 
  2848 ;; Return value:  Size  Location     Type
  2849 ;;                  2   21[COMRAM] int 
  2850 ;; Registers used:
  2851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2852 ;; Tracked objects:
  2853 ;;		On entry : 0/0
  2854 ;;		On exit  : 0/0
  2855 ;;		Unchanged: 0/0
  2856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2857 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2860 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;Total ram usage:       11 bytes
  2862 ;; Hardware stack levels used:    1
  2863 ;; Hardware stack levels required when called:    5
  2864 ;; This function calls:
  2865 ;;		_fputc
  2866 ;;		_fputs
  2867 ;;		_strlen
  2868 ;; This function is called by:
  2869 ;;		_ctoa
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text6
  2874  001E18                     __ptext6:
  2875                           	opt callstack 0
  2876  001E18                     _pad:
  2877                           	opt callstack 21
  2878                           
  2879                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  2880                           
  2881                           ;incstack = 0
  2882  001E18  A064               	btfss	_flags,0,c
  2883  001E1A  D00A               	goto	l2274
  2884                           
  2885                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  2886  001E1C  C018  F00F         	movff	pad@buf,fputs@s
  2887  001E20  C019  F010         	movff	pad@buf+1,fputs@s+1
  2888  001E24  C016  F011         	movff	pad@fp,fputs@fp
  2889  001E28  C017  F012         	movff	pad@fp+1,fputs@fp+1
  2890  001E2C  EC6E  F011         	call	_fputs	;wreg free
  2891  001E30                     l2274:
  2892                           
  2893                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  2894  001E30  BE1B               	btfsc	pad@p+1,7,c
  2895  001E32  D005               	goto	l2278
  2896  001E34  C01A  F01F         	movff	pad@p,pad@w
  2897  001E38  C01B  F020         	movff	pad@p+1,pad@w+1
  2898  001E3C  D004               	goto	l413
  2899  001E3E                     l2278:
  2900  001E3E  0E00               	movlw	0
  2901  001E40  6E20               	movwf	pad@w+1,c
  2902  001E42  0E00               	movlw	0
  2903  001E44  6E1F               	movwf	pad@w,c
  2904  001E46                     l413:
  2905                           
  2906                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  2907  001E46  0E00               	movlw	0
  2908  001E48  6E1E               	movwf	pad@i+1,c
  2909  001E4A  0E00               	movlw	0
  2910  001E4C  6E1D               	movwf	pad@i,c
  2911                           
  2912                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2913  001E4E  D00C               	goto	l2284
  2914  001E50                     l2280:
  2915                           
  2916                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  2917  001E50  0E00               	movlw	0
  2918  001E52  6E07               	movwf	fputc@c+1,c
  2919  001E54  0E20               	movlw	32
  2920  001E56  6E06               	movwf	fputc@c,c
  2921  001E58  C016  F008         	movff	pad@fp,fputc@fp
  2922  001E5C  C017  F009         	movff	pad@fp+1,fputc@fp+1
  2923  001E60  ECBC  F00E         	call	_fputc	;wreg free
  2924                           
  2925                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  2926  001E64  4A1D               	infsnz	pad@i,f,c
  2927  001E66  2A1E               	incf	pad@i+1,f,c
  2928  001E68                     l2284:
  2929                           
  2930                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  2931  001E68  501F               	movf	pad@w,w,c
  2932  001E6A  5C1D               	subwf	pad@i,w,c
  2933  001E6C  501E               	movf	pad@i+1,w,c
  2934  001E6E  0A80               	xorlw	128
  2935  001E70  6E1C               	movwf	??_pad& (0+255),c
  2936  001E72  5020               	movf	pad@w+1,w,c
  2937  001E74  0A80               	xorlw	128
  2938  001E76  581C               	subwfb	??_pad& (0+255),w,c
  2939  001E78  A0D8               	btfss	status,0,c
  2940  001E7A  D7EA               	goto	l2280
  2941                           
  2942                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  2943  001E7C  B064               	btfsc	_flags,0,c
  2944  001E7E  D00A               	goto	l2288
  2945                           
  2946                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  2947  001E80  C018  F00F         	movff	pad@buf,fputs@s
  2948  001E84  C019  F010         	movff	pad@buf+1,fputs@s+1
  2949  001E88  C016  F011         	movff	pad@fp,fputs@fp
  2950  001E8C  C017  F012         	movff	pad@fp+1,fputs@fp+1
  2951  001E90  EC6E  F011         	call	_fputs	;wreg free
  2952  001E94                     l2288:
  2953                           
  2954                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  2955  001E94  C018  F006         	movff	pad@buf,strlen@s
  2956  001E98  C019  F007         	movff	pad@buf+1,strlen@s+1
  2957  001E9C  ECB9  F011         	call	_strlen	;wreg free
  2958  001EA0  501F               	movf	pad@w,w,c
  2959  001EA2  2406               	addwf	?_strlen,w,c
  2960  001EA4  6E16               	movwf	?_pad,c
  2961  001EA6  5020               	movf	pad@w+1,w,c
  2962  001EA8  2007               	addwfc	?_strlen+1,w,c
  2963  001EAA  6E17               	movwf	?_pad+1,c
  2964  001EAC  0012               	return		;funcret
  2965  001EAE                     __end_of_pad:
  2966                           	opt callstack 0
  2967                           
  2968 ;; *************** function _strlen *****************
  2969 ;; Defined at:
  2970 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;  s               2    5[COMRAM] PTR const unsigned char 
  2973 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), main@command(25), 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  a               2    7[COMRAM] PTR const unsigned char 
  2976 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(32), main@command(25), 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  2    5[COMRAM] unsigned int 
  2979 ;; Registers used:
  2980 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2986 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;Total ram usage:        4 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:    2
  2993 ;; This function calls:
  2994 ;;		Nothing
  2995 ;; This function is called by:
  2996 ;;		_pad
  2997 ;;		_stoa
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text7
  3002  002372                     __ptext7:
  3003                           	opt callstack 0
  3004  002372                     _strlen:
  3005                           	opt callstack 24
  3006                           
  3007                           ;incstack = 0
  3008  002372  C006  F008         	movff	strlen@s,strlen@a
  3009  002376  C007  F009         	movff	strlen@s+1,strlen@a+1
  3010  00237A  D002               	goto	l2254
  3011  00237C                     l2252:
  3012  00237C  4A06               	infsnz	strlen@s,f,c
  3013  00237E  2A07               	incf	strlen@s+1,f,c
  3014  002380                     l2254:
  3015  002380  C006  FFD9         	movff	strlen@s,fsr2l
  3016  002384  C007  FFDA         	movff	strlen@s+1,fsr2h
  3017  002388  50DF               	movf	indf2,w,c
  3018  00238A  A4D8               	btfss	status,2,c
  3019  00238C  D7F7               	goto	l2252
  3020  00238E  5008               	movf	strlen@a,w,c
  3021  002390  5C06               	subwf	strlen@s,w,c
  3022  002392  6E06               	movwf	?_strlen,c
  3023  002394  5009               	movf	strlen@a+1,w,c
  3024  002396  5807               	subwfb	strlen@s+1,w,c
  3025  002398  6E07               	movwf	?_strlen+1,c
  3026  00239A  0012               	return		;funcret
  3027  00239C                     __end_of_strlen:
  3028                           	opt callstack 0
  3029                           
  3030 ;; *************** function _fputs *****************
  3031 ;; Defined at:
  3032 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  s               2   14[COMRAM] PTR const unsigned char 
  3035 ;;		 -> dbuf(32), 
  3036 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  3037 ;;		 -> sprintf@f(6), 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  i               2   19[COMRAM] int 
  3040 ;;  c               1   18[COMRAM] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  2   14[COMRAM] int 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;Total ram usage:        7 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    4
  3057 ;; This function calls:
  3058 ;;		_fputc
  3059 ;; This function is called by:
  3060 ;;		_pad
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text8
  3065  0022DC                     __ptext8:
  3066                           	opt callstack 0
  3067  0022DC                     _fputs:
  3068                           	opt callstack 21
  3069                           
  3070                           ;incstack = 0
  3071  0022DC  0E00               	movlw	0
  3072  0022DE  6E15               	movwf	fputs@i+1,c
  3073  0022E0  0E00               	movlw	0
  3074  0022E2  6E14               	movwf	fputs@i,c
  3075  0022E4  D00B               	goto	l2248
  3076  0022E6                     l2244:
  3077  0022E6  C013  F006         	movff	fputs@c,fputc@c
  3078  0022EA  6A07               	clrf	fputc@c+1,c
  3079  0022EC  C011  F008         	movff	fputs@fp,fputc@fp
  3080  0022F0  C012  F009         	movff	fputs@fp+1,fputc@fp+1
  3081  0022F4  ECBC  F00E         	call	_fputc	;wreg free
  3082  0022F8  4A14               	infsnz	fputs@i,f,c
  3083  0022FA  2A15               	incf	fputs@i+1,f,c
  3084  0022FC                     l2248:
  3085  0022FC  5014               	movf	fputs@i,w,c
  3086  0022FE  240F               	addwf	fputs@s,w,c
  3087  002300  6ED9               	movwf	fsr2l,c
  3088  002302  5015               	movf	fputs@i+1,w,c
  3089  002304  2010               	addwfc	fputs@s+1,w,c
  3090  002306  6EDA               	movwf	fsr2h,c
  3091  002308  50DF               	movf	indf2,w,c
  3092  00230A  6E13               	movwf	fputs@c,c
  3093  00230C  5013               	movf	fputs@c,w,c
  3094  00230E  B4D8               	btfsc	status,2,c
  3095  002310  0012               	return	
  3096  002312  D7E9               	goto	l2244
  3097  002314                     __end_of_fputs:
  3098                           	opt callstack 0
  3099                           
  3100 ;; *************** function _fputc *****************
  3101 ;; Defined at:
  3102 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  c               2    5[COMRAM] int 
  3105 ;;  fp              2    7[COMRAM] PTR struct _IO_FILE
  3106 ;;		 -> sprintf@f(6), 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;                  2    5[COMRAM] int 
  3111 ;; Registers used:
  3112 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3118 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;Total ram usage:        9 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    3
  3125 ;; This function calls:
  3126 ;;		_putch
  3127 ;; This function is called by:
  3128 ;;		_pad
  3129 ;;		_stoa
  3130 ;;		_vfpfcnvrt
  3131 ;;		_fputs
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	text9
  3136  001D78                     __ptext9:
  3137                           	opt callstack 0
  3138  001D78                     _fputc:
  3139                           	opt callstack 23
  3140                           
  3141                           ;incstack = 0
  3142  001D78  5008               	movf	fputc@fp,w,c
  3143  001D7A  1009               	iorwf	fputc@fp+1,w,c
  3144  001D7C  B4D8               	btfsc	status,2,c
  3145  001D7E  D004               	goto	u940
  3146  001D80  5008               	movf	fputc@fp,w,c
  3147  001D82  1009               	iorwf	fputc@fp+1,w,c
  3148  001D84  A4D8               	btfss	status,2,c
  3149  001D86  D004               	goto	l2234
  3150  001D88                     u940:
  3151  001D88  5006               	movf	fputc@c,w,c
  3152  001D8A  EC7A  F012         	call	_putch
  3153  001D8E  0012               	return	
  3154  001D90                     l2234:
  3155  001D90  EE20 F004          	lfsr	2,4
  3156  001D94  5008               	movf	fputc@fp,w,c
  3157  001D96  26D9               	addwf	fsr2l,f,c
  3158  001D98  5009               	movf	fputc@fp+1,w,c
  3159  001D9A  22DA               	addwfc	fsr2h,f,c
  3160  001D9C  50DE               	movf	postinc2,w,c
  3161  001D9E  10DE               	iorwf	postinc2,w,c
  3162  001DA0  B4D8               	btfsc	status,2,c
  3163  001DA2  D016               	goto	u960
  3164  001DA4  EE20 F004          	lfsr	2,4
  3165  001DA8  5008               	movf	fputc@fp,w,c
  3166  001DAA  26D9               	addwf	fsr2l,f,c
  3167  001DAC  5009               	movf	fputc@fp+1,w,c
  3168  001DAE  22DA               	addwfc	fsr2h,f,c
  3169  001DB0  EE10 F002          	lfsr	1,2
  3170  001DB4  5008               	movf	fputc@fp,w,c
  3171  001DB6  26E1               	addwf	fsr1l,f,c
  3172  001DB8  5009               	movf	fputc@fp+1,w,c
  3173  001DBA  22E2               	addwfc	fsr1h,f,c
  3174  001DBC  50DE               	movf	postinc2,w,c
  3175  001DBE  5CE6               	subwf	postinc1,w,c
  3176  001DC0  50E6               	movf	postinc1,w,c
  3177  001DC2  0A80               	xorlw	128
  3178  001DC4  6E0E               	movwf	(??_fputc+4)& (0+255),c
  3179  001DC6  50DE               	movf	postinc2,w,c
  3180  001DC8  0A80               	xorlw	128
  3181  001DCA  580E               	subwfb	(??_fputc+4)& (0+255),w,c
  3182  001DCC  B0D8               	btfsc	status,0,c
  3183  001DCE  0012               	return	
  3184  001DD0                     u960:
  3185  001DD0  EE20 F002          	lfsr	2,2
  3186  001DD4  5008               	movf	fputc@fp,w,c
  3187  001DD6  26D9               	addwf	fsr2l,f,c
  3188  001DD8  5009               	movf	fputc@fp+1,w,c
  3189  001DDA  22DA               	addwfc	fsr2h,f,c
  3190  001DDC  CFDE F00A          	movff	postinc2,??_fputc
  3191  001DE0  CFDD F00B          	movff	postdec2,??_fputc+1
  3192  001DE4  C008  FFD9         	movff	fputc@fp,fsr2l
  3193  001DE8  C009  FFDA         	movff	fputc@fp+1,fsr2h
  3194  001DEC  CFDE F00C          	movff	postinc2,??_fputc+2
  3195  001DF0  CFDD F00D          	movff	postdec2,??_fputc+3
  3196  001DF4  500A               	movf	??_fputc,w,c
  3197  001DF6  240C               	addwf	??_fputc+2,w,c
  3198  001DF8  6ED9               	movwf	fsr2l,c
  3199  001DFA  500B               	movf	??_fputc+1,w,c
  3200  001DFC  200D               	addwfc	??_fputc+3,w,c
  3201  001DFE  6EDA               	movwf	fsr2h,c
  3202  001E00  C006  FFDF         	movff	fputc@c,indf2
  3203  001E04  EE20 F002          	lfsr	2,2
  3204  001E08  5008               	movf	fputc@fp,w,c
  3205  001E0A  26D9               	addwf	fsr2l,f,c
  3206  001E0C  5009               	movf	fputc@fp+1,w,c
  3207  001E0E  22DA               	addwfc	fsr2h,f,c
  3208  001E10  2ADE               	incf	postinc2,f,c
  3209  001E12  0E00               	movlw	0
  3210  001E14  22DD               	addwfc	postdec2,f,c
  3211  001E16  0012               	return		;funcret
  3212  001E18                     __end_of_fputc:
  3213                           	opt callstack 0
  3214                           
  3215 ;; *************** function _putch *****************
  3216 ;; Defined at:
  3217 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\putch.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;  c               1    wreg     unsigned char 
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;  c               1    0[COMRAM] unsigned char 
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  1    wreg      void 
  3224 ;; Registers used:
  3225 ;;		wreg
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;Total ram usage:        0 bytes
  3236 ;; Hardware stack levels used:    1
  3237 ;; Hardware stack levels required when called:    2
  3238 ;; This function calls:
  3239 ;;		Nothing
  3240 ;; This function is called by:
  3241 ;;		_fputc
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text10
  3246  0024F4                     __ptext10:
  3247                           	opt callstack 0
  3248  0024F4                     _putch:
  3249                           	opt callstack 23
  3250                           
  3251                           ;incstack = 0
  3252  0024F4  0012               	return		;funcret
  3253  0024F6                     __end_of_putch:
  3254                           	opt callstack 0
  3255                           
  3256 ;; *************** function _atoi *****************
  3257 ;; Defined at:
  3258 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  s               2   12[COMRAM] PTR const unsigned char 
  3261 ;;		 -> STR_17(6), STR_16(5), STR_15(5), STR_14(5), 
  3262 ;;		 -> STR_13(5), 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  n               2   25[COMRAM] int 
  3265 ;;  neg             2   18[COMRAM] int 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  2   12[COMRAM] int 
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3275 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3279 ;;Total ram usage:       15 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    3
  3282 ;; This function calls:
  3283 ;;		___wmul
  3284 ;;		_isdigit
  3285 ;;		_isspace
  3286 ;; This function is called by:
  3287 ;;		_vfpfcnvrt
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text11
  3292  0018EE                     __ptext11:
  3293                           	opt callstack 0
  3294  0018EE                     _atoi:
  3295                           	opt callstack 24
  3296                           
  3297                           ;incstack = 0
  3298  0018EE  0E00               	movlw	0
  3299  0018F0  6E1B               	movwf	atoi@n+1,c
  3300  0018F2  0E00               	movlw	0
  3301  0018F4  6E1A               	movwf	atoi@n,c
  3302  0018F6  0E00               	movlw	0
  3303  0018F8  6E14               	movwf	atoi@neg+1,c
  3304  0018FA  0E00               	movlw	0
  3305  0018FC  6E13               	movwf	atoi@neg,c
  3306  0018FE  D002               	goto	l2378
  3307  001900                     l2376:
  3308  001900  4A0D               	infsnz	atoi@s,f,c
  3309  001902  2A0E               	incf	atoi@s+1,f,c
  3310  001904                     l2378:
  3311  001904  0E01               	movlw	1
  3312  001906  6E19               	movwf	_atoi$1560,c
  3313  001908  C00D  FFF6         	movff	atoi@s,tblptrl
  3314  00190C  C00E  FFF7         	movff	atoi@s+1,tblptrh
  3315  001910                     	if	0	;tblptru may be non-zero
  3316  001910                     	endif
  3317  001910                     	if	0	;tblptru may be non-zero
  3318  001910                     	endif
  3319  001910  0008               	tblrd		*
  3320  001912  50F5               	movf	tablat,w,c
  3321  001914  0A20               	xorlw	32
  3322  001916  B4D8               	btfsc	status,2,c
  3323  001918  D018               	goto	l2386
  3324  00191A  0EF7               	movlw	247
  3325  00191C  6E0F               	movwf	??_atoi& (0+255),c
  3326  00191E  0EFF               	movlw	255
  3327  001920  6E10               	movwf	(??_atoi+1)& (0+255),c
  3328  001922  C00D  FFF6         	movff	atoi@s,tblptrl
  3329  001926  C00E  FFF7         	movff	atoi@s+1,tblptrh
  3330  00192A                     	if	0	;tblptru may be non-zero
  3331  00192A                     	endif
  3332  00192A                     	if	0	;tblptru may be non-zero
  3333  00192A                     	endif
  3334  00192A  0008               	tblrd		*
  3335  00192C  50F5               	movf	tablat,w,c
  3336  00192E  6E11               	movwf	(??_atoi+2)& (0+255),c
  3337  001930  6A12               	clrf	(??_atoi+3)& (0+255),c
  3338  001932  500F               	movf	??_atoi,w,c
  3339  001934  2611               	addwf	??_atoi+2,f,c
  3340  001936  5010               	movf	??_atoi+1,w,c
  3341  001938  2212               	addwfc	??_atoi+3,f,c
  3342  00193A  5012               	movf	??_atoi+3,w,c
  3343  00193C  E104               	bnz	u1190
  3344  00193E  0E05               	movlw	5
  3345  001940  5C11               	subwf	??_atoi+2,w,c
  3346  001942  A0D8               	btfss	status,0,c
  3347  001944  D002               	goto	l2386
  3348  001946                     u1190:
  3349  001946  0E00               	movlw	0
  3350  001948  6E19               	movwf	_atoi$1560,c
  3351  00194A                     l2386:
  3352  00194A  C019  F015         	movff	_atoi$1560,_atoi$1559
  3353  00194E  6A16               	clrf	_atoi$1559+1,c
  3354  001950  5015               	movf	_atoi$1559,w,c
  3355  001952  1016               	iorwf	_atoi$1559+1,w,c
  3356  001954  B4D8               	btfsc	status,2,c
  3357  001956  D008               	goto	l2396
  3358  001958  D7D3               	goto	l2376
  3359  00195A                     l2392:
  3360  00195A  0E00               	movlw	0
  3361  00195C  6E14               	movwf	atoi@neg+1,c
  3362  00195E  0E01               	movlw	1
  3363  001960  6E13               	movwf	atoi@neg,c
  3364  001962                     l2394:
  3365  001962  4A0D               	infsnz	atoi@s,f,c
  3366  001964  2A0E               	incf	atoi@s+1,f,c
  3367  001966  D02E               	goto	l2402
  3368  001968                     l2396:
  3369  001968  C00D  FFF6         	movff	atoi@s,tblptrl
  3370  00196C  C00E  FFF7         	movff	atoi@s+1,tblptrh
  3371  001970                     	if	0	;tblptru may be non-zero
  3372  001970                     	endif
  3373  001970                     	if	0	;tblptru may be non-zero
  3374  001970                     	endif
  3375  001970  0008               	tblrd		*
  3376  001972  50F5               	movf	tablat,w,c
  3377  001974  6E0F               	movwf	??_atoi& (0+255),c
  3378  001976  6A10               	clrf	(??_atoi+1)& (0+255),c
  3379                           
  3380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3381                           ; Switch size 1, requested type "simple"
  3382                           ; Number of cases is 1, Range of values is 0 to 0
  3383                           ; switch strategies available:
  3384                           ; Name         Instructions Cycles
  3385                           ; simple_byte            4     3 (average)
  3386                           ;	Chosen strategy is simple_byte
  3387  001978  5010               	movf	??_atoi+1,w,c
  3388  00197A  0A00               	xorlw	0	; case 0
  3389  00197C  A4D8               	btfss	status,2,c
  3390  00197E  D022               	goto	l2402
  3391                           
  3392                           ; Switch size 1, requested type "simple"
  3393                           ; Number of cases is 2, Range of values is 43 to 45
  3394                           ; switch strategies available:
  3395                           ; Name         Instructions Cycles
  3396                           ; simple_byte            7     4 (average)
  3397                           ;	Chosen strategy is simple_byte
  3398  001980  500F               	movf	??_atoi,w,c
  3399  001982  0A2B               	xorlw	43	; case 43
  3400  001984  B4D8               	btfsc	status,2,c
  3401  001986  D7ED               	goto	l2394
  3402  001988  0A06               	xorlw	6	; case 45
  3403  00198A  B4D8               	btfsc	status,2,c
  3404  00198C  D7E6               	goto	l2392
  3405  00198E  D01A               	goto	l2402
  3406  001990                     l2398:
  3407  001990  C01A  F006         	movff	atoi@n,___wmul@multiplier
  3408  001994  C01B  F007         	movff	atoi@n+1,___wmul@multiplier+1
  3409  001998  0E00               	movlw	0
  3410  00199A  6E09               	movwf	___wmul@multiplicand+1,c
  3411  00199C  0E0A               	movlw	10
  3412  00199E  6E08               	movwf	___wmul@multiplicand,c
  3413  0019A0  ECE3  F011         	call	___wmul	;wreg free
  3414  0019A4  C00D  FFF6         	movff	atoi@s,tblptrl
  3415  0019A8  C00E  FFF7         	movff	atoi@s+1,tblptrh
  3416  0019AC                     	if	0	;tblptru may be non-zero
  3417  0019AC                     	endif
  3418  0019AC                     	if	0	;tblptru may be non-zero
  3419  0019AC                     	endif
  3420  0019AC  0008               	tblrd		*
  3421  0019AE  50F5               	movf	tablat,w,c
  3422  0019B0  5E06               	subwf	?___wmul,f,c
  3423  0019B2  0E00               	movlw	0
  3424  0019B4  5A07               	subwfb	?___wmul+1,f,c
  3425  0019B6  0E30               	movlw	48
  3426  0019B8  2406               	addwf	?___wmul,w,c
  3427  0019BA  6E1A               	movwf	atoi@n,c
  3428  0019BC  0E00               	movlw	0
  3429  0019BE  2007               	addwfc	?___wmul+1,w,c
  3430  0019C0  6E1B               	movwf	atoi@n+1,c
  3431  0019C2  D7CF               	goto	l2394
  3432  0019C4                     l2402:
  3433  0019C4  0ED0               	movlw	208
  3434  0019C6  6E0F               	movwf	??_atoi& (0+255),c
  3435  0019C8  0EFF               	movlw	255
  3436  0019CA  6E10               	movwf	(??_atoi+1)& (0+255),c
  3437  0019CC  C00D  FFF6         	movff	atoi@s,tblptrl
  3438  0019D0  C00E  FFF7         	movff	atoi@s+1,tblptrh
  3439  0019D4                     	if	0	;tblptru may be non-zero
  3440  0019D4                     	endif
  3441  0019D4                     	if	0	;tblptru may be non-zero
  3442  0019D4                     	endif
  3443  0019D4  0008               	tblrd		*
  3444  0019D6  50F5               	movf	tablat,w,c
  3445  0019D8  6E11               	movwf	(??_atoi+2)& (0+255),c
  3446  0019DA  6A12               	clrf	(??_atoi+3)& (0+255),c
  3447  0019DC  500F               	movf	??_atoi,w,c
  3448  0019DE  2611               	addwf	??_atoi+2,f,c
  3449  0019E0  5010               	movf	??_atoi+1,w,c
  3450  0019E2  2212               	addwfc	??_atoi+3,f,c
  3451  0019E4  5012               	movf	??_atoi+3,w,c
  3452  0019E6  E106               	bnz	u1210
  3453  0019E8  0E0A               	movlw	10
  3454  0019EA  5C11               	subwf	??_atoi+2,w,c
  3455  0019EC  B0D8               	btfsc	status,0,c
  3456  0019EE  D002               	goto	u1210
  3457  0019F0  0E01               	movlw	1
  3458  0019F2  D001               	goto	u1220
  3459  0019F4                     u1210:
  3460  0019F4  0E00               	movlw	0
  3461  0019F6                     u1220:
  3462  0019F6  6E17               	movwf	_atoi$1561,c
  3463  0019F8  6A18               	clrf	_atoi$1561+1,c
  3464  0019FA  5017               	movf	_atoi$1561,w,c
  3465  0019FC  1018               	iorwf	_atoi$1561+1,w,c
  3466  0019FE  A4D8               	btfss	status,2,c
  3467  001A00  D7C7               	goto	l2398
  3468  001A02  5013               	movf	atoi@neg,w,c
  3469  001A04  1014               	iorwf	atoi@neg+1,w,c
  3470  001A06  A4D8               	btfss	status,2,c
  3471  001A08  D00D               	goto	l1183
  3472  001A0A  C01A  F00F         	movff	atoi@n,??_atoi
  3473  001A0E  C01B  F010         	movff	atoi@n+1,??_atoi+1
  3474  001A12  1E0F               	comf	??_atoi,f,c
  3475  001A14  1E10               	comf	??_atoi+1,f,c
  3476  001A16  4A0F               	infsnz	??_atoi,f,c
  3477  001A18  2A10               	incf	??_atoi+1,f,c
  3478  001A1A  C00F  F00D         	movff	??_atoi,?_atoi
  3479  001A1E  C010  F00E         	movff	??_atoi+1,?_atoi+1
  3480  001A22  0012               	return	
  3481  001A24                     l1183:
  3482  001A24  C01A  F00D         	movff	atoi@n,?_atoi
  3483  001A28  C01B  F00E         	movff	atoi@n+1,?_atoi+1
  3484  001A2C  0012               	return		;funcret
  3485  001A2E                     __end_of_atoi:
  3486                           	opt callstack 0
  3487                           
  3488 ;; *************** function _isspace *****************
  3489 ;; Defined at:
  3490 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  c               2    5[COMRAM] int 
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;		None
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  2    5[COMRAM] int 
  3497 ;; Registers used:
  3498 ;;		wreg, status,2, status,0
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3504 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;Total ram usage:        7 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    2
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_atoi
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text12
  3519  002262                     __ptext12:
  3520                           	opt callstack 0
  3521  002262                     _isspace:
  3522                           	opt callstack 24
  3523                           
  3524                           ;incstack = 0
  3525  002262  0E01               	movlw	1
  3526  002264  6E0C               	movwf	_isspace$1577,c
  3527  002266  0E20               	movlw	32
  3528  002268  1806               	xorwf	isspace@c,w,c
  3529  00226A  1007               	iorwf	isspace@c+1,w,c
  3530  00226C  B4D8               	btfsc	status,2,c
  3531  00226E  D014               	goto	l2310
  3532  002270  0EF7               	movlw	247
  3533  002272  6E08               	movwf	??_isspace& (0+255),c
  3534  002274  0EFF               	movlw	255
  3535  002276  6E09               	movwf	(??_isspace+1)& (0+255),c
  3536  002278  C006  F00A         	movff	isspace@c,??_isspace+2
  3537  00227C  C007  F00B         	movff	isspace@c+1,??_isspace+3
  3538  002280  5008               	movf	??_isspace,w,c
  3539  002282  260A               	addwf	??_isspace+2,f,c
  3540  002284  5009               	movf	??_isspace+1,w,c
  3541  002286  220B               	addwfc	??_isspace+3,f,c
  3542  002288  500B               	movf	??_isspace+3,w,c
  3543  00228A  E104               	bnz	u1070
  3544  00228C  0E05               	movlw	5
  3545  00228E  5C0A               	subwf	??_isspace+2,w,c
  3546  002290  A0D8               	btfss	status,0,c
  3547  002292  D002               	goto	l2310
  3548  002294                     u1070:
  3549  002294  0E00               	movlw	0
  3550  002296  6E0C               	movwf	_isspace$1577,c
  3551  002298                     l2310:
  3552  002298  C00C  F006         	movff	_isspace$1577,?_isspace
  3553  00229C  6A07               	clrf	?_isspace+1,c
  3554  00229E  0012               	return		;funcret
  3555  0022A0                     __end_of_isspace:
  3556                           	opt callstack 0
  3557                           
  3558 ;; *************** function _isdigit *****************
  3559 ;; Defined at:
  3560 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  c               2    5[COMRAM] int 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;		None
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  2    5[COMRAM] int 
  3567 ;; Registers used:
  3568 ;;		wreg, status,2, status,0
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3574 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3578 ;;Total ram usage:        6 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; Hardware stack levels required when called:    2
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_vfpfcnvrt
  3585 ;;		_atoi
  3586 ;; This function uses a non-reentrant model
  3587 ;;
  3588                           
  3589                           	psect	text13
  3590  002314                     __ptext13:
  3591                           	opt callstack 0
  3592  002314                     _isdigit:
  3593                           	opt callstack 25
  3594                           
  3595                           ;incstack = 0
  3596  002314  0ED0               	movlw	208
  3597  002316  6E08               	movwf	??_isdigit& (0+255),c
  3598  002318  0EFF               	movlw	255
  3599  00231A  6E09               	movwf	(??_isdigit+1)& (0+255),c
  3600  00231C  C006  F00A         	movff	isdigit@c,??_isdigit+2
  3601  002320  C007  F00B         	movff	isdigit@c+1,??_isdigit+3
  3602  002324  5008               	movf	??_isdigit,w,c
  3603  002326  260A               	addwf	??_isdigit+2,f,c
  3604  002328  5009               	movf	??_isdigit+1,w,c
  3605  00232A  220B               	addwfc	??_isdigit+3,f,c
  3606  00232C  500B               	movf	??_isdigit+3,w,c
  3607  00232E  E106               	bnz	u1040
  3608  002330  0E0A               	movlw	10
  3609  002332  5C0A               	subwf	??_isdigit+2,w,c
  3610  002334  B0D8               	btfsc	status,0,c
  3611  002336  D002               	goto	u1040
  3612  002338  0E01               	movlw	1
  3613  00233A  D001               	goto	u1050
  3614  00233C                     u1040:
  3615  00233C  0E00               	movlw	0
  3616  00233E                     u1050:
  3617  00233E  6E06               	movwf	?_isdigit,c
  3618  002340  6A07               	clrf	?_isdigit+1,c
  3619  002342  0012               	return		;funcret
  3620  002344                     __end_of_isdigit:
  3621                           	opt callstack 0
  3622                           
  3623 ;; *************** function ___wmul *****************
  3624 ;; Defined at:
  3625 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;  multiplier      2    5[COMRAM] unsigned int 
  3628 ;;  multiplicand    2    7[COMRAM] unsigned int 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;  product         2    9[COMRAM] unsigned int 
  3631 ;; Return value:  Size  Location     Type
  3632 ;;                  2    5[COMRAM] unsigned int 
  3633 ;; Registers used:
  3634 ;;		wreg, status,2, status,0, prodl, prodh
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3640 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;Total ram usage:        6 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    2
  3647 ;; This function calls:
  3648 ;;		Nothing
  3649 ;; This function is called by:
  3650 ;;		_atoi
  3651 ;; This function uses a non-reentrant model
  3652 ;;
  3653                           
  3654                           	psect	text14
  3655  0023C6                     __ptext14:
  3656                           	opt callstack 0
  3657  0023C6                     ___wmul:
  3658                           	opt callstack 24
  3659                           
  3660                           ;incstack = 0
  3661  0023C6  5006               	movf	___wmul@multiplier,w,c
  3662  0023C8  0208               	mulwf	___wmul@multiplicand,c
  3663  0023CA  CFF3 F00A          	movff	prodl,___wmul@product
  3664  0023CE  CFF4 F00B          	movff	prodh,___wmul@product+1
  3665  0023D2  5006               	movf	___wmul@multiplier,w,c
  3666  0023D4  0209               	mulwf	___wmul@multiplicand+1,c
  3667  0023D6  50F3               	movf	prodl,w,c
  3668  0023D8  260B               	addwf	___wmul@product+1,f,c
  3669  0023DA  5007               	movf	___wmul@multiplier+1,w,c
  3670  0023DC  0208               	mulwf	___wmul@multiplicand,c
  3671  0023DE  50F3               	movf	prodl,w,c
  3672  0023E0  260B               	addwf	___wmul@product+1,f,c
  3673  0023E2  C00A  F006         	movff	___wmul@product,?___wmul
  3674  0023E6  C00B  F007         	movff	___wmul@product+1,?___wmul+1
  3675  0023EA  0012               	return		;funcret
  3676  0023EC                     __end_of___wmul:
  3677                           	opt callstack 0
  3678                           
  3679 ;; *************** function _portSetup *****************
  3680 ;; Defined at:
  3681 ;;		line 359 in file "main.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    2
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_main
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text15
  3710  002216                     __ptext15:
  3711                           	opt callstack 0
  3712  002216                     _portSetup:
  3713                           	opt callstack 28
  3714                           
  3715                           ;main.c: 363:     LATA = 0x00;
  3716                           
  3717                           ;incstack = 0
  3718  002216  0E00               	movlw	0
  3719  002218  6E89               	movwf	3977,c	;volatile
  3720                           
  3721                           ;main.c: 364:     LATB = 0x00;
  3722  00221A  0E00               	movlw	0
  3723  00221C  6E8A               	movwf	3978,c	;volatile
  3724                           
  3725                           ;main.c: 365:     LATC = 0x00;
  3726  00221E  0E00               	movlw	0
  3727  002220  6E8B               	movwf	3979,c	;volatile
  3728                           
  3729                           ;main.c: 366:     LATD = 0x00;
  3730  002222  0E00               	movlw	0
  3731  002224  6E8C               	movwf	3980,c	;volatile
  3732                           
  3733                           ;main.c: 367:     LATE = 0x00;
  3734  002226  0E00               	movlw	0
  3735  002228  6E8D               	movwf	3981,c	;volatile
  3736                           
  3737                           ;main.c: 371:     TRISA = 0b11000000;
  3738  00222A  0EC0               	movlw	192
  3739  00222C  6E92               	movwf	3986,c	;volatile
  3740                           
  3741                           ;main.c: 374:     TRISB = 0b11110111;
  3742  00222E  0EF7               	movlw	247
  3743  002230  6E93               	movwf	3987,c	;volatile
  3744                           
  3745                           ;main.c: 376:     TRISC = 0b10000000;
  3746  002232  0E80               	movlw	128
  3747  002234  6E94               	movwf	3988,c	;volatile
  3748                           
  3749                           ;main.c: 380:     TRISD = 0b00000011;
  3750  002236  0E03               	movlw	3
  3751  002238  6E95               	movwf	3989,c	;volatile
  3752                           
  3753                           ;main.c: 386:     ADCON0 = 0x00;
  3754  00223A  0E00               	movlw	0
  3755  00223C  6EC2               	movwf	4034,c	;volatile
  3756                           
  3757                           ;main.c: 387:     ADCON1 = 0x0F;
  3758  00223E  0E0F               	movlw	15
  3759  002240  6EC1               	movwf	4033,c	;volatile
  3760                           
  3761                           ;main.c: 388:     ADCON2bits.ADFM = 1;
  3762  002242  8EC0               	bsf	4032,7,c	;volatile
  3763                           
  3764                           ;main.c: 390:     CVRCON = 0x00;
  3765  002244  0E00               	movlw	0
  3766  002246  6EB5               	movwf	4021,c	;volatile
  3767                           
  3768                           ;main.c: 391:     CMCONbits.CIS = 0;
  3769  002248  96B4               	bcf	4020,3,c	;volatile
  3770                           
  3771                           ;main.c: 392:     ADCON2 = 0b10110001;
  3772  00224A  0EB1               	movlw	177
  3773  00224C  6EC0               	movwf	4032,c	;volatile
  3774                           
  3775                           ;main.c: 396:     INT0IF = 0;
  3776  00224E  92F2               	bcf	4082,1,c	;volatile
  3777                           
  3778                           ;main.c: 397:     INT0IE = 1;
  3779  002250  88F2               	bsf	4082,4,c	;volatile
  3780                           
  3781                           ;main.c: 399:     INTEDG0 = 1;
  3782  002252  8CF1               	bsf	4081,6,c	;volatile
  3783                           
  3784                           ;main.c: 402:     INT1IF = 0;
  3785  002254  90F0               	bcf	4080,0,c	;volatile
  3786                           
  3787                           ;main.c: 403:     INT1IE = 1;
  3788  002256  86F0               	bsf	4080,3,c	;volatile
  3789                           
  3790                           ;main.c: 405:     INTEDG1 = 1;
  3791  002258  8AF1               	bsf	4081,5,c	;volatile
  3792                           
  3793                           ;main.c: 407:     (INTCONbits.GIE = 1);
  3794  00225A  8EF2               	bsf	4082,7,c	;volatile
  3795                           
  3796                           ;main.c: 409:     RCONbits.IPEN = 1;
  3797  00225C  8ED0               	bsf	4048,7,c	;volatile
  3798                           
  3799                           ;main.c: 411:     INTCONbits.PEIE_GIEL = 1;
  3800  00225E  8CF2               	bsf	4082,6,c	;volatile
  3801  002260  0012               	return		;funcret
  3802  002262                     __end_of_portSetup:
  3803                           	opt callstack 0
  3804                           
  3805 ;; *************** function _initLCD *****************
  3806 ;; Defined at:
  3807 ;;		line 67 in file "lcd.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;		None
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;		None
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, status,2, status,0, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;Total ram usage:        1 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    6
  3828 ;; This function calls:
  3829 ;;		_lcdInst
  3830 ;;		_send_byte
  3831 ;;		_send_nibble
  3832 ;; This function is called by:
  3833 ;;		_main
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text16
  3838  001FC2                     __ptext16:
  3839                           	opt callstack 0
  3840  001FC2                     _initLCD:
  3841                           	opt callstack 24
  3842                           
  3843                           ;lcd.c: 68:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3844                           
  3845                           ;incstack = 0
  3846  001FC2  0E31               	movlw	49
  3847  001FC4  6E0A               	movwf	??_initLCD& (0+255),c
  3848  001FC6  0EB2               	movlw	178
  3849  001FC8                     u1867:
  3850  001FC8  2EE8               	decfsz	wreg,f,c
  3851  001FCA  D7FE               	bra	u1867
  3852  001FCC  2E0A               	decfsz	??_initLCD& (0+255),f,c
  3853  001FCE  D7FC               	bra	u1867
  3854  001FD0  D000               	nop2	
  3855                           
  3856                           ;lcd.c: 70:     LATDbits.LATD2 = 0;
  3857  001FD2  948C               	bcf	3980,2,c	;volatile
  3858                           
  3859                           ;lcd.c: 72:     send_nibble(0b0011);
  3860  001FD4  0E03               	movlw	3
  3861  001FD6  EC27  F012         	call	_send_nibble
  3862                           
  3863                           ;lcd.c: 73:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3864  001FDA  0E11               	movlw	17
  3865  001FDC  6E0A               	movwf	??_initLCD& (0+255),c
  3866  001FDE  0E3A               	movlw	58
  3867  001FE0                     u1877:
  3868  001FE0  2EE8               	decfsz	wreg,f,c
  3869  001FE2  D7FE               	bra	u1877
  3870  001FE4  2E0A               	decfsz	??_initLCD& (0+255),f,c
  3871  001FE6  D7FC               	bra	u1877
  3872  001FE8  D000               	nop2	
  3873                           
  3874                           ;lcd.c: 74:     send_nibble(0b0011);
  3875  001FEA  0E03               	movlw	3
  3876  001FEC  EC27  F012         	call	_send_nibble
  3877                           
  3878                           ;lcd.c: 75:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  3879  001FF0  0E7D               	movlw	125
  3880  001FF2                     u1887:
  3881  001FF2  2EE8               	decfsz	wreg,f,c
  3882  001FF4  D7FE               	bra	u1887
  3883                           
  3884                           ;lcd.c: 76:     send_byte(0b00110010);
  3885  001FF6  0E32               	movlw	50
  3886  001FF8  EC3B  F012         	call	_send_byte
  3887                           
  3888                           ;lcd.c: 78:     send_byte(0b00101000);
  3889  001FFC  0E28               	movlw	40
  3890  001FFE  EC3B  F012         	call	_send_byte
  3891                           
  3892                           ;lcd.c: 79:     send_byte(0b00001000);
  3893  002002  0E08               	movlw	8
  3894  002004  EC3B  F012         	call	_send_byte
  3895                           
  3896                           ;lcd.c: 80:     send_byte(0b00000001);
  3897  002008  0E01               	movlw	1
  3898  00200A  EC3B  F012         	call	_send_byte
  3899                           
  3900                           ;lcd.c: 81:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3901  00200E  0E11               	movlw	17
  3902  002010  6E0A               	movwf	??_initLCD& (0+255),c
  3903  002012  0E3A               	movlw	58
  3904  002014                     u1897:
  3905  002014  2EE8               	decfsz	wreg,f,c
  3906  002016  D7FE               	bra	u1897
  3907  002018  2E0A               	decfsz	??_initLCD& (0+255),f,c
  3908  00201A  D7FC               	bra	u1897
  3909  00201C  D000               	nop2	
  3910                           
  3911                           ;lcd.c: 82:     send_byte(0b00000110);
  3912  00201E  0E06               	movlw	6
  3913  002020  EC3B  F012         	call	_send_byte
  3914                           
  3915                           ;lcd.c: 85:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  3916  002024  0E0F               	movlw	15
  3917  002026  EC44  F012         	call	_lcdInst
  3918  00202A  0012               	return		;funcret
  3919  00202C                     __end_of_initLCD:
  3920                           	opt callstack 0
  3921                           
  3922 ;; *************** function _UART_send_string *****************
  3923 ;; Defined at:
  3924 ;;		line 65 in file "uart.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;  message         2    6[COMRAM] PTR unsigned char 
  3927 ;;		 -> main@uart_char_to_send(25), STR_1(15), 
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;  i               2   10[COMRAM] int 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3939 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;Total ram usage:        6 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    3
  3946 ;; This function calls:
  3947 ;;		_UART_send_char
  3948 ;; This function is called by:
  3949 ;;		_main
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text17
  3954  001CCE                     __ptext17:
  3955                           	opt callstack 0
  3956  001CCE                     _UART_send_string:
  3957                           	opt callstack 27
  3958                           
  3959                           ;uart.c: 67:     int i;;uart.c: 68:     i=0;
  3960                           
  3961                           ;incstack = 0
  3962  001CCE  0E00               	movlw	0
  3963  001CD0  6E0C               	movwf	UART_send_string@i+1,c
  3964  001CD2  0E00               	movlw	0
  3965  001CD4  6E0B               	movwf	UART_send_string@i,c
  3966                           
  3967                           ;uart.c: 69:     while(message[i]!='\0'){
  3968  001CD6  D035               	goto	l2742
  3969  001CD8                     l2734:
  3970                           
  3971                           ;uart.c: 70:         if(message[i] == '\0'){
  3972  001CD8  500B               	movf	UART_send_string@i,w,c
  3973  001CDA  2407               	addwf	UART_send_string@message,w,c
  3974  001CDC  6E09               	movwf	??_UART_send_string& (0+255),c
  3975  001CDE  500C               	movf	UART_send_string@i+1,w,c
  3976  001CE0  2008               	addwfc	UART_send_string@message+1,w,c
  3977  001CE2  6E0A               	movwf	(??_UART_send_string+1)& (0+255),c
  3978  001CE4  C009  FFF6         	movff	??_UART_send_string,tblptrl
  3979  001CE8  C00A  FFF7         	movff	??_UART_send_string+1,tblptrh
  3980  001CEC  0E00               	movlw	low (__smallconst shr (0+16))
  3981  001CEE  6EF8               	movwf	tblptru,c
  3982  001CF0  0E0F               	movlw	(high __ramtop+-1)
  3983  001CF2  64F7               	cpfsgt	tblptrh,c
  3984  001CF4  D003               	bra	u1627
  3985  001CF6  0008               	tblrd		*
  3986  001CF8  50F5               	movf	tablat,w,c
  3987  001CFA  D005               	bra	u1620
  3988  001CFC                     u1627:
  3989  001CFC  CFF6 FFE1          	movff	tblptrl,fsr1l
  3990  001D00  CFF7 FFE2          	movff	tblptrh,fsr1h
  3991  001D04  50E7               	movf	indf1,w,c
  3992  001D06                     u1620:
  3993  001D06  0900               	iorlw	0
  3994  001D08  B4D8               	btfsc	status,2,c
  3995  001D0A  0012               	return	
  3996                           
  3997                           ;uart.c: 75:         UART_send_char(message[i]);
  3998  001D0C  500B               	movf	UART_send_string@i,w,c
  3999  001D0E  2407               	addwf	UART_send_string@message,w,c
  4000  001D10  6E09               	movwf	??_UART_send_string& (0+255),c
  4001  001D12  500C               	movf	UART_send_string@i+1,w,c
  4002  001D14  2008               	addwfc	UART_send_string@message+1,w,c
  4003  001D16  6E0A               	movwf	(??_UART_send_string+1)& (0+255),c
  4004  001D18  C009  FFF6         	movff	??_UART_send_string,tblptrl
  4005  001D1C  C00A  FFF7         	movff	??_UART_send_string+1,tblptrh
  4006  001D20  0E00               	movlw	low (__smallconst shr (0+16))
  4007  001D22  6EF8               	movwf	tblptru,c
  4008  001D24  0E0F               	movlw	(high __ramtop+-1)
  4009  001D26  64F7               	cpfsgt	tblptrh,c
  4010  001D28  D003               	bra	u1647
  4011  001D2A  0008               	tblrd		*
  4012  001D2C  50F5               	movf	tablat,w,c
  4013  001D2E  D005               	bra	u1640
  4014  001D30                     u1647:
  4015  001D30  CFF6 FFE1          	movff	tblptrl,fsr1l
  4016  001D34  CFF7 FFE2          	movff	tblptrh,fsr1h
  4017  001D38  50E7               	movf	indf1,w,c
  4018  001D3A                     u1640:
  4019  001D3A  EC19  F012         	call	_UART_send_char
  4020                           
  4021                           ;uart.c: 76:         i++;
  4022  001D3E  4A0B               	infsnz	UART_send_string@i,f,c
  4023  001D40  2A0C               	incf	UART_send_string@i+1,f,c
  4024  001D42                     l2742:
  4025                           
  4026                           ;uart.c: 69:     while(message[i]!='\0'){
  4027  001D42  500B               	movf	UART_send_string@i,w,c
  4028  001D44  2407               	addwf	UART_send_string@message,w,c
  4029  001D46  6E09               	movwf	??_UART_send_string& (0+255),c
  4030  001D48  500C               	movf	UART_send_string@i+1,w,c
  4031  001D4A  2008               	addwfc	UART_send_string@message+1,w,c
  4032  001D4C  6E0A               	movwf	(??_UART_send_string+1)& (0+255),c
  4033  001D4E  C009  FFF6         	movff	??_UART_send_string,tblptrl
  4034  001D52  C00A  FFF7         	movff	??_UART_send_string+1,tblptrh
  4035  001D56  0E00               	movlw	low (__smallconst shr (0+16))
  4036  001D58  6EF8               	movwf	tblptru,c
  4037  001D5A  0E0F               	movlw	(high __ramtop+-1)
  4038  001D5C  64F7               	cpfsgt	tblptrh,c
  4039  001D5E  D003               	bra	u1657
  4040  001D60  0008               	tblrd		*
  4041  001D62  50F5               	movf	tablat,w,c
  4042  001D64  D005               	bra	u1650
  4043  001D66                     u1657:
  4044  001D66  CFF6 FFE1          	movff	tblptrl,fsr1l
  4045  001D6A  CFF7 FFE2          	movff	tblptrh,fsr1h
  4046  001D6E  50E7               	movf	indf1,w,c
  4047  001D70                     u1650:
  4048  001D70  0900               	iorlw	0
  4049  001D72  B4D8               	btfsc	status,2,c
  4050  001D74  0012               	return	
  4051  001D76  D7B0               	goto	l2734
  4052  001D78                     __end_of_UART_send_string:
  4053                           	opt callstack 0
  4054                           
  4055 ;; *************** function _UART_send_char *****************
  4056 ;; Defined at:
  4057 ;;		line 58 in file "uart.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;  c               1    wreg     const unsigned char 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  c               1    5[COMRAM] const unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      void 
  4064 ;; Registers used:
  4065 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4075 ;;Total ram usage:        1 bytes
  4076 ;; Hardware stack levels used:    1
  4077 ;; Hardware stack levels required when called:    2
  4078 ;; This function calls:
  4079 ;;		Nothing
  4080 ;; This function is called by:
  4081 ;;		_UART_send_string
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text18
  4086  002432                     __ptext18:
  4087                           	opt callstack 0
  4088  002432                     _UART_send_char:
  4089                           	opt callstack 27
  4090                           
  4091                           ;incstack = 0
  4092                           ;UART_send_char@c stored from wreg
  4093  002432  6E06               	movwf	UART_send_char@c,c
  4094                           
  4095                           ;uart.c: 59:     _tx_buffer[_tx_buffer_head] = c;
  4096  002434  0E00               	movlw	low __tx_buffer
  4097  002436  2467               	addwf	__tx_buffer_head,w,c	;volatile
  4098  002438  6ED9               	movwf	fsr2l,c
  4099  00243A  6ADA               	clrf	fsr2h,c
  4100  00243C  0E01               	movlw	high __tx_buffer
  4101  00243E  22DA               	addwfc	fsr2h,f,c
  4102  002440  C006  FFDF         	movff	UART_send_char@c,indf2
  4103                           
  4104                           ;uart.c: 60:     _tx_buffer_head = (unsigned char) (_tx_buffer_head + 1) % 64;
  4105  002444  2867               	incf	__tx_buffer_head,w,c	;volatile
  4106  002446  0B3F               	andlw	63
  4107  002448  6E67               	movwf	__tx_buffer_head,c	;volatile
  4108                           
  4109                           ;uart.c: 61:     TXIE = 1;
  4110  00244A  889D               	bsf	3997,4,c	;volatile
  4111  00244C  0012               	return		;funcret
  4112  00244E                     __end_of_UART_send_char:
  4113                           	opt callstack 0
  4114                           
  4115 ;; *************** function _UART_read *****************
  4116 ;; Defined at:
  4117 ;;		line 89 in file "uart.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;  c               1    5[COMRAM] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      unsigned char 
  4124 ;; Registers used:
  4125 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;Total ram usage:        1 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    2
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_main
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           	psect	text19
  4146  0023EC                     __ptext19:
  4147                           	opt callstack 0
  4148  0023EC                     _UART_read:
  4149                           	opt callstack 28
  4150                           
  4151                           ;uart.c: 90:     if(_rx_buffer_head == _rx_buffer_tail){
  4152                           
  4153                           ;incstack = 0
  4154  0023EC  5068               	movf	__rx_buffer_tail,w,c	;volatile
  4155  0023EE  1869               	xorwf	__rx_buffer_head,w,c	;volatile
  4156  0023F0  A4D8               	btfss	status,2,c
  4157  0023F2  D002               	goto	l2756
  4158                           
  4159                           ;uart.c: 91:         return -1;
  4160  0023F4  0EFF               	movlw	255
  4161  0023F6  0012               	return	
  4162  0023F8                     l2756:
  4163                           
  4164                           ;uart.c: 93:         unsigned char c = _rx_buffer[_rx_buffer_tail];
  4165  0023F8  0E40               	movlw	low __rx_buffer
  4166  0023FA  2468               	addwf	__rx_buffer_tail,w,c	;volatile
  4167  0023FC  6ED9               	movwf	fsr2l,c
  4168  0023FE  6ADA               	clrf	fsr2h,c
  4169  002400  0E01               	movlw	high __rx_buffer
  4170  002402  22DA               	addwfc	fsr2h,f,c
  4171  002404  50DF               	movf	indf2,w,c
  4172  002406  6E06               	movwf	UART_read@c,c
  4173                           
  4174                           ;uart.c: 94:         _rx_buffer_tail = (unsigned char)(_rx_buffer_tail + 1) % 64;
  4175  002408  2868               	incf	__rx_buffer_tail,w,c	;volatile
  4176  00240A  0B3F               	andlw	63
  4177  00240C  6E68               	movwf	__rx_buffer_tail,c	;volatile
  4178                           
  4179                           ;uart.c: 95:         return c;
  4180  00240E  5006               	movf	UART_read@c,w,c
  4181  002410  0012               	return		;funcret
  4182  002412                     __end_of_UART_read:
  4183                           	opt callstack 0
  4184                           
  4185 ;; *************** function _UART_available *****************
  4186 ;; Defined at:
  4187 ;;		line 85 in file "uart.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  2    5[COMRAM] int 
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, status,0
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4201 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;Total ram usage:        4 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    2
  4208 ;; This function calls:
  4209 ;;		Nothing
  4210 ;; This function is called by:
  4211 ;;		_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text20
  4216  002412                     __ptext20:
  4217                           	opt callstack 0
  4218  002412                     _UART_available:
  4219                           	opt callstack 28
  4220                           
  4221                           ;uart.c: 86:     return ((unsigned int)(64 + _rx_buffer_head - _rx_buffer_tail)) % 64;
  4222                           
  4223                           ;incstack = 0
  4224  002412  5068               	movf	__rx_buffer_tail,w,c	;volatile
  4225  002414  C069  F008         	movff	__rx_buffer_head,??_UART_available	;volatile
  4226  002418  6A09               	clrf	(??_UART_available+1)& (0+255),c
  4227  00241A  5E08               	subwf	??_UART_available,f,c
  4228  00241C  0E00               	movlw	0
  4229  00241E  5A09               	subwfb	??_UART_available+1,f,c
  4230  002420  0E40               	movlw	64
  4231  002422  2608               	addwf	??_UART_available,f,c
  4232  002424  0E00               	movlw	0
  4233  002426  2209               	addwfc	??_UART_available+1,f,c
  4234  002428  0E3F               	movlw	63
  4235  00242A  1408               	andwf	??_UART_available,w,c
  4236  00242C  6E06               	movwf	?_UART_available,c
  4237  00242E  6A07               	clrf	?_UART_available+1,c
  4238  002430  0012               	return		;funcret
  4239  002432                     __end_of_UART_available:
  4240                           	opt callstack 0
  4241                           
  4242 ;; *************** function _UART_Init *****************
  4243 ;; Defined at:
  4244 ;;		line 15 in file "uart.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;		None
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;  baudRate        4   23[COMRAM] long 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, status,2, status,0, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        8 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    3
  4265 ;; This function calls:
  4266 ;;		___aldiv
  4267 ;; This function is called by:
  4268 ;;		_main
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           	psect	text21
  4273  001EAE                     __ptext21:
  4274                           	opt callstack 0
  4275  001EAE                     _UART_Init:
  4276                           	opt callstack 27
  4277                           
  4278                           ;uart.c: 16:     _rx_buffer_head = 0;
  4279                           
  4280                           ;incstack = 0
  4281  001EAE  0E00               	movlw	0
  4282  001EB0  6E69               	movwf	__rx_buffer_head,c	;volatile
  4283                           
  4284                           ;uart.c: 17:     _rx_buffer_tail = 0;
  4285  001EB2  0E00               	movlw	0
  4286  001EB4  6E68               	movwf	__rx_buffer_tail,c	;volatile
  4287                           
  4288                           ;uart.c: 18:     _tx_buffer_head = 0;
  4289  001EB6  0E00               	movlw	0
  4290  001EB8  6E67               	movwf	__tx_buffer_head,c	;volatile
  4291                           
  4292                           ;uart.c: 19:     _tx_buffer_tail = 0;
  4293  001EBA  0E00               	movlw	0
  4294  001EBC  6E66               	movwf	__tx_buffer_tail,c	;volatile
  4295                           
  4296                           ;uart.c: 20:     long baudRate = 19200;
  4297  001EBE  0E00               	movlw	0
  4298  001EC0  6E18               	movwf	UART_Init@baudRate,c
  4299  001EC2  0E4B               	movlw	75
  4300  001EC4  6E19               	movwf	UART_Init@baudRate+1,c
  4301  001EC6  0E00               	movlw	0
  4302  001EC8  6E1A               	movwf	UART_Init@baudRate+2,c
  4303  001ECA  0E00               	movlw	0
  4304  001ECC  6E1B               	movwf	UART_Init@baudRate+3,c
  4305                           
  4306                           ;uart.c: 28:     SPBRG = (unsigned char)((10000000 / (64 * baudRate)) - 1);
  4307  001ECE  0E80               	movlw	128
  4308  001ED0  6E06               	movwf	___aldiv@dividend,c
  4309  001ED2  0E96               	movlw	150
  4310  001ED4  6E07               	movwf	___aldiv@dividend+1,c
  4311  001ED6  0E98               	movlw	152
  4312  001ED8  6E08               	movwf	___aldiv@dividend+2,c
  4313  001EDA  0E00               	movlw	0
  4314  001EDC  6E09               	movwf	___aldiv@dividend+3,c
  4315  001EDE  C018  F014         	movff	UART_Init@baudRate,??_UART_Init
  4316  001EE2  C019  F015         	movff	UART_Init@baudRate+1,??_UART_Init+1
  4317  001EE6  C01A  F016         	movff	UART_Init@baudRate+2,??_UART_Init+2
  4318  001EEA  C01B  F017         	movff	UART_Init@baudRate+3,??_UART_Init+3
  4319  001EEE  0E06               	movlw	6
  4320  001EF0                     u1615:
  4321  001EF0  90D8               	bcf	status,0,c
  4322  001EF2  3614               	rlcf	??_UART_Init,f,c
  4323  001EF4  3615               	rlcf	??_UART_Init+1,f,c
  4324  001EF6  3616               	rlcf	??_UART_Init+2,f,c
  4325  001EF8  3617               	rlcf	??_UART_Init+3,f,c
  4326  001EFA  2EE8               	decfsz	wreg,f,c
  4327  001EFC  D7F9               	goto	u1615
  4328  001EFE  C014  F00A         	movff	??_UART_Init,___aldiv@divisor
  4329  001F02  C015  F00B         	movff	??_UART_Init+1,___aldiv@divisor+1
  4330  001F06  C016  F00C         	movff	??_UART_Init+2,___aldiv@divisor+2
  4331  001F0A  C017  F00D         	movff	??_UART_Init+3,___aldiv@divisor+3
  4332  001F0E  ECAB  F00D         	call	___aldiv	;wreg free
  4333  001F12  0406               	decf	?___aldiv,w,c
  4334  001F14  6EAF               	movwf	4015,c	;volatile
  4335                           
  4336                           ;uart.c: 31:     TRISCbits.TRISC6 = 0;
  4337  001F16  9C94               	bcf	3988,6,c	;volatile
  4338                           
  4339                           ;uart.c: 32:     TRISCbits.TRISC7 = 1;
  4340  001F18  8E94               	bsf	3988,7,c	;volatile
  4341                           
  4342                           ;uart.c: 35:     TXSTAbits.TX9 = 0;
  4343  001F1A  9CAC               	bcf	4012,6,c	;volatile
  4344                           
  4345                           ;uart.c: 36:     TXSTAbits.SYNC = 0;
  4346  001F1C  98AC               	bcf	4012,4,c	;volatile
  4347                           
  4348                           ;uart.c: 38:     TXSTAbits.TXEN = 1;
  4349  001F1E  8AAC               	bsf	4012,5,c	;volatile
  4350                           
  4351                           ;uart.c: 39:     _delay((unsigned long)((5)*(10000000/4000.0)));
  4352  001F20  0E11               	movlw	17
  4353  001F22  6E14               	movwf	??_UART_Init& (0+255),c
  4354  001F24  0E3A               	movlw	58
  4355  001F26                     u1907:
  4356  001F26  2EE8               	decfsz	wreg,f,c
  4357  001F28  D7FE               	bra	u1907
  4358  001F2A  2E14               	decfsz	??_UART_Init& (0+255),f,c
  4359  001F2C  D7FC               	bra	u1907
  4360  001F2E  D000               	nop2	
  4361                           
  4362                           ;uart.c: 41:     RCSTAbits.SPEN = 1;
  4363  001F30  8EAB               	bsf	4011,7,c	;volatile
  4364                           
  4365                           ;uart.c: 42:     RCSTAbits.RX9 = 0;
  4366  001F32  9CAB               	bcf	4011,6,c	;volatile
  4367                           
  4368                           ;uart.c: 43:     RCSTAbits.CREN = 1;
  4369  001F34  88AB               	bsf	4011,4,c	;volatile
  4370                           
  4371                           ;uart.c: 45:     PIE1bits.RCIE = 1;
  4372  001F36  8A9D               	bsf	3997,5,c	;volatile
  4373                           
  4374                           ;uart.c: 46:     PIE1bits.TXIE = 1;
  4375  001F38  889D               	bsf	3997,4,c	;volatile
  4376                           
  4377                           ;uart.c: 48:     IPR1bits.TXIP = 0;
  4378  001F3A  989F               	bcf	3999,4,c	;volatile
  4379                           
  4380                           ;uart.c: 49:     IPR1bits.RCIP = 0;
  4381  001F3C  9A9F               	bcf	3999,5,c	;volatile
  4382  001F3E  0012               	return		;funcret
  4383  001F40                     __end_of_UART_Init:
  4384                           	opt callstack 0
  4385                           
  4386 ;; *************** function ___aldiv *****************
  4387 ;; Defined at:
  4388 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aldiv.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  dividend        4    5[COMRAM] long 
  4391 ;;  divisor         4    9[COMRAM] long 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  quotient        4   15[COMRAM] long 
  4394 ;;  sign            1   14[COMRAM] unsigned char 
  4395 ;;  counter         1   13[COMRAM] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  4    5[COMRAM] long 
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4405 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;Total ram usage:       14 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    2
  4412 ;; This function calls:
  4413 ;;		Nothing
  4414 ;; This function is called by:
  4415 ;;		_UART_Init
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text22
  4420  001B56                     __ptext22:
  4421                           	opt callstack 0
  4422  001B56                     ___aldiv:
  4423                           	opt callstack 27
  4424                           
  4425                           ;incstack = 0
  4426  001B56  0E00               	movlw	0
  4427  001B58  6E0F               	movwf	___aldiv@sign,c
  4428  001B5A  AE0D               	btfss	___aldiv@divisor+3,7,c
  4429  001B5C  D00A               	goto	l2576
  4430  001B5E  1E0D               	comf	___aldiv@divisor+3,f,c
  4431  001B60  1E0C               	comf	___aldiv@divisor+2,f,c
  4432  001B62  1E0B               	comf	___aldiv@divisor+1,f,c
  4433  001B64  6C0A               	negf	___aldiv@divisor,c
  4434  001B66  0E00               	movlw	0
  4435  001B68  220B               	addwfc	___aldiv@divisor+1,f,c
  4436  001B6A  220C               	addwfc	___aldiv@divisor+2,f,c
  4437  001B6C  220D               	addwfc	___aldiv@divisor+3,f,c
  4438  001B6E  0E01               	movlw	1
  4439  001B70  6E0F               	movwf	___aldiv@sign,c
  4440  001B72                     l2576:
  4441  001B72  AE09               	btfss	___aldiv@dividend+3,7,c
  4442  001B74  D00A               	goto	l2582
  4443  001B76  1E09               	comf	___aldiv@dividend+3,f,c
  4444  001B78  1E08               	comf	___aldiv@dividend+2,f,c
  4445  001B7A  1E07               	comf	___aldiv@dividend+1,f,c
  4446  001B7C  6C06               	negf	___aldiv@dividend,c
  4447  001B7E  0E00               	movlw	0
  4448  001B80  2207               	addwfc	___aldiv@dividend+1,f,c
  4449  001B82  2208               	addwfc	___aldiv@dividend+2,f,c
  4450  001B84  2209               	addwfc	___aldiv@dividend+3,f,c
  4451  001B86  0E01               	movlw	1
  4452  001B88  1A0F               	xorwf	___aldiv@sign,f,c
  4453  001B8A                     l2582:
  4454  001B8A  0E00               	movlw	0
  4455  001B8C  6E10               	movwf	___aldiv@quotient,c
  4456  001B8E  0E00               	movlw	0
  4457  001B90  6E11               	movwf	___aldiv@quotient+1,c
  4458  001B92  0E00               	movlw	0
  4459  001B94  6E12               	movwf	___aldiv@quotient+2,c
  4460  001B96  0E00               	movlw	0
  4461  001B98  6E13               	movwf	___aldiv@quotient+3,c
  4462  001B9A  500A               	movf	___aldiv@divisor,w,c
  4463  001B9C  100B               	iorwf	___aldiv@divisor+1,w,c
  4464  001B9E  100C               	iorwf	___aldiv@divisor+2,w,c
  4465  001BA0  100D               	iorwf	___aldiv@divisor+3,w,c
  4466  001BA2  B4D8               	btfsc	status,2,c
  4467  001BA4  D02A               	goto	l2604
  4468  001BA6  0E01               	movlw	1
  4469  001BA8  6E0E               	movwf	___aldiv@counter,c
  4470  001BAA  D006               	goto	l2590
  4471  001BAC                     l2588:
  4472  001BAC  90D8               	bcf	status,0,c
  4473  001BAE  360A               	rlcf	___aldiv@divisor,f,c
  4474  001BB0  360B               	rlcf	___aldiv@divisor+1,f,c
  4475  001BB2  360C               	rlcf	___aldiv@divisor+2,f,c
  4476  001BB4  360D               	rlcf	___aldiv@divisor+3,f,c
  4477  001BB6  2A0E               	incf	___aldiv@counter,f,c
  4478  001BB8                     l2590:
  4479  001BB8  AE0D               	btfss	___aldiv@divisor+3,7,c
  4480  001BBA  D7F8               	goto	l2588
  4481  001BBC                     u1480:
  4482  001BBC  90D8               	bcf	status,0,c
  4483  001BBE  3610               	rlcf	___aldiv@quotient,f,c
  4484  001BC0  3611               	rlcf	___aldiv@quotient+1,f,c
  4485  001BC2  3612               	rlcf	___aldiv@quotient+2,f,c
  4486  001BC4  3613               	rlcf	___aldiv@quotient+3,f,c
  4487  001BC6  500A               	movf	___aldiv@divisor,w,c
  4488  001BC8  5C06               	subwf	___aldiv@dividend,w,c
  4489  001BCA  500B               	movf	___aldiv@divisor+1,w,c
  4490  001BCC  5807               	subwfb	___aldiv@dividend+1,w,c
  4491  001BCE  500C               	movf	___aldiv@divisor+2,w,c
  4492  001BD0  5808               	subwfb	___aldiv@dividend+2,w,c
  4493  001BD2  500D               	movf	___aldiv@divisor+3,w,c
  4494  001BD4  5809               	subwfb	___aldiv@dividend+3,w,c
  4495  001BD6  A0D8               	btfss	status,0,c
  4496  001BD8  D009               	goto	l2600
  4497  001BDA  500A               	movf	___aldiv@divisor,w,c
  4498  001BDC  5E06               	subwf	___aldiv@dividend,f,c
  4499  001BDE  500B               	movf	___aldiv@divisor+1,w,c
  4500  001BE0  5A07               	subwfb	___aldiv@dividend+1,f,c
  4501  001BE2  500C               	movf	___aldiv@divisor+2,w,c
  4502  001BE4  5A08               	subwfb	___aldiv@dividend+2,f,c
  4503  001BE6  500D               	movf	___aldiv@divisor+3,w,c
  4504  001BE8  5A09               	subwfb	___aldiv@dividend+3,f,c
  4505  001BEA  8010               	bsf	___aldiv@quotient,0,c
  4506  001BEC                     l2600:
  4507  001BEC  90D8               	bcf	status,0,c
  4508  001BEE  320D               	rrcf	___aldiv@divisor+3,f,c
  4509  001BF0  320C               	rrcf	___aldiv@divisor+2,f,c
  4510  001BF2  320B               	rrcf	___aldiv@divisor+1,f,c
  4511  001BF4  320A               	rrcf	___aldiv@divisor,f,c
  4512  001BF6  2E0E               	decfsz	___aldiv@counter,f,c
  4513  001BF8  D7E1               	goto	u1480
  4514  001BFA                     l2604:
  4515  001BFA  500F               	movf	___aldiv@sign,w,c
  4516  001BFC  B4D8               	btfsc	status,2,c
  4517  001BFE  D008               	goto	l2608
  4518  001C00  1E13               	comf	___aldiv@quotient+3,f,c
  4519  001C02  1E12               	comf	___aldiv@quotient+2,f,c
  4520  001C04  1E11               	comf	___aldiv@quotient+1,f,c
  4521  001C06  6C10               	negf	___aldiv@quotient,c
  4522  001C08  0E00               	movlw	0
  4523  001C0A  2211               	addwfc	___aldiv@quotient+1,f,c
  4524  001C0C  2212               	addwfc	___aldiv@quotient+2,f,c
  4525  001C0E  2213               	addwfc	___aldiv@quotient+3,f,c
  4526  001C10                     l2608:
  4527  001C10  C010  F006         	movff	___aldiv@quotient,?___aldiv
  4528  001C14  C011  F007         	movff	___aldiv@quotient+1,?___aldiv+1
  4529  001C18  C012  F008         	movff	___aldiv@quotient+2,?___aldiv+2
  4530  001C1C  C013  F009         	movff	___aldiv@quotient+3,?___aldiv+3
  4531  001C20  0012               	return		;funcret
  4532  001C22                     __end_of___aldiv:
  4533                           	opt callstack 0
  4534                           
  4535 ;; *************** function _RTC_Init *****************
  4536 ;; Defined at:
  4537 ;;		line 31 in file "rtc.c"
  4538 ;; Parameters:    Size  Location     Type
  4539 ;;		None
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;		None
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      void 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        0 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    4
  4558 ;; This function calls:
  4559 ;;		_I2C_Master_Start
  4560 ;;		_I2C_Master_Stop
  4561 ;;		_I2C_Master_Write
  4562 ;; This function is called by:
  4563 ;;		_main
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text23
  4568  002344                     __ptext23:
  4569                           	opt callstack 0
  4570  002344                     _RTC_Init:
  4571                           	opt callstack 26
  4572                           
  4573                           ;rtc.c: 33:     I2C_Master_Start();;rtc.c: 33:     I2C_Master_Start();
  4574                           
  4575                           ;incstack = 0
  4576  002344  EC66  F012         	call	_I2C_Master_Start	;wreg free
  4577                           
  4578                           ;rtc.c: 35:     I2C_Master_Write(0xD0u);;rtc.c: 35:     I2C_Master_Write(0xD0u);
  4579  002348  0E00               	movlw	0
  4580  00234A  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  4581  00234C  0ED0               	movlw	208
  4582  00234E  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  4583  002350  EC4A  F012         	call	_I2C_Master_Write	;wreg free
  4584                           
  4585                           ;rtc.c: 36:     I2C_Master_Write(0x07u);;rtc.c: 36:     I2C_Master_Write(0x07u);
  4586  002354  0E00               	movlw	0
  4587  002356  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  4588  002358  0E07               	movlw	7
  4589  00235A  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  4590  00235C  EC4A  F012         	call	_I2C_Master_Write	;wreg free
  4591                           
  4592                           ;rtc.c: 38:     I2C_Master_Write(0x00);;rtc.c: 38:     I2C_Master_Write(0x00);
  4593  002360  0E00               	movlw	0
  4594  002362  6E08               	movwf	I2C_Master_Write@byteToWrite+1,c
  4595  002364  0E00               	movlw	0
  4596  002366  6E07               	movwf	I2C_Master_Write@byteToWrite,c
  4597  002368  EC4A  F012         	call	_I2C_Master_Write	;wreg free
  4598                           
  4599                           ;rtc.c: 40:     I2C_Master_Stop();;rtc.c: 40:     I2C_Master_Stop();
  4600  00236C  EC62  F012         	call	_I2C_Master_Stop	;wreg free
  4601  002370  0012               	return		;funcret
  4602  002372                     __end_of_RTC_Init:
  4603                           	opt callstack 0
  4604                           
  4605 ;; *************** function _I2C_Master_Write *****************
  4606 ;; Defined at:
  4607 ;;		line 66 in file "I2C.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  byteToWrite     2    6[COMRAM] unsigned int 
  4610 ;; Auto vars:     Size  Location     Type
  4611 ;;		None
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  1    wreg      void 
  4614 ;; Registers used:
  4615 ;;		wreg, status,2, status,0, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4621 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;Total ram usage:        2 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    3
  4628 ;; This function calls:
  4629 ;;		_I2C_Master_Wait
  4630 ;; This function is called by:
  4631 ;;		_RTC_Init
  4632 ;;		_RTC_SetDateTime
  4633 ;;		_RTC_GetDateTime
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text24
  4638  002494                     __ptext24:
  4639                           	opt callstack 0
  4640  002494                     _I2C_Master_Write:
  4641                           	opt callstack 26
  4642                           
  4643                           ;I2C.c: 67:     I2C_Master_Wait();
  4644                           
  4645                           ;incstack = 0
  4646  002494  EC32  F012         	call	_I2C_Master_Wait	;wreg free
  4647                           
  4648                           ;I2C.c: 70:     SSPBUF = byteToWrite;
  4649  002498  C007  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  4650  00249C  0012               	return		;funcret
  4651  00249E                     __end_of_I2C_Master_Write:
  4652                           	opt callstack 0
  4653                           
  4654 ;; *************** function _I2C_Master_Stop *****************
  4655 ;; Defined at:
  4656 ;;		line 61 in file "I2C.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;Total ram usage:        0 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    3
  4677 ;; This function calls:
  4678 ;;		_I2C_Master_Wait
  4679 ;; This function is called by:
  4680 ;;		_RTC_Init
  4681 ;;		_RTC_SetDateTime
  4682 ;;		_RTC_GetDateTime
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           	psect	text25
  4687  0024C4                     __ptext25:
  4688                           	opt callstack 0
  4689  0024C4                     _I2C_Master_Stop:
  4690                           	opt callstack 26
  4691                           
  4692                           ;I2C.c: 62:     I2C_Master_Wait();
  4693                           
  4694                           ;incstack = 0
  4695  0024C4  EC32  F012         	call	_I2C_Master_Wait	;wreg free
  4696                           
  4697                           ;I2C.c: 63:     SSPCON2bits.PEN = 1;
  4698  0024C8  84C5               	bsf	4037,2,c	;volatile
  4699  0024CA  0012               	return		;funcret
  4700  0024CC                     __end_of_I2C_Master_Stop:
  4701                           	opt callstack 0
  4702                           
  4703 ;; *************** function _I2C_Master_Start *****************
  4704 ;; Defined at:
  4705 ;;		line 51 in file "I2C.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;		None
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;		None
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1    wreg      void 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2, status,0, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;Total ram usage:        0 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    3
  4726 ;; This function calls:
  4727 ;;		_I2C_Master_Wait
  4728 ;; This function is called by:
  4729 ;;		_RTC_Init
  4730 ;;		_RTC_SetDateTime
  4731 ;;		_RTC_GetDateTime
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text26
  4736  0024CC                     __ptext26:
  4737                           	opt callstack 0
  4738  0024CC                     _I2C_Master_Start:
  4739                           	opt callstack 26
  4740                           
  4741                           ;I2C.c: 52:     I2C_Master_Wait();
  4742                           
  4743                           ;incstack = 0
  4744  0024CC  EC32  F012         	call	_I2C_Master_Wait	;wreg free
  4745                           
  4746                           ;I2C.c: 53:     SSPCON2bits.SEN = 1;
  4747  0024D0  80C5               	bsf	4037,0,c	;volatile
  4748  0024D2  0012               	return		;funcret
  4749  0024D4                     __end_of_I2C_Master_Start:
  4750                           	opt callstack 0
  4751                           
  4752 ;; *************** function _I2C_Master_Wait *****************
  4753 ;; Defined at:
  4754 ;;		line 17 in file "I2C.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;                  1    wreg      void 
  4761 ;; Registers used:
  4762 ;;		wreg, status,2, status,0
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4771 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4772 ;;Total ram usage:        1 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    2
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_I2C_Master_Start
  4779 ;;		_I2C_Master_Stop
  4780 ;;		_I2C_Master_Write
  4781 ;;		_I2C_Master_RepeatedStart
  4782 ;;		_I2C_Master_Read
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text27
  4787  002464                     __ptext27:
  4788                           	opt callstack 0
  4789  002464                     _I2C_Master_Wait:
  4790                           	opt callstack 26
  4791                           
  4792                           ;I2C.c: 22:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F)){
  4793                           
  4794                           ;I2C.c: 24:     }
  4795                           
  4796                           ;incstack = 0
  4797  002464  B4C7               	btfsc	4039,2,c	;volatile
  4798  002466  D7FE               	goto	_I2C_Master_Wait
  4799  002468  CFC5 F006          	movff	4037,??_I2C_Master_Wait	;volatile
  4800  00246C  0E1F               	movlw	31
  4801  00246E  1606               	andwf	??_I2C_Master_Wait,f,c
  4802  002470  B4D8               	btfsc	status,2,c
  4803  002472  0012               	return	
  4804  002474  D7F7               	goto	_I2C_Master_Wait
  4805  002476                     __end_of_I2C_Master_Wait:
  4806                           	opt callstack 0
  4807                           
  4808 ;; *************** function _LCD_write_str *****************
  4809 ;; Defined at:
  4810 ;;		line 123 in file "lcd.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  str             2    8[COMRAM] PTR unsigned char 
  4813 ;;		 -> main@lcdDisplay(16), STR_12(15), STR_11(16), STR_10(16), 
  4814 ;;		 -> STR_9(17), STR_8(18), STR_7(16), STR_6(16), 
  4815 ;;		 -> STR_5(17), STR_4(18), STR_3(16), STR_2(16), 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  i               2   12[COMRAM] int 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  1    wreg      void 
  4820 ;; Registers used:
  4821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        6 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    5
  4834 ;; This function calls:
  4835 ;;		_send_byte
  4836 ;; This function is called by:
  4837 ;;		_main
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text28
  4842  001C22                     __ptext28:
  4843                           	opt callstack 0
  4844  001C22                     _LCD_write_str:
  4845                           	opt callstack 25
  4846                           
  4847                           ;lcd.c: 124:     int i=0;
  4848                           
  4849                           ;incstack = 0
  4850  001C22  0E00               	movlw	0
  4851  001C24  6E0E               	movwf	LCD_write_str@i+1,c
  4852  001C26  0E00               	movlw	0
  4853  001C28  6E0D               	movwf	LCD_write_str@i,c
  4854                           
  4855                           ;lcd.c: 125:     while(str[i]!=0 && str[i] != '\n'){
  4856  001C2A  D01C               	goto	l2672
  4857  001C2C                     l95:
  4858                           
  4859                           ;lcd.c: 127:         LATDbits.LATD2 = 1;
  4860  001C2C  848C               	bsf	3980,2,c	;volatile
  4861                           
  4862                           ;lcd.c: 128:         send_byte((unsigned char)str[i]);
  4863  001C2E  500D               	movf	LCD_write_str@i,w,c
  4864  001C30  2409               	addwf	LCD_write_str@str,w,c
  4865  001C32  6E0B               	movwf	??_LCD_write_str& (0+255),c
  4866  001C34  500E               	movf	LCD_write_str@i+1,w,c
  4867  001C36  200A               	addwfc	LCD_write_str@str+1,w,c
  4868  001C38  6E0C               	movwf	(??_LCD_write_str+1)& (0+255),c
  4869  001C3A  C00B  FFF6         	movff	??_LCD_write_str,tblptrl
  4870  001C3E  C00C  FFF7         	movff	??_LCD_write_str+1,tblptrh
  4871  001C42  0E00               	movlw	low (__smallconst shr (0+16))
  4872  001C44  6EF8               	movwf	tblptru,c
  4873  001C46  0E0F               	movlw	(high __ramtop+-1)
  4874  001C48  64F7               	cpfsgt	tblptrh,c
  4875  001C4A  D003               	bra	u1567
  4876  001C4C  0008               	tblrd		*
  4877  001C4E  50F5               	movf	tablat,w,c
  4878  001C50  D005               	bra	u1560
  4879  001C52                     u1567:
  4880  001C52  CFF6 FFE1          	movff	tblptrl,fsr1l
  4881  001C56  CFF7 FFE2          	movff	tblptrh,fsr1h
  4882  001C5A  50E7               	movf	indf1,w,c
  4883  001C5C                     u1560:
  4884  001C5C  EC3B  F012         	call	_send_byte
  4885                           
  4886                           ;lcd.c: 129:         i++;
  4887  001C60  4A0D               	infsnz	LCD_write_str@i,f,c
  4888  001C62  2A0E               	incf	LCD_write_str@i+1,f,c
  4889  001C64                     l2672:
  4890                           
  4891                           ;lcd.c: 125:     while(str[i]!=0 && str[i] != '\n'){
  4892  001C64  500D               	movf	LCD_write_str@i,w,c
  4893  001C66  2409               	addwf	LCD_write_str@str,w,c
  4894  001C68  6E0B               	movwf	??_LCD_write_str& (0+255),c
  4895  001C6A  500E               	movf	LCD_write_str@i+1,w,c
  4896  001C6C  200A               	addwfc	LCD_write_str@str+1,w,c
  4897  001C6E  6E0C               	movwf	(??_LCD_write_str+1)& (0+255),c
  4898  001C70  C00B  FFF6         	movff	??_LCD_write_str,tblptrl
  4899  001C74  C00C  FFF7         	movff	??_LCD_write_str+1,tblptrh
  4900  001C78  0E00               	movlw	low (__smallconst shr (0+16))
  4901  001C7A  6EF8               	movwf	tblptru,c
  4902  001C7C  0E0F               	movlw	(high __ramtop+-1)
  4903  001C7E  64F7               	cpfsgt	tblptrh,c
  4904  001C80  D003               	bra	u1577
  4905  001C82  0008               	tblrd		*
  4906  001C84  50F5               	movf	tablat,w,c
  4907  001C86  D005               	bra	u1570
  4908  001C88                     u1577:
  4909  001C88  CFF6 FFE1          	movff	tblptrl,fsr1l
  4910  001C8C  CFF7 FFE2          	movff	tblptrh,fsr1h
  4911  001C90  50E7               	movf	indf1,w,c
  4912  001C92                     u1570:
  4913  001C92  0900               	iorlw	0
  4914  001C94  B4D8               	btfsc	status,2,c
  4915  001C96  0012               	return	
  4916  001C98  500D               	movf	LCD_write_str@i,w,c
  4917  001C9A  2409               	addwf	LCD_write_str@str,w,c
  4918  001C9C  6E0B               	movwf	??_LCD_write_str& (0+255),c
  4919  001C9E  500E               	movf	LCD_write_str@i+1,w,c
  4920  001CA0  200A               	addwfc	LCD_write_str@str+1,w,c
  4921  001CA2  6E0C               	movwf	(??_LCD_write_str+1)& (0+255),c
  4922  001CA4  C00B  FFF6         	movff	??_LCD_write_str,tblptrl
  4923  001CA8  C00C  FFF7         	movff	??_LCD_write_str+1,tblptrh
  4924  001CAC  0E00               	movlw	low (__smallconst shr (0+16))
  4925  001CAE  6EF8               	movwf	tblptru,c
  4926  001CB0  0E0F               	movlw	(high __ramtop+-1)
  4927  001CB2  64F7               	cpfsgt	tblptrh,c
  4928  001CB4  D003               	bra	u1597
  4929  001CB6  0008               	tblrd		*
  4930  001CB8  50F5               	movf	tablat,w,c
  4931  001CBA  D005               	bra	u1590
  4932  001CBC                     u1597:
  4933  001CBC  CFF6 FFE1          	movff	tblptrl,fsr1l
  4934  001CC0  CFF7 FFE2          	movff	tblptrh,fsr1h
  4935  001CC4  50E7               	movf	indf1,w,c
  4936  001CC6                     u1590:
  4937  001CC6  0A0A               	xorlw	10
  4938  001CC8  B4D8               	btfsc	status,2,c
  4939  001CCA  0012               	return	
  4940  001CCC  D7AF               	goto	l95
  4941  001CCE                     __end_of_LCD_write_str:
  4942                           	opt callstack 0
  4943                           
  4944 ;; *************** function _LCD_set_cursor *****************
  4945 ;; Defined at:
  4946 ;;		line 106 in file "lcd.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  row             2    9[COMRAM] unsigned int 
  4949 ;;  column          2   11[COMRAM] unsigned int 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;		None
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, status,2, status,0, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : 0/0
  4958 ;;		On exit  : 0/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4961 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4964 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4965 ;;Total ram usage:        4 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    6
  4968 ;; This function calls:
  4969 ;;		_lcdInst
  4970 ;; This function is called by:
  4971 ;;		_main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text29
  4976  0021C8                     __ptext29:
  4977                           	opt callstack 0
  4978  0021C8                     _LCD_set_cursor:
  4979                           	opt callstack 24
  4980                           
  4981                           ;lcd.c: 108:     row=row%4;
  4982                           
  4983                           ;incstack = 0
  4984  0021C8  0E03               	movlw	3
  4985  0021CA  140A               	andwf	LCD_set_cursor@row,w,c
  4986  0021CC  6E0A               	movwf	LCD_set_cursor@row,c
  4987  0021CE  6A0B               	clrf	LCD_set_cursor@row+1,c
  4988                           
  4989                           ;lcd.c: 109:     column = column %16;
  4990  0021D0  0E0F               	movlw	15
  4991  0021D2  140C               	andwf	LCD_set_cursor@column,w,c
  4992  0021D4  6E0C               	movwf	LCD_set_cursor@column,c
  4993  0021D6  6A0D               	clrf	LCD_set_cursor@column+1,c
  4994                           
  4995                           ;lcd.c: 110:     if(row==1){
  4996  0021D8  040A               	decf	LCD_set_cursor@row,w,c
  4997  0021DA  100B               	iorwf	LCD_set_cursor@row+1,w,c
  4998  0021DC  A4D8               	btfss	status,2,c
  4999  0021DE  D004               	goto	l88
  5000                           
  5001                           ;lcd.c: 111:         column +=LCD_LINE2_ADDR;
  5002  0021E0  0E40               	movlw	64
  5003  0021E2  260C               	addwf	LCD_set_cursor@column,f,c
  5004  0021E4  0E00               	movlw	0
  5005  0021E6  220D               	addwfc	LCD_set_cursor@column+1,f,c
  5006  0021E8                     l88:
  5007                           
  5008                           ;lcd.c: 113:     if(row==2){
  5009  0021E8  0E02               	movlw	2
  5010  0021EA  180A               	xorwf	LCD_set_cursor@row,w,c
  5011  0021EC  100B               	iorwf	LCD_set_cursor@row+1,w,c
  5012  0021EE  A4D8               	btfss	status,2,c
  5013  0021F0  D004               	goto	l89
  5014                           
  5015                           ;lcd.c: 114:         column +=LCD_LINE3_ADDR;
  5016  0021F2  0E10               	movlw	16
  5017  0021F4  260C               	addwf	LCD_set_cursor@column,f,c
  5018  0021F6  0E00               	movlw	0
  5019  0021F8  220D               	addwfc	LCD_set_cursor@column+1,f,c
  5020  0021FA                     l89:
  5021                           
  5022                           ;lcd.c: 116:     if(row==3){
  5023  0021FA  0E03               	movlw	3
  5024  0021FC  180A               	xorwf	LCD_set_cursor@row,w,c
  5025  0021FE  100B               	iorwf	LCD_set_cursor@row+1,w,c
  5026  002200  A4D8               	btfss	status,2,c
  5027  002202  D004               	goto	l2664
  5028                           
  5029                           ;lcd.c: 117:         column +=LCD_LINE4_ADDR;
  5030  002204  0E50               	movlw	80
  5031  002206  260C               	addwf	LCD_set_cursor@column,f,c
  5032  002208  0E00               	movlw	0
  5033  00220A  220D               	addwfc	LCD_set_cursor@column+1,f,c
  5034  00220C                     l2664:
  5035                           
  5036                           ;lcd.c: 120:     { lcdInst(0x80 | column);};
  5037  00220C  500C               	movf	LCD_set_cursor@column,w,c
  5038  00220E  0980               	iorlw	128
  5039  002210  EC44  F012         	call	_lcdInst
  5040  002214  0012               	return		;funcret
  5041  002216                     __end_of_LCD_set_cursor:
  5042                           	opt callstack 0
  5043                           
  5044 ;; *************** function _lcdInst *****************
  5045 ;; Defined at:
  5046 ;;		line 62 in file "lcd.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;  data            1    wreg     unsigned char 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  data            1    8[COMRAM] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  1    wreg      void 
  5053 ;; Registers used:
  5054 ;;		wreg, status,2, status,0, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;Total ram usage:        1 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    5
  5067 ;; This function calls:
  5068 ;;		_send_byte
  5069 ;; This function is called by:
  5070 ;;		_initLCD
  5071 ;;		_LCD_set_cursor
  5072 ;;		_lcd_shift_cursor
  5073 ;;		_lcd_shift_display
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text30
  5078  002488                     __ptext30:
  5079                           	opt callstack 0
  5080  002488                     _lcdInst:
  5081                           	opt callstack 24
  5082                           
  5083                           ;incstack = 0
  5084                           ;lcdInst@data stored from wreg
  5085  002488  6E09               	movwf	lcdInst@data,c
  5086                           
  5087                           ;lcd.c: 63:     LATDbits.LATD2 = 0;
  5088  00248A  948C               	bcf	3980,2,c	;volatile
  5089                           
  5090                           ;lcd.c: 64:     send_byte(data);
  5091  00248C  5009               	movf	lcdInst@data,w,c
  5092  00248E  EC3B  F012         	call	_send_byte
  5093  002492  0012               	return		;funcret
  5094  002494                     __end_of_lcdInst:
  5095                           	opt callstack 0
  5096                           
  5097 ;; *************** function _send_byte *****************
  5098 ;; Defined at:
  5099 ;;		line 53 in file "lcd.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  data            1    wreg     unsigned char 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  data            1    7[COMRAM] unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  1    wreg      void 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0, cstack
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5114 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5116 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5117 ;;Total ram usage:        1 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    4
  5120 ;; This function calls:
  5121 ;;		_send_nibble
  5122 ;; This function is called by:
  5123 ;;		_lcdInst
  5124 ;;		_initLCD
  5125 ;;		_LCD_write_str
  5126 ;;		_LCD_write_char
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           	psect	text31
  5131  002476                     __ptext31:
  5132                           	opt callstack 0
  5133  002476                     _send_byte:
  5134                           	opt callstack 25
  5135                           
  5136                           ;incstack = 0
  5137                           ;send_byte@data stored from wreg
  5138  002476  6E08               	movwf	send_byte@data,c
  5139                           
  5140                           ;lcd.c: 55:     send_nibble(data >> 4);
  5141  002478  3808               	swapf	send_byte@data,w,c
  5142  00247A  0B0F               	andlw	15
  5143  00247C  EC27  F012         	call	_send_nibble
  5144                           
  5145                           ;lcd.c: 58:     send_nibble(data);
  5146  002480  5008               	movf	send_byte@data,w,c
  5147  002482  EC27  F012         	call	_send_nibble
  5148  002486  0012               	return		;funcret
  5149  002488                     __end_of_send_byte:
  5150                           	opt callstack 0
  5151                           
  5152 ;; *************** function _send_nibble *****************
  5153 ;; Defined at:
  5154 ;;		line 42 in file "lcd.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  data            1    wreg     unsigned char 
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;  data            1    6[COMRAM] unsigned char 
  5159 ;; Return value:  Size  Location     Type
  5160 ;;                  1    wreg      void 
  5161 ;; Registers used:
  5162 ;;		wreg, status,2, status,0, cstack
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5169 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;Total ram usage:        1 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:    3
  5175 ;; This function calls:
  5176 ;;		_pulse_e
  5177 ;; This function is called by:
  5178 ;;		_send_byte
  5179 ;;		_initLCD
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text32
  5184  00244E                     __ptext32:
  5185                           	opt callstack 0
  5186  00244E                     _send_nibble:
  5187                           	opt callstack 26
  5188                           
  5189                           ;incstack = 0
  5190                           ;send_nibble@data stored from wreg
  5191  00244E  6E07               	movwf	send_nibble@data,c
  5192                           
  5193                           ;lcd.c: 44:     LATD = (unsigned char)(LATD & 0x0F);
  5194  002450  508C               	movf	3980,w,c	;volatile
  5195  002452  0B0F               	andlw	15
  5196  002454  6E8C               	movwf	3980,c	;volatile
  5197                           
  5198                           ;lcd.c: 45:     LATD = (unsigned char)((data << 4) | LATD);
  5199  002456  3807               	swapf	send_nibble@data,w,c
  5200  002458  0BF0               	andlw	240
  5201  00245A  108C               	iorwf	3980,w,c	;volatile
  5202  00245C  6E8C               	movwf	3980,c	;volatile
  5203                           
  5204                           ;lcd.c: 46:     pulse_e();
  5205  00245E  ECCE  F011         	call	_pulse_e	;wreg free
  5206  002462  0012               	return		;funcret
  5207  002464                     __end_of_send_nibble:
  5208                           	opt callstack 0
  5209                           
  5210 ;; *************** function _pulse_e *****************
  5211 ;; Defined at:
  5212 ;;		line 26 in file "lcd.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  interruptSta    1    5[COMRAM] unsigned char 
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      void 
  5219 ;; Registers used:
  5220 ;;		wreg
  5221 ;; Tracked objects:
  5222 ;;		On entry : 0/0
  5223 ;;		On exit  : 0/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5229 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5230 ;;Total ram usage:        1 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    2
  5233 ;; This function calls:
  5234 ;;		Nothing
  5235 ;; This function is called by:
  5236 ;;		_send_nibble
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text33
  5241  00239C                     __ptext33:
  5242                           	opt callstack 0
  5243  00239C                     _pulse_e:
  5244                           	opt callstack 26
  5245                           
  5246                           ;lcd.c: 27:     unsigned char interruptState = INTCONbits.GIE;
  5247                           
  5248                           ;incstack = 0
  5249  00239C  0E00               	movlw	0
  5250  00239E  BEF2               	btfsc	4082,7,c	;volatile
  5251  0023A0  0E01               	movlw	1
  5252  0023A2  6E06               	movwf	pulse_e@interruptState,c
  5253                           
  5254                           ;lcd.c: 28:     (INTCONbits.GIE = 0);
  5255  0023A4  9EF2               	bcf	4082,7,c	;volatile
  5256                           
  5257                           ;lcd.c: 29:     LATDbits.LATD3 = 1;
  5258  0023A6  868C               	bsf	3980,3,c	;volatile
  5259                           
  5260                           ;lcd.c: 32:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  5261  0023A8  0E14               	movlw	20
  5262  0023AA                     u1917:
  5263  0023AA  2EE8               	decfsz	wreg,f,c
  5264  0023AC  D7FE               	bra	u1917
  5265  0023AE  D000               	nop2	
  5266                           
  5267                           ;lcd.c: 33:     LATDbits.LATD3 = 0;
  5268  0023B0  968C               	bcf	3980,3,c	;volatile
  5269                           
  5270                           ;lcd.c: 34:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  5271  0023B2  0E53               	movlw	83
  5272  0023B4                     u1927:
  5273  0023B4  2EE8               	decfsz	wreg,f,c
  5274  0023B6  D7FE               	bra	u1927
  5275  0023B8  F000               	nop	
  5276                           
  5277                           ;lcd.c: 35:     INTCONbits.GIE = interruptState;
  5278  0023BA  B006               	btfsc	pulse_e@interruptState,0,c
  5279  0023BC  D002               	bra	u995
  5280  0023BE  9EF2               	bcf	4082,7,c	;volatile
  5281  0023C0  D001               	bra	u996
  5282  0023C2                     u995:
  5283  0023C2  8EF2               	bsf	4082,7,c	;volatile
  5284  0023C4                     u996:
  5285  0023C4  0012               	return		;funcret
  5286  0023C6                     __end_of_pulse_e:
  5287                           	opt callstack 0
  5288                           
  5289 ;; *************** function _I2C_Master_Init *****************
  5290 ;; Defined at:
  5291 ;;		line 28 in file "I2C.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;  clockFreq       4   18[COMRAM] const unsigned long 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5305 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;Total ram usage:        8 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    3
  5312 ;; This function calls:
  5313 ;;		___lldiv
  5314 ;; This function is called by:
  5315 ;;		_main
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text34
  5320  00202C                     __ptext34:
  5321                           	opt callstack 0
  5322  00202C                     _I2C_Master_Init:
  5323                           	opt callstack 27
  5324                           
  5325                           ;I2C.c: 30:     SSPCON1bits.SSPEN = 0;
  5326                           
  5327                           ;incstack = 0
  5328  00202C  9AC6               	bcf	4038,5,c	;volatile
  5329                           
  5330                           ;I2C.c: 33:     TRISCbits.TRISC3 = 1;
  5331  00202E  8694               	bsf	3988,3,c	;volatile
  5332                           
  5333                           ;I2C.c: 34:     TRISCbits.TRISC4 = 1;
  5334  002030  8894               	bsf	3988,4,c	;volatile
  5335                           
  5336                           ;I2C.c: 39:     SSPADD = (10000000 / (4 * clockFreq)) - 1;
  5337  002032  0E80               	movlw	128
  5338  002034  6E06               	movwf	___lldiv@dividend,c
  5339  002036  0E96               	movlw	150
  5340  002038  6E07               	movwf	___lldiv@dividend+1,c
  5341  00203A  0E98               	movlw	152
  5342  00203C  6E08               	movwf	___lldiv@dividend+2,c
  5343  00203E  0E00               	movlw	0
  5344  002040  6E09               	movwf	___lldiv@dividend+3,c
  5345  002042  C013  F017         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  5346  002046  C014  F018         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  5347  00204A  C015  F019         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  5348  00204E  C016  F01A         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  5349  002052  0E02               	movlw	2
  5350  002054                     u1515:
  5351  002054  90D8               	bcf	status,0,c
  5352  002056  3617               	rlcf	??_I2C_Master_Init,f,c
  5353  002058  3618               	rlcf	??_I2C_Master_Init+1,f,c
  5354  00205A  3619               	rlcf	??_I2C_Master_Init+2,f,c
  5355  00205C  361A               	rlcf	??_I2C_Master_Init+3,f,c
  5356  00205E  2EE8               	decfsz	wreg,f,c
  5357  002060  D7F9               	goto	u1515
  5358  002062  C017  F00A         	movff	??_I2C_Master_Init,___lldiv@divisor
  5359  002066  C018  F00B         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5360  00206A  C019  F00C         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5361  00206E  C01A  F00D         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5362  002072  ECA0  F00F         	call	___lldiv	;wreg free
  5363  002076  0406               	decf	?___lldiv,w,c
  5364  002078  6EC8               	movwf	4040,c	;volatile
  5365                           
  5366                           ;I2C.c: 42:     SSPSTAT = 0b10000000;
  5367  00207A  0E80               	movlw	128
  5368  00207C  6EC7               	movwf	4039,c	;volatile
  5369                           
  5370                           ;I2C.c: 45:     SSPCON1 = 0b00101000;
  5371  00207E  0E28               	movlw	40
  5372  002080  6EC6               	movwf	4038,c	;volatile
  5373                           
  5374                           ;I2C.c: 48:     SSPCON2 = 0b00000000;
  5375  002082  0E00               	movlw	0
  5376  002084  6EC5               	movwf	4037,c	;volatile
  5377  002086  0012               	return		;funcret
  5378  002088                     __end_of_I2C_Master_Init:
  5379                           	opt callstack 0
  5380                           
  5381 ;; *************** function ___lldiv *****************
  5382 ;; Defined at:
  5383 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;  dividend        4    5[COMRAM] unsigned long 
  5386 ;;  divisor         4    9[COMRAM] unsigned long 
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  quotient        4   13[COMRAM] unsigned long 
  5389 ;;  counter         1   17[COMRAM] unsigned char 
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  4    5[COMRAM] unsigned long 
  5392 ;; Registers used:
  5393 ;;		wreg, status,2, status,0
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 0/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5399 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5400 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5402 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;Total ram usage:       13 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    2
  5406 ;; This function calls:
  5407 ;;		Nothing
  5408 ;; This function is called by:
  5409 ;;		_I2C_Master_Init
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           	psect	text35
  5414  001F40                     __ptext35:
  5415                           	opt callstack 0
  5416  001F40                     ___lldiv:
  5417                           	opt callstack 27
  5418                           
  5419                           ;incstack = 0
  5420  001F40  0E00               	movlw	0
  5421  001F42  6E0E               	movwf	___lldiv@quotient,c
  5422  001F44  0E00               	movlw	0
  5423  001F46  6E0F               	movwf	___lldiv@quotient+1,c
  5424  001F48  0E00               	movlw	0
  5425  001F4A  6E10               	movwf	___lldiv@quotient+2,c
  5426  001F4C  0E00               	movlw	0
  5427  001F4E  6E11               	movwf	___lldiv@quotient+3,c
  5428  001F50  500A               	movf	___lldiv@divisor,w,c
  5429  001F52  100B               	iorwf	___lldiv@divisor+1,w,c
  5430  001F54  100C               	iorwf	___lldiv@divisor+2,w,c
  5431  001F56  100D               	iorwf	___lldiv@divisor+3,w,c
  5432  001F58  B4D8               	btfsc	status,2,c
  5433  001F5A  D02A               	goto	l511
  5434  001F5C  0E01               	movlw	1
  5435  001F5E  6E12               	movwf	___lldiv@counter,c
  5436  001F60  D006               	goto	l2554
  5437  001F62                     l2552:
  5438  001F62  90D8               	bcf	status,0,c
  5439  001F64  360A               	rlcf	___lldiv@divisor,f,c
  5440  001F66  360B               	rlcf	___lldiv@divisor+1,f,c
  5441  001F68  360C               	rlcf	___lldiv@divisor+2,f,c
  5442  001F6A  360D               	rlcf	___lldiv@divisor+3,f,c
  5443  001F6C  2A12               	incf	___lldiv@counter,f,c
  5444  001F6E                     l2554:
  5445  001F6E  AE0D               	btfss	___lldiv@divisor+3,7,c
  5446  001F70  D7F8               	goto	l2552
  5447  001F72                     u1430:
  5448  001F72  90D8               	bcf	status,0,c
  5449  001F74  360E               	rlcf	___lldiv@quotient,f,c
  5450  001F76  360F               	rlcf	___lldiv@quotient+1,f,c
  5451  001F78  3610               	rlcf	___lldiv@quotient+2,f,c
  5452  001F7A  3611               	rlcf	___lldiv@quotient+3,f,c
  5453  001F7C  500A               	movf	___lldiv@divisor,w,c
  5454  001F7E  5C06               	subwf	___lldiv@dividend,w,c
  5455  001F80  500B               	movf	___lldiv@divisor+1,w,c
  5456  001F82  5807               	subwfb	___lldiv@dividend+1,w,c
  5457  001F84  500C               	movf	___lldiv@divisor+2,w,c
  5458  001F86  5808               	subwfb	___lldiv@dividend+2,w,c
  5459  001F88  500D               	movf	___lldiv@divisor+3,w,c
  5460  001F8A  5809               	subwfb	___lldiv@dividend+3,w,c
  5461  001F8C  A0D8               	btfss	status,0,c
  5462  001F8E  D009               	goto	l2564
  5463  001F90  500A               	movf	___lldiv@divisor,w,c
  5464  001F92  5E06               	subwf	___lldiv@dividend,f,c
  5465  001F94  500B               	movf	___lldiv@divisor+1,w,c
  5466  001F96  5A07               	subwfb	___lldiv@dividend+1,f,c
  5467  001F98  500C               	movf	___lldiv@divisor+2,w,c
  5468  001F9A  5A08               	subwfb	___lldiv@dividend+2,f,c
  5469  001F9C  500D               	movf	___lldiv@divisor+3,w,c
  5470  001F9E  5A09               	subwfb	___lldiv@dividend+3,f,c
  5471  001FA0  800E               	bsf	___lldiv@quotient,0,c
  5472  001FA2                     l2564:
  5473  001FA2  90D8               	bcf	status,0,c
  5474  001FA4  320D               	rrcf	___lldiv@divisor+3,f,c
  5475  001FA6  320C               	rrcf	___lldiv@divisor+2,f,c
  5476  001FA8  320B               	rrcf	___lldiv@divisor+1,f,c
  5477  001FAA  320A               	rrcf	___lldiv@divisor,f,c
  5478  001FAC  2E12               	decfsz	___lldiv@counter,f,c
  5479  001FAE  D7E1               	goto	u1430
  5480  001FB0                     l511:
  5481  001FB0  C00E  F006         	movff	___lldiv@quotient,?___lldiv
  5482  001FB4  C00F  F007         	movff	___lldiv@quotient+1,?___lldiv+1
  5483  001FB8  C010  F008         	movff	___lldiv@quotient+2,?___lldiv+2
  5484  001FBC  C011  F009         	movff	___lldiv@quotient+3,?___lldiv+3
  5485  001FC0  0012               	return		;funcret
  5486  001FC2                     __end_of___lldiv:
  5487                           	opt callstack 0
  5488                           
  5489 ;; *************** function _DCMotorLeftRightFwdON *****************
  5490 ;; Defined at:
  5491 ;;		line 38 in file "motors.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;		None
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      void 
  5498 ;; Registers used:
  5499 ;;		cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;Total ram usage:        0 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    3
  5512 ;; This function calls:
  5513 ;;		_DCMotorLeftFwd
  5514 ;;		_DCMotorRightFwd
  5515 ;; This function is called by:
  5516 ;;		_main
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text36
  5521  00249E                     __ptext36:
  5522                           	opt callstack 0
  5523  00249E                     _DCMotorLeftRightFwdON:
  5524                           	opt callstack 27
  5525                           
  5526                           ;motors.c: 39:     DCMotorLeftFwd();;motors.c: 39:     DCMotorLeftFwd();
  5527                           
  5528                           ;incstack = 0
  5529  00249E  EC6E  F012         	call	_DCMotorLeftFwd	;wreg free
  5530                           
  5531                           ;motors.c: 40:     DCMotorRightFwd();;motors.c: 40:     DCMotorRightFwd();
  5532  0024A2  EC6A  F012         	call	_DCMotorRightFwd	;wreg free
  5533  0024A6  0012               	return		;funcret
  5534  0024A8                     __end_of_DCMotorLeftRightFwdON:
  5535                           	opt callstack 0
  5536                           
  5537 ;; *************** function _DCMotorRightFwd *****************
  5538 ;; Defined at:
  5539 ;;		line 11 in file "motors.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;		None
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;		None
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      void 
  5546 ;; Registers used:
  5547 ;;		None
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;Total ram usage:        0 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    2
  5560 ;; This function calls:
  5561 ;;		Nothing
  5562 ;; This function is called by:
  5563 ;;		_main
  5564 ;;		_DCMotorLeftRightFwdON
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text37
  5569  0024D4                     __ptext37:
  5570                           	opt callstack 0
  5571  0024D4                     _DCMotorRightFwd:
  5572                           	opt callstack 28
  5573                           
  5574                           ;motors.c: 12:     LATAbits.LATA1 = 0;;motors.c: 12:     LATAbits.LATA1 = 0;
  5575                           
  5576                           ;incstack = 0
  5577  0024D4  9289               	bcf	3977,1,c	;volatile
  5578                           
  5579                           ;motors.c: 13:     LATAbits.LATA3 = 0;;motors.c: 13:     LATAbits.LATA3 = 0;
  5580  0024D6  9689               	bcf	3977,3,c	;volatile
  5581                           
  5582                           ;motors.c: 15:     LATAbits.LATA0 = 1;;motors.c: 15:     LATAbits.LATA0 = 1;
  5583  0024D8  8089               	bsf	3977,0,c	;volatile
  5584  0024DA  0012               	return		;funcret
  5585  0024DC                     __end_of_DCMotorRightFwd:
  5586                           	opt callstack 0
  5587                           
  5588 ;; *************** function _DCMotorLeftFwd *****************
  5589 ;; Defined at:
  5590 ;;		line 5 in file "motors.c"
  5591 ;; Parameters:    Size  Location     Type
  5592 ;;		None
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;		None
  5595 ;; Return value:  Size  Location     Type
  5596 ;;                  1    wreg      void 
  5597 ;; Registers used:
  5598 ;;		None
  5599 ;; Tracked objects:
  5600 ;;		On entry : 0/0
  5601 ;;		On exit  : 0/0
  5602 ;;		Unchanged: 0/0
  5603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;Total ram usage:        0 bytes
  5609 ;; Hardware stack levels used:    1
  5610 ;; Hardware stack levels required when called:    2
  5611 ;; This function calls:
  5612 ;;		Nothing
  5613 ;; This function is called by:
  5614 ;;		_main
  5615 ;;		_DCMotorLeftRightFwdON
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text38
  5620  0024DC                     __ptext38:
  5621                           	opt callstack 0
  5622  0024DC                     _DCMotorLeftFwd:
  5623                           	opt callstack 27
  5624                           
  5625                           ;motors.c: 6:     LATAbits.LATA1 = 0;;motors.c: 6:     LATAbits.LATA1 = 0;
  5626                           
  5627                           ;incstack = 0
  5628  0024DC  9289               	bcf	3977,1,c	;volatile
  5629                           
  5630                           ;motors.c: 7:     LATAbits.LATA3 = 0;;motors.c: 7:     LATAbits.LATA3 = 0;
  5631  0024DE  9689               	bcf	3977,3,c	;volatile
  5632                           
  5633                           ;motors.c: 9:     LATAbits.LATA2 = 1;;motors.c: 9:     LATAbits.LATA2 = 1;
  5634  0024E0  8489               	bsf	3977,2,c	;volatile
  5635  0024E2  0012               	return		;funcret
  5636  0024E4                     __end_of_DCMotorLeftFwd:
  5637                           	opt callstack 0
  5638                           
  5639 ;; *************** function _DCMotorLeftRightBkwdON *****************
  5640 ;; Defined at:
  5641 ;;		line 42 in file "motors.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;		None
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;		None
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  1    wreg      void 
  5648 ;; Registers used:
  5649 ;;		cstack
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;Total ram usage:        0 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:    3
  5662 ;; This function calls:
  5663 ;;		_DCMotorLeftBkwd
  5664 ;;		_DCMotorRightBkwd
  5665 ;; This function is called by:
  5666 ;;		_main
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text39
  5671  0024A8                     __ptext39:
  5672                           	opt callstack 0
  5673  0024A8                     _DCMotorLeftRightBkwdON:
  5674                           	opt callstack 27
  5675                           
  5676                           ;motors.c: 43:     DCMotorLeftBkwd();;motors.c: 43:     DCMotorLeftBkwd();
  5677                           
  5678                           ;incstack = 0
  5679  0024A8  EC76  F012         	call	_DCMotorLeftBkwd	;wreg free
  5680                           
  5681                           ;motors.c: 44:     DCMotorRightBkwd();;motors.c: 44:     DCMotorRightBkwd();
  5682  0024AC  EC72  F012         	call	_DCMotorRightBkwd	;wreg free
  5683  0024B0  0012               	return		;funcret
  5684  0024B2                     __end_of_DCMotorLeftRightBkwdON:
  5685                           	opt callstack 0
  5686                           
  5687 ;; *************** function _DCMotorRightBkwd *****************
  5688 ;; Defined at:
  5689 ;;		line 23 in file "motors.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;		None
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      void 
  5696 ;; Registers used:
  5697 ;;		None
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5707 ;;Total ram usage:        0 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    2
  5710 ;; This function calls:
  5711 ;;		Nothing
  5712 ;; This function is called by:
  5713 ;;		_main
  5714 ;;		_DCMotorLeftRightBkwdON
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text40
  5719  0024E4                     __ptext40:
  5720                           	opt callstack 0
  5721  0024E4                     _DCMotorRightBkwd:
  5722                           	opt callstack 28
  5723                           
  5724                           ;motors.c: 24:     LATAbits.LATA0 = 0;;motors.c: 24:     LATAbits.LATA0 = 0;
  5725                           
  5726                           ;incstack = 0
  5727  0024E4  9089               	bcf	3977,0,c	;volatile
  5728                           
  5729                           ;motors.c: 25:     LATAbits.LATA2 = 0;;motors.c: 25:     LATAbits.LATA2 = 0;
  5730  0024E6  9489               	bcf	3977,2,c	;volatile
  5731                           
  5732                           ;motors.c: 27:     LATAbits.LATA1 = 1;;motors.c: 27:     LATAbits.LATA1 = 1;
  5733  0024E8  8289               	bsf	3977,1,c	;volatile
  5734  0024EA  0012               	return		;funcret
  5735  0024EC                     __end_of_DCMotorRightBkwd:
  5736                           	opt callstack 0
  5737                           
  5738 ;; *************** function _DCMotorLeftBkwd *****************
  5739 ;; Defined at:
  5740 ;;		line 17 in file "motors.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;		None
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;		None
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      void 
  5747 ;; Registers used:
  5748 ;;		None
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;Total ram usage:        0 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    2
  5761 ;; This function calls:
  5762 ;;		Nothing
  5763 ;; This function is called by:
  5764 ;;		_main
  5765 ;;		_DCMotorLeftRightBkwdON
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text41
  5770  0024EC                     __ptext41:
  5771                           	opt callstack 0
  5772  0024EC                     _DCMotorLeftBkwd:
  5773                           	opt callstack 27
  5774                           
  5775                           ;motors.c: 18:     LATAbits.LATA0 = 0;;motors.c: 18:     LATAbits.LATA0 = 0;
  5776                           
  5777                           ;incstack = 0
  5778  0024EC  9089               	bcf	3977,0,c	;volatile
  5779                           
  5780                           ;motors.c: 19:     LATAbits.LATA2 = 0;;motors.c: 19:     LATAbits.LATA2 = 0;
  5781  0024EE  9489               	bcf	3977,2,c	;volatile
  5782                           
  5783                           ;motors.c: 21:     LATAbits.LATA3 = 1;;motors.c: 21:     LATAbits.LATA3 = 1;
  5784  0024F0  8689               	bsf	3977,3,c	;volatile
  5785  0024F2  0012               	return		;funcret
  5786  0024F4                     __end_of_DCMotorLeftBkwd:
  5787                           	opt callstack 0
  5788                           
  5789 ;; *************** function _DCMotorAllOff *****************
  5790 ;; Defined at:
  5791 ;;		line 29 in file "motors.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;		None
  5794 ;; Auto vars:     Size  Location     Type
  5795 ;;		None
  5796 ;; Return value:  Size  Location     Type
  5797 ;;                  1    wreg      void 
  5798 ;; Registers used:
  5799 ;;		None
  5800 ;; Tracked objects:
  5801 ;;		On entry : 0/0
  5802 ;;		On exit  : 0/0
  5803 ;;		Unchanged: 0/0
  5804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;Total ram usage:        0 bytes
  5810 ;; Hardware stack levels used:    1
  5811 ;; Hardware stack levels required when called:    2
  5812 ;; This function calls:
  5813 ;;		Nothing
  5814 ;; This function is called by:
  5815 ;;		_main
  5816 ;; This function uses a non-reentrant model
  5817 ;;
  5818                           
  5819                           	psect	text42
  5820  0024B2                     __ptext42:
  5821                           	opt callstack 0
  5822  0024B2                     _DCMotorAllOff:
  5823                           	opt callstack 28
  5824                           
  5825                           ;motors.c: 30:     LATAbits.LATA0 = 0;;motors.c: 30:     LATAbits.LATA0 = 0;
  5826                           
  5827                           ;incstack = 0
  5828  0024B2  9089               	bcf	3977,0,c	;volatile
  5829                           
  5830                           ;motors.c: 31:     LATAbits.LATA2 = 0;;motors.c: 31:     LATAbits.LATA2 = 0;
  5831  0024B4  9489               	bcf	3977,2,c	;volatile
  5832                           
  5833                           ;motors.c: 33:     LATAbits.LATA1 = 0;;motors.c: 33:     LATAbits.LATA1 = 0;
  5834  0024B6  9289               	bcf	3977,1,c	;volatile
  5835                           
  5836                           ;motors.c: 34:     LATAbits.LATA3 = 0;;motors.c: 34:     LATAbits.LATA3 = 0;
  5837  0024B8  9689               	bcf	3977,3,c	;volatile
  5838  0024BA  0012               	return		;funcret
  5839  0024BC                     __end_of_DCMotorAllOff:
  5840                           	opt callstack 0
  5841                           
  5842 ;; *************** function _low_isr *****************
  5843 ;; Defined at:
  5844 ;;		line 335 in file "main.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;		None
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;		None
  5849 ;; Return value:  Size  Location     Type
  5850 ;;                  1    wreg      void 
  5851 ;; Registers used:
  5852 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5862 ;;Total ram usage:        5 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    1
  5865 ;; This function calls:
  5866 ;;		Nothing
  5867 ;; This function is called by:
  5868 ;;		Interrupt level 1
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	intcodelo
  5873  000018                     __pintcodelo:
  5874                           	opt callstack 0
  5875  000018                     _low_isr:
  5876                           	opt callstack 21
  5877                           
  5878                           ;incstack = 0
  5879  000018  8072               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5880  00001A  CFD8 F001          	movff	status,??_low_isr
  5881  00001E  CFE8 F002          	movff	wreg,??_low_isr+1
  5882  000022  CFE0 F003          	movff	bsr,??_low_isr+2
  5883  000026  CFD9 F004          	movff	fsr2l,??_low_isr+3
  5884  00002A  CFDA F005          	movff	fsr2h,??_low_isr+4
  5885                           
  5886                           ;main.c: 336:     (INTCONbits.GIE = 0);
  5887  00002E  9EF2               	bcf	4082,7,c	;volatile
  5888                           
  5889                           ;main.c: 338:      if(RCIE && RCIF){
  5890  000030  BA9D               	btfsc	3997,5,c	;volatile
  5891  000032  AA9E               	btfss	3998,5,c	;volatile
  5892  000034  D00C               	goto	i1l3030
  5893                           
  5894                           ;main.c: 339:         _rx_buffer[_rx_buffer_head] = RCREG;
  5895  000036  0E40               	movlw	low __rx_buffer
  5896  000038  2469               	addwf	__rx_buffer_head,w,c	;volatile
  5897  00003A  6ED9               	movwf	fsr2l,c
  5898  00003C  6ADA               	clrf	fsr2h,c
  5899  00003E  0E01               	movlw	high __rx_buffer
  5900  000040  22DA               	addwfc	fsr2h,f,c
  5901  000042  CFAE FFDF          	movff	4014,indf2	;volatile
  5902                           
  5903                           ;main.c: 340:         _rx_buffer_head = (unsigned char)(_rx_buffer_head + 1) % 64;
  5904  000046  2869               	incf	__rx_buffer_head,w,c	;volatile
  5905  000048  0B3F               	andlw	63
  5906  00004A  6E69               	movwf	__rx_buffer_head,c	;volatile
  5907                           
  5908                           ;main.c: 341:         RCIF = 0;
  5909  00004C  9A9E               	bcf	3998,5,c	;volatile
  5910  00004E                     i1l3030:
  5911                           
  5912                           ;main.c: 343:     if(TXIE && TXIF){
  5913  00004E  B89D               	btfsc	3997,4,c	;volatile
  5914  000050  A89E               	btfss	3998,4,c	;volatile
  5915  000052  D013               	goto	i1l289
  5916                           
  5917                           ;main.c: 344:         if((_tx_buffer_tail != _tx_buffer_head)){
  5918  000054  5067               	movf	__tx_buffer_head,w,c	;volatile
  5919  000056  1866               	xorwf	__tx_buffer_tail,w,c	;volatile
  5920  000058  B4D8               	btfsc	status,2,c
  5921  00005A  D00D               	goto	i1l290
  5922                           
  5923                           ;main.c: 345:             TXREG = _tx_buffer[_tx_buffer_tail];
  5924  00005C  0E00               	movlw	low __tx_buffer
  5925  00005E  2466               	addwf	__tx_buffer_tail,w,c	;volatile
  5926  000060  6ED9               	movwf	fsr2l,c
  5927  000062  6ADA               	clrf	fsr2h,c
  5928  000064  0E01               	movlw	high __tx_buffer
  5929  000066  22DA               	addwfc	fsr2h,f,c
  5930  000068  50DF               	movf	indf2,w,c
  5931  00006A  6EAD               	movwf	4013,c	;volatile
  5932                           
  5933                           ;main.c: 346:             _tx_buffer_tail = (unsigned char)(_tx_buffer_tail + 1) % 64;
  5934  00006C  2866               	incf	__tx_buffer_tail,w,c	;volatile
  5935  00006E  0B3F               	andlw	63
  5936  000070  6E66               	movwf	__tx_buffer_tail,c	;volatile
  5937                           
  5938                           ;main.c: 347:             TXIF = 0;
  5939  000072  989E               	bcf	3998,4,c	;volatile
  5940                           
  5941                           ;main.c: 348:         }else{
  5942  000074  D002               	goto	i1l289
  5943  000076                     i1l290:
  5944                           
  5945                           ;main.c: 349:             TXIF = 0;
  5946  000076  989E               	bcf	3998,4,c	;volatile
  5947                           
  5948                           ;main.c: 350:             TXIE = 0;
  5949  000078  989D               	bcf	3997,4,c	;volatile
  5950  00007A                     i1l289:
  5951                           
  5952                           ;main.c: 354:     (INTCONbits.GIE = 1);
  5953  00007A  8EF2               	bsf	4082,7,c	;volatile
  5954  00007C  C005  FFDA         	movff	??_low_isr+4,fsr2h
  5955  000080  C004  FFD9         	movff	??_low_isr+3,fsr2l
  5956  000084  C003  FFE0         	movff	??_low_isr+2,bsr
  5957  000088  C002  FFE8         	movff	??_low_isr+1,wreg
  5958  00008C  C001  FFD8         	movff	??_low_isr,status
  5959  000090  9072               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5960  000092  0010               	retfie	
  5961  000094                     __end_of_low_isr:
  5962                           	opt callstack 0
  5963                           
  5964 ;; *************** function _high_isr *****************
  5965 ;; Defined at:
  5966 ;;		line 313 in file "main.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;		None
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;		None
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      void 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2, status,0
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;Total ram usage:        0 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; This function calls:
  5987 ;;		Nothing
  5988 ;; This function is called by:
  5989 ;;		Interrupt level 2
  5990 ;; This function uses a non-reentrant model
  5991 ;;
  5992                           
  5993                           	psect	intcode
  5994  000008                     __pintcode:
  5995                           	opt callstack 0
  5996  000008                     _high_isr:
  5997                           	opt callstack 21
  5998                           
  5999                           ;incstack = 0
  6000  000008  8272               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6001  00000A  ED50  F011         	call	int_func,f	;refresh shadow registers
  6002                           
  6003                           	psect	intcode_body
  6004  0022A0                     __pintcode_body:
  6005                           	opt callstack 21
  6006  0022A0                     int_func:
  6007                           	opt callstack 21
  6008  0022A0  0006               	pop		; remove dummy address from shadow register refresh
  6009                           
  6010                           ;main.c: 316:     if (INT0IE && INT0IF){
  6011  0022A2  B8F2               	btfsc	4082,4,c	;volatile
  6012  0022A4  A2F2               	btfss	4082,1,c	;volatile
  6013  0022A6  D011               	goto	i2l3012
  6014                           
  6015                           ;main.c: 317:         if(PORTDbits.RD0){
  6016  0022A8  A083               	btfss	3971,0,c	;volatile
  6017  0022AA  D006               	goto	i2l3008
  6018                           
  6019                           ;main.c: 318:             distanceL++;
  6020  0022AC  0E01               	movlw	1
  6021  0022AE  265A               	addwf	_distanceL,f,c	;volatile
  6022  0022B0  0E00               	movlw	0
  6023  0022B2  225B               	addwfc	_distanceL+1,f,c	;volatile
  6024  0022B4  225C               	addwfc	_distanceL+2,f,c	;volatile
  6025  0022B6  D007               	goto	L1
  6026  0022B8                     i2l3008:
  6027                           
  6028                           ;main.c: 320:             distanceL--;
  6029  0022B8  0EFF               	movlw	255
  6030  0022BA  265A               	addwf	_distanceL,f,c	;volatile
  6031  0022BC  0EFF               	movlw	255
  6032  0022BE  225B               	addwfc	_distanceL+1,f,c	;volatile
  6033  0022C0  0EFF               	movlw	255
  6034  0022C2  225C               	addwfc	_distanceL+2,f,c	;volatile
  6035  0022C4  0EFF               	movlw	255
  6036  0022C6                     L1:
  6037  0022C6  225D               	addwfc	_distanceL+3,f,c	;volatile
  6038                           
  6039                           ;main.c: 322:         INT0IF = 0;
  6040  0022C8  92F2               	bcf	4082,1,c	;volatile
  6041  0022CA                     i2l3012:
  6042                           
  6043                           ;main.c: 325:     if(INT1IF && INT1IE){
  6044  0022CA  B0F0               	btfsc	4080,0,c	;volatile
  6045  0022CC  A6F0               	btfss	4080,3,c	;volatile
  6046  0022CE  D004               	goto	i2l283
  6047                           
  6048                           ;main.c: 328:         key_was_pressed = 1;
  6049  0022D0  0E01               	movlw	1
  6050  0022D2  0100               	movlb	0	; () banked
  6051  0022D4  6FC8               	movwf	_key_was_pressed& (0+255),b	;volatile
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;main.c: 329:         INT1IF = 0;
  6055  0022D6  90F0               	bcf	4080,0,c	;volatile
  6056  0022D8                     i2l283:
  6057  0022D8  9272               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6058  0022DA  0011               	retfie		f
  6059  0022DC                     __end_of_high_isr:
  6060                           	opt callstack 0
  6061                           
  6062                           	psect	rparam
  6063  0000                     
  6064                           	psect	temp
  6065  000072                     btemp:
  6066                           	opt callstack 0
  6067  000072                     	ds	1
  6068  0000                     int$flags	set	btemp
  6069  0000                     wtemp8	set	btemp+1
  6070  0000                     ttemp5	set	btemp+1
  6071  0000                     ttemp6	set	btemp+4
  6072  0000                     ttemp7	set	btemp+8
  6073                           tosu	equ	0xFFF
  6074                           tosh	equ	0xFFE
  6075                           tosl	equ	0xFFD
  6076                           stkptr	equ	0xFFC
  6077                           pclatu	equ	0xFFB
  6078                           pclath	equ	0xFFA
  6079                           pcl	equ	0xFF9
  6080                           tblptru	equ	0xFF8
  6081                           tblptrh	equ	0xFF7
  6082                           tblptrl	equ	0xFF6
  6083                           tablat	equ	0xFF5
  6084                           prodh	equ	0xFF4
  6085                           prodl	equ	0xFF3
  6086                           indf0	equ	0xFEF
  6087                           postinc0	equ	0xFEE
  6088                           postdec0	equ	0xFED
  6089                           preinc0	equ	0xFEC
  6090                           plusw0	equ	0xFEB
  6091                           fsr0h	equ	0xFEA
  6092                           fsr0l	equ	0xFE9
  6093                           wreg	equ	0xFE8
  6094                           indf1	equ	0xFE7
  6095                           postinc1	equ	0xFE6
  6096                           postdec1	equ	0xFE5
  6097                           preinc1	equ	0xFE4
  6098                           plusw1	equ	0xFE3
  6099                           fsr1h	equ	0xFE2
  6100                           fsr1l	equ	0xFE1
  6101                           bsr	equ	0xFE0
  6102                           indf2	equ	0xFDF
  6103                           postinc2	equ	0xFDE
  6104                           postdec2	equ	0xFDD
  6105                           preinc2	equ	0xFDC
  6106                           plusw2	equ	0xFDB
  6107                           fsr2h	equ	0xFDA
  6108                           fsr2l	equ	0xFD9
  6109                           status	equ	0xFD8


Data Sizes:
    Strings     207
    Constant    23
    Data        8
    BSS         181
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     85     113
    BANK0           128     72     105
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_sprintf(COMRAM[2]), stoa@nuls(COMRAM[7]), dbuf(BANK0[32]), main@command(BANK0[25]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_sprintf(COMRAM[2]), stoa@nuls(COMRAM[7]), dbuf(BANK0[32]), main@command(BANK0[25]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_17(CODE[6]), STR_16(CODE[5]), STR_15(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK0[25]), main@lcdDisplay(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK0[25]), main@lcdDisplay(BANK0[16]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S1581_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK0[25]), main@lcdDisplay(BANK0[16]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK0[25]), main@lcdDisplay(BANK0[16]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_17(CODE[6]), STR_16(CODE[5]), STR_15(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_17(CODE[6]), STR_16(CODE[5]), STR_15(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 6
		 -> STR_17(CODE[6]), STR_16(CODE[5]), STR_15(CODE[5]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), main@command(BANK0[25]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), main@command(BANK0[25]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), stoa@nuls(COMRAM[7]), main@command(BANK0[25]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    UART_send_string@message	PTR unsigned char  size(2) Largest target is 25
		 -> main@uart_char_to_send(BANK0[25]), STR_1(CODE[15]), 

    LCD_write_str@str	PTR unsigned char  size(2) Largest target is 18
		 -> main@lcdDisplay(BANK0[16]), STR_12(CODE[15]), STR_11(CODE[16]), STR_10(CODE[16]), 
		 -> STR_9(CODE[17]), STR_8(CODE[18]), STR_7(CODE[16]), STR_6(CODE[16]), 
		 -> STR_5(CODE[17]), STR_4(CODE[18]), STR_3(CODE[16]), STR_2(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _stoa->_fputc
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _atoi->_isspace
    _initLCD->_lcdInst
    _UART_send_string->_UART_send_char
    _UART_Init->___aldiv
    _RTC_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _LCD_write_str->_send_byte
    _LCD_set_cursor->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e
    _I2C_Master_Init->___lldiv

Critical Paths under _low_isr in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _low_isr in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                78    78      0   18760
                                             80 COMRAM     5     5      0
                                              0 BANK0     72    72      0
                      _DCMotorAllOff
                    _DCMotorLeftBkwd
                     _DCMotorLeftFwd
             _DCMotorLeftRightBkwdON
              _DCMotorLeftRightFwdON
                   _DCMotorRightBkwd
                    _DCMotorRightFwd
                    _I2C_Master_Init
                     _LCD_set_cursor
                      _LCD_write_str
                           _RTC_Init
                          _UART_Init
                     _UART_available
                          _UART_read
                   _UART_send_string
                            _initLCD
                          _portSetup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             18    10      8   11443
                                             62 COMRAM    18    10      8
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   10478
                                             54 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           47    41      6   10103
                                             37 COMRAM    17    11      6
                               _atoi
                               _ctoa
                              _fputc
                            _isdigit
                               _stoa
 ---------------------------------------------------------------------------------
 (4) _stoa                                                22    18      4    2139
                                             14 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    3917
                                             32 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3697
                                             21 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               4     2      2     242
                                              5 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1691
                                             14 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                9     5      4    1290
                                              5 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _atoi                                                15    13      2    1396
                                             12 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              5 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     313
                                              5 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              5 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _portSetup                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              9 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _UART_send_string                                     6     4      2     308
                                              6 COMRAM     6     4      2
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (2) _UART_send_char                                       1     1      0      22
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_read                                            1     1      0      23
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_available                                       4     2      2       0
                                              5 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            8     8      0     475
                                             19 COMRAM     8     8      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     452
                                              5 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    1162
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2    1162
                                              6 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_write_str                                        6     4      2    1363
                                              8 COMRAM     6     4      2
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _LCD_set_cursor                                       4     0      4    2680
                                              9 COMRAM     4     0      4
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     111
                                              8 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _send_byte                                            1     1      0      89
                                              7 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (2) _send_nibble                                          1     1      0      45
                                              6 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (3) _pulse_e                                              1     1      0      23
                                              5 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             18 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              5 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _DCMotorLeftRightFwdON                                0     0      0       0
                     _DCMotorLeftFwd
                    _DCMotorRightFwd
 ---------------------------------------------------------------------------------
 (1) _DCMotorRightFwd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DCMotorLeftFwd                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCMotorLeftRightBkwdON                               0     0      0       0
                    _DCMotorLeftBkwd
                   _DCMotorRightBkwd
 ---------------------------------------------------------------------------------
 (1) _DCMotorRightBkwd                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DCMotorLeftBkwd                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DCMotorAllOff                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _low_isr                                              5     5      0       0
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _high_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCMotorAllOff
   _DCMotorLeftBkwd
   _DCMotorLeftFwd
   _DCMotorLeftRightBkwdON
     _DCMotorLeftBkwd
     _DCMotorRightBkwd
   _DCMotorLeftRightFwdON
     _DCMotorLeftFwd
     _DCMotorRightFwd
   _DCMotorRightBkwd
   _DCMotorRightFwd
   _I2C_Master_Init
     ___lldiv
   _LCD_set_cursor
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
   _LCD_write_str
     _send_byte
       _send_nibble
         _pulse_e
   _RTC_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _UART_Init
     ___aldiv
   _UART_available
   _UART_read
   _UART_send_string
     _UART_send_char
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _portSetup
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _ctoa
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch
         _isdigit
         _stoa
           _fputc
             _putch
           _strlen

 _low_isr (ROOT)

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     48      69       5       82.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     55      71       1       89.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15A      34        0.0%
DATA                 0      0     15A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Feb 25 23:15:10 2019

        UART_send_string@message 0007                               l95 1C2C  
                             l88 21E8                               l89 21FA  
                    __CFG_CPD$ON 000000                               bsr 000FE0  
            ___wmul@multiplicand 0008                      __CFG_BORV$3 000000  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                   __CFG_CP2$OFF 000000                     __CFG_CP3$OFF 000000  
                    __CFG_OSC$HS 000000                              l231 11C0  
                            l413 1E46                              l261 1534  
                            l511 1FB0                              l434 1A94  
                   __CFG_CPB$OFF 000000                              u940 1D88  
                            u960 1DD0                              u995 23C2  
                            u996 23C4                              _pad 1E18  
                            wreg 000FE8                     __CFG_LVP$OFF 000000  
                    main@command 0099                     __CFG_WDT$OFF 000000  
                           l2310 2298                             l1183 1A24  
                           l2402 19C4                             l2234 1D90  
                           l2322 218C                             l2244 22E6  
                           l2252 237C                             l2324 2198  
                           l2340 1A58                             l2500 18BA  
                           l2254 2380                             l2350 1AAA  
                           l2600 1BEC                             l2248 22FC  
                           l2280 1E50                             l2440 1640  
                           l2274 1E30                             l2354 1AC2  
                           l2442 164E                             l2604 1BFA  
                           l2284 1E68                             l2372 1B38  
                           l2364 1B06                             l2460 1734  
                           l2278 1E3E                             l2358 1AE0  
                           l2462 1742                             l2438 1622  
                           l2542 20EC                             l2552 1F62  
                           l2608 1C10                             l2392 195A  
                           l2376 1900                             l2288 1E94  
                           l2368 1B20                             l2544 2110  
                           l2554 1F6E                             l2394 1962  
                           l2386 194A                             l2378 1904  
                           l2490 1898                             l2458 1716  
                           l2564 1FA2                             l2396 1968  
                           l2484 185C                             l2476 17EE  
                           l2590 1BB8                             l2582 1B8A  
                           l2734 1CD8                             l2742 1D42  
                           l2398 1990                             l2494 18A2  
                           l2664 220C                             l2672 1C64  
                           l2576 1B72                             l2920 1390  
                           l2914 136E                             l2906 1322  
                           l2842 1178                             l2588 1BAC  
                           l2756 23F8                             l2940 1440  
                           l2932 13D6                             l2908 134C  
                           l2852 11CC                             l2836 1150  
                           l2934 13FA                             l2870 123E  
                           l2862 1212                             ?_pad 0016  
                           l2960 14EE                             l2952 14B4  
                           l2928 13B2                             l2880 128E  
                           l2864 1218                             l2946 147A  
                           l2938 1432                             l2874 125E  
                           l2858 11F2                             l2892 12DA  
                           l2964 1518                             l2886 12B4  
                           l2878 1264                             l2898 1300  
                           STR_1 10BE                             STR_2 105E  
                           STR_3 106E                             STR_4 1018  
                           STR_5 103C                             STR_6 107E  
                           STR_7 108E                             STR_8 102A  
                           STR_9 104D                             u1040 233C  
                           u1050 233E                             u1210 19F4  
                           u1220 19F6                             u1140 1AD6  
                           u1300 1686                             u1070 2294  
                           u1310 1688                             u1320 1694  
                           u1170 1B4C                             u1091 1A38  
                           _LATA 000F89                             u1430 1F72  
                           u1190 1946                             u1350 177A  
                           _LATB 000F8A                             _LATC 000F8B  
                           u1360 177C                             _LATD 000F8C  
                           _LATE 000F8D                             u1370 1788  
                           u1515 2054                             u1620 1D06  
                           u1710 1188                             u1615 1EF0  
                           u1560 1C5C                             u1480 1BBC  
                           u1640 1D3A                             u1570 1C92  
                           u1650 1D70                             u1627 1CFC  
                           u1590 1CC6                             u1567 1C52  
                           u1647 1D30                             u1577 1C88  
                           u1657 1D66                             u1907 1F26  
                           u1917 23AA                             u1597 1CBC  
                           u1927 23B4                             u1857 1136  
                           u1867 1FC8                             u1877 1FE0  
                           u1887 1FF2                             u1897 2014  
                           _RCIE 007CED                             _RCIF 007CF5  
                           _TXIE 007CEC                             _TXIF 007CF4  
                           _dbuf 00C9                             _atoi 18EE  
                           _ctoa 217A                             _main 10E8  
                           _keys 1001                             _prec 0062  
                           _nout 005E                             pad@i 001D  
                           pad@p 001A                             fsr1h 000FE2  
                           fsr2h 000FDA                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           pad@w 001F                             fsr2l 000FD9  
                           _stoa 1A2E                             btemp 0072  
                           prodh 000FF4                             prodl 000FF3  
                           start 0094                    __CFG_IESO$OFF 000000  
                  __CFG_MCLRE$ON 000000                     ___param_bank 000000  
      __size_of_UART_send_string 00AA                            ??_pad 001C  
               ?_I2C_Master_Init 0013                 ?_I2C_Master_Wait 0001  
               ?_I2C_Master_Stop 0001                  __end_of___aldiv 1C22  
                          ?_atoi 000D                            ?_ctoa 0021  
                          ?_main 0001                            STR_10 109E  
                          STR_11 10AE                            STR_12 10CD  
                          STR_13 10E2                            STR_14 10E2  
                          STR_15 10E2                            STR_16 10E2  
                          STR_17 10DC                            ?_stoa 000F  
                __end_of___lldiv 1FC2                            i1l290 0076  
                          i1l289 007A                            i2l283 22D8  
                          _RCREG 000FAE                     vfpfcnvrt@fmt 0028  
                          _SPBRG 000FAF                            _PORTB 000F81  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TXREG 000FAD                    __CFG_PWRT$OFF 000000  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                  __CFG_WRT2$OFF 000000                    __CFG_WRT3$OFF 000000  
                __end_of_lcdInst 2494                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                     main@keypress 00C4  
                 __CFG_EBTR3$OFF 000000               __size_of_UART_Init 0092  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                  __end_of_initLCD 202C  
                 __CFG_EBTRB$OFF 000000               __size_of_UART_read 0026  
                          _flags 0064                  ??_DCMotorAllOff 0006  
                          _fputc 1D78                            _fputs 22DC  
         __size_of_LCD_write_str 00AC                  __end_of_isdigit 2344  
                          atoi@n 001A                 __end_of_RTC_Init 2372  
                          pad@fp 0016                            atoi@s 000D  
                          _width 0060                            ctoa@c 0023  
                          _putch 24F4                            ctoa@w 0024  
                __end_of_isspace 22A0                  __end_of_low_isr 0094  
                          tablat 000FF5                  send_nibble@data 0007  
                          plusw1 000FE3                            plusw2 000FDB  
                          stoa@i 001B                            stoa@l 0023  
                          stoa@p 0021                            stoa@s 0011  
                          stoa@w 001D                  __end_of_pulse_e 23C6  
                          ttemp5 0073                            ttemp6 0076  
                          ttemp7 007A                            status 000FD8  
                          wtemp8 0073                  __end_of_sprintf 217A  
                 __CFG_PBADEN$ON 000000          __size_of_LCD_set_cursor 004E  
                __initialization 2088                     __end_of_atoi 1A2E  
                   __end_of_ctoa 21C8                     __end_of_main 1586  
                   __end_of_keys 1012                     __end_of_stoa 1B56  
                         ??_atoi 000F                           ??_ctoa 0024  
                         ??_main 0051                           ??_stoa 0013  
                  __activetblptr 000002                ?_I2C_Master_Start 0001  
              ?_I2C_Master_Write 0007               ??_I2C_Master_Start 0007  
                         _ADCON0 000FC2                           _ADCON1 000FC1  
             ??_I2C_Master_Write 0009                           _ADCON2 000FC0  
                   ?_send_nibble 0001                           ?_fputc 0006  
                         ?_fputs 000F          ??_DCMotorLeftRightFwdON 0006  
                         ?_putch 0001                           _INT0IE 007F94  
                         _INT0IF 007F91                           _INT1IE 007F83  
                         _INT1IF 007F80                           _CVRCON 000FB5  
                         i1l3030 004E                           i2l3012 22CA  
                         i2l3008 22B8                           _SSPADD 000FC8  
                         _SSPBUF 000FC9                   __CFG_XINST$OFF 000000  
                   vfprintf@cfmt 003D                __end_of_UART_Init 1F40  
               __end_of_high_isr 22DC        __size_of_DCMotorRightBkwd 0008  
                      ??___aldiv 000E                    _LCD_write_str 1C22  
                         ___wmul 23C6                __end_of_UART_read 2412  
                 __CFG_STVREN$ON 000000                        ??___lldiv 000E  
                         clear_0 20AE                           clear_1 20BA  
                         clear_2 20C6                        ??_lcdInst 0009  
                         pad@buf 0018                           ctoa@fp 0021  
               ??_DCMotorLeftFwd 0006                           _strlen 2372  
                      ??_initLCD 000A                           fputc@c 0006  
                         fputs@c 0013                           fputs@i 0014  
                   __pdataCOMRAM 006A                           fputs@s 000F  
                      ??_isdigit 0008                     __mediumconst 0000  
                      ??_isspace 0008                        ??_low_isr 0001  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                           stoa@cp 001F  
                         stoa@fp 000F                           putch@c 0001  
               __end_of_vfprintf 212C                        ??_pulse_e 0006  
                      ??_sprintf 0047            pulse_e@interruptState 0006  
                     __accesstop 0080          __end_of__initialization 20CC  
                  ___rparam_used 000001                   __pcstackCOMRAM 0001  
                 ?_LCD_write_str 0009                 _UART_send_string 1CCE  
                  __end_of_fputc 1E18                    __end_of_fputs 2314  
                  __end_of_putch 24F6                        ?_RTC_Init 0001  
                _key_was_pressed 00C8         __size_of_DCMotorLeftBkwd 0008  
                 main@lcdDisplay 00B2         __size_of_DCMotorRightFwd 0008  
                        ??_fputc 000A                          ??_fputs 0013  
                        ??_putch 0006                       __pbssBANK0 00C8  
                     __pbssBANK1 0100          __size_of_UART_available 0020  
                 _LCD_set_cursor 21C8                          ?___wmul 0006  
                UART_send_char@c 0006               __size_of_send_byte 0012  
                     ??_RTC_Init 0009         ??_DCMotorLeftRightBkwdON 0006  
                        ?_strlen 0006                       __rx_buffer 0140  
                        _INTEDG0 007F8E                          _INTEDG1 007F8D  
                 LCD_write_str@i 000D               __size_of_portSetup 004C  
             __size_of_vfpfcnvrt 0368                       __tx_buffer 0100  
        __size_of_UART_send_char 001C                          _SSPCON1 000FC6  
                        _SSPCON2 000FC5                        ?_high_isr 0001  
                        _SSPSTAT 000FC7             __size_of_send_nibble 0016  
         __end_of_LCD_set_cursor 2216                  ??_LCD_write_str 000B  
                        __Hparam 0000                          __Lparam 0000  
               _DCMotorRightBkwd 24E4                          ___aldiv 1B56  
                        ___lldiv 1F40                  __size_of___wmul 0026  
                      ?_vfprintf 0037                        _CMCONbits 000FB4  
                   __psmallconst 1000                          __pcinit 2088  
                        __ramtop 1000                          _lcdInst 2488  
                        __ptext0 10E8                          __ptext1 212C  
                        __ptext2 20DA                          __ptext3 1586  
                        __ptext4 1A2E                          __ptext5 217A  
                        __ptext6 1E18                          __ptext7 2372  
                        __ptext8 22DC                          __ptext9 1D78  
              UART_send_string@i 000B                  __size_of_strlen 002A  
                        _initLCD 1FC2                     __size_of_pad 0096  
                        _isdigit 2314                 ___aldiv@dividend 0006  
                        _isspace 2262                          _low_isr 0018  
       __size_of_I2C_Master_Init 005C         __size_of_I2C_Master_Wait 0012  
       __size_of_I2C_Master_Stop 0008                          atoi@neg 0013  
                        _pulse_e 239C                ??_DCMotorLeftBkwd 0006  
                        _sprintf 212C                       ??_high_isr 0001  
                 __pintcode_body 22A0             end_of_initialization 20CC  
          __end_of_DCMotorAllOff 24BC            __end_of_LCD_SIZE_HORZ 1018  
              __end_of_send_byte 2488            __end_of_LCD_SIZE_VERT 1017  
 __size_of_DCMotorLeftRightFwdON 000A    __end_of_DCMotorLeftRightFwdON 24A8  
                        fputc@fp 0008                 LCD_write_str@str 0009  
                  __Lmediumconst 0000                          int_func 22A0  
                        fputs@fp 0011                  ?_LCD_set_cursor 000A  
              ??_DCMotorRightFwd 0006        __size_of_I2C_Master_Start 0008  
      __size_of_I2C_Master_Write 000A                  ___lldiv@divisor 000A  
                ___lldiv@counter 0012                __end_of_portSetup 2262  
              __end_of_vfpfcnvrt 18EE                        _RCSTAbits 000FAB  
               ___aldiv@quotient 0010                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
                     ??_vfprintf 003D                          strlen@a 0008  
                        strlen@s 0006                        _UART_Init 1EAE  
                __rx_buffer_head 0069                        _UART_read 23EC  
__size_of_DCMotorLeftRightBkwdON 000A                        _PORTDbits 000F83  
                __rx_buffer_tail 0068                        _TRISCbits 000F94  
       __end_of_UART_send_string 1D78                   _UART_available 2412  
                      _TXSTAbits 000FAC                    send_byte@data 0008  
                    vfpfcnvrt@ap 002A                      vfpfcnvrt@cp 0030  
                    vfpfcnvrt@fp 0026                   __end_of___wmul 23EC  
                     ?_UART_Init 0001                    __pidataCOMRAM 24BC  
                     ?_UART_read 0001                __size_of_RTC_Init 002E  
                 __end_of_strlen 239C              start_initialization 2088  
                 _UART_send_char 2432                      __end_of_pad 1EAE  
         __end_of_UART_available 2432                LCD_set_cursor@row 000A  
         _DCMotorLeftRightBkwdON 24A8                ??_I2C_Master_Init 0017  
              ??_I2C_Master_Wait 0006                ??_I2C_Master_Stop 0007  
                    vfprintf@fmt 0039                         ??___wmul 000A  
           LCD_set_cursor@column 000C         I2C_Master_Init@clockFreq 0013  
               __CFG_LPT1OSC$OFF 000000                         ??_strlen 0008  
         __end_of_UART_send_char 244E                      __pbssCOMRAM 0056  
                  __pcstackBANK0 0080         __end_of_DCMotorRightBkwd 24EC  
                ?_UART_available 0006          __size_of_DCMotorLeftFwd 0008  
              __size_of_high_isr 22D4                        _atoi$1560 0019  
                      _atoi$1561 0017                        _atoi$1559 0015  
               _I2C_Master_Start 24CC                 _I2C_Master_Write 2494  
              __CFG_CCP2MX$PORTC 000000                        __pintcode 0008  
                       ?___aldiv 0006                         ?___lldiv 0006  
                      _direction 0071                      __pintcodelo 0018  
                    ??_UART_Init 0014                  _DCMotorLeftBkwd 24EC  
            main@commandReceived 00C5                         ?_lcdInst 0001  
                    ??_UART_read 0006                        _distanceL 005A  
                      _distanceR 0056                __size_of_vfprintf 0052  
                       ?_initLCD 0001                      __smallconst 1000  
                ?_UART_send_char 0001                         ?_isdigit 0006  
                       ?_isspace 0006                         ?_low_isr 0001  
                _DCMotorRightFwd 24D4            main@uart_char_to_send 0080  
                  ??_send_nibble 0007                         ?_pulse_e 0001  
               ??_LCD_set_cursor 000E                         ?_sprintf 003F  
                 __size_of_fputc 00A0                   __size_of_fputs 0038  
                 __size_of_putch 0002                  ___aldiv@divisor 000A  
                ___aldiv@counter 000E                   ___wmul@product 000A  
                       _LATAbits 000F89                         _LATDbits 000F8C  
                       _IPR1bits 000F9F                         _PIE1bits 000F9D  
                     UART_read@c 0006                        _send_byte 2476  
                 _LCD_LINE1_ADDR 1015                   _LCD_LINE2_ADDR 1014  
                 _LCD_LINE3_ADDR 1013                   _LCD_LINE4_ADDR 1012  
          __end_of_LCD_write_str 1CCE                         _RCONbits 000FD0  
               __CFG_WDTPS$32768 000000                UART_Init@baudRate 0018  
                      _portSetup 2216                        _vfpfcnvrt 1586  
                       _RTC_Init 2344                       _ADCON2bits 000FC0  
              ___wmul@multiplier 0006                  __tx_buffer_head 0067  
                __tx_buffer_tail 0066                        main@index 00C6  
                   _isspace$1577 000C                       vfpfcnvrt@c 0036  
                      copy_data0 209C                ?_UART_send_string 0007  
         __end_of_LCD_LINE1_ADDR 1016               ??_UART_send_string 0009  
         __end_of_LCD_LINE2_ADDR 1015           __end_of_LCD_LINE3_ADDR 1014  
         __end_of_LCD_LINE4_ADDR 1013              __end_of_send_nibble 2464  
          _DCMotorLeftRightFwdON 249E                       ?_send_byte 0001  
                       __Hrparam 0000          __end_of_DCMotorLeftBkwd 24F4  
                     vfprintf@ap 003B                         __Lrparam 0000  
                     vfprintf@fp 0037               __CFG_BOREN$SBORDIS 000000  
               __size_of___aldiv 00CC                       ?_portSetup 0001  
               __size_of___lldiv 0082                       ?_vfpfcnvrt 0026  
         __size_of_DCMotorAllOff 000A          __end_of_DCMotorRightFwd 24DC  
               __size_of_lcdInst 000C                       sprintf@fmt 0041  
                _I2C_Master_Init 202C                 __size_of_initLCD 006A  
                _I2C_Master_Wait 2464                  _I2C_Master_Stop 24C4  
               __size_of_isdigit 0030                 __size_of_isspace 003E  
               __size_of_low_isr 007C                         __ptext10 24F4  
                       __ptext11 18EE                         __ptext20 2412  
                       __ptext12 2262                         __ptext21 1EAE  
                       __ptext13 2314                         __ptext30 2488  
                       __ptext22 1B56                         __ptext14 23C6  
                       __ptext31 2476                         __ptext23 2344  
                       __ptext15 2216                         __ptext40 24E4  
                       __ptext32 244E                         __ptext24 2494  
                       __ptext16 1FC2                         __ptext41 24EC  
                       __ptext33 239C                         __ptext25 24C4  
                       __ptext17 1CCE                         __ptext42 24B2  
                       __ptext34 202C                         __ptext26 24CC  
                       __ptext18 2432                         __ptext35 1F40  
                       __ptext27 2464                         __ptext19 23EC  
                       __ptext36 249E                         __ptext28 1C22  
                       __ptext37 24D4                         __ptext29 21C8  
                       __ptext38 24DC                         __ptext39 24A8  
        ?_DCMotorLeftRightBkwdON 0001                   _DCMotorLeftFwd 24DC  
                       _high_isr 0008                 __size_of_pulse_e 002A  
               __size_of_sprintf 004E                    __size_of_atoi 0140  
                  __size_of_ctoa 004E                    __size_of_main 049E  
                  __size_of_stoa 0128                        stoa@F1136 006A  
                       int$flags 0072                         _vfprintf 20DA  
    I2C_Master_Write@byteToWrite 0007                   _vfpfcnvrt$1102 0032  
                 _vfpfcnvrt$1103 0034         __end_of_I2C_Master_Start 24D4  
       __end_of_I2C_Master_Write 249E                       _INTCONbits 000FF2  
               ??_UART_available 0008   __end_of_DCMotorLeftRightBkwdON 24B2  
         __end_of_DCMotorLeftFwd 24E4                         isdigit@c 0006  
              ?_DCMotorRightBkwd 0001                      _send_nibble 244E  
                       intlevel1 0000                         intlevel2 0000  
                      sprintf@ap 0049               ??_DCMotorRightBkwd 0006  
                  _DCMotorAllOff 24B2                    _LCD_SIZE_HORZ 1017  
                  _LCD_SIZE_VERT 1016                         isspace@c 0006  
               ___lldiv@dividend 0006           ?_DCMotorLeftRightFwdON 0001  
                    ??_send_byte 0008                 ?_DCMotorLeftBkwd 0001  
               ??_UART_send_char 0006                      ??_portSetup 0006  
        __end_of_I2C_Master_Init 2088          __end_of_I2C_Master_Wait 2476  
        __end_of_I2C_Master_Stop 24CC                      ??_vfpfcnvrt 002C  
                    lcdInst@data 0009                         stoa@nuls 0014  
               ?_DCMotorRightFwd 0001                         sprintf@f 004B  
                       sprintf@s 003F                 ___lldiv@quotient 000E  
                   ___aldiv@sign 000F                  ?_DCMotorLeftFwd 0001  
                    _SSPCON1bits 000FC6                      _SSPCON2bits 000FC5  
                 ?_DCMotorAllOff 0001  
