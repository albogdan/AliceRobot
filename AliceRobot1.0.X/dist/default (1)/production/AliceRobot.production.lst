

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Feb 05 13:36:15 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=2
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=2
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,inline
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1,inline
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4620 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	idataBANK1
    96  001FE0                     __pidataBANK1:
    97                           	opt callstack 0
    98                           
    99                           ;initializer for _runningOperation
   100  001FE0  78                 	db	low STR_11
   101  001FE1  10                 	db	high STR_11
   102  001FE2  45                 	db	low STR_12
   103  001FE3  10                 	db	high STR_12
   104  001FE4  50                 	db	low STR_13
   105  001FE5  10                 	db	high STR_13
   106  001FE6  38                 	db	low STR_14
   107  001FE7  10                 	db	high STR_14
   108  001FE8  AB                 	db	low (STR_21+1)
   109  001FE9  10                 	db	high (STR_21+1)
   110  001FEA  00                 	db	0
   111  001FEB  00                 	db	0
   112  001FEC  00                 	db	0
   113  001FED  00                 	db	0
   114  001FEE  00                 	db	0
   115  001FEF  00                 	db	0
   116  001FF0  00                 	db	0
   117  001FF1  00                 	db	0
   118  001FF2  00                 	db	0
   119  001FF3  00                 	db	0
   120  001FF4  00                 	db	0
   121  001FF5  00                 	db	0
   122  001FF6  00                 	db	0
   123  001FF7  00                 	db	0
   124  001FF8  00                 	db	0
   125  001FF9  00                 	db	0
   126  001FFA  00                 	db	0
   127  001FFB  00                 	db	0
   128  001FFC  00                 	db	0
   129  001FFD  00                 	db	0
   130  001FFE  00                 	db	0
   131  001FFF  00                 	db	0
   132  002000  00                 	db	0
   133  002001  00                 	db	0
   134  002002  00                 	db	0
   135  002003  00                 	db	0
   136  002004  00                 	db	0
   137  002005  00                 	db	0
   138  002006  00                 	db	0
   139  002007  00                 	db	0
   140  002008  00                 	db	0
   141  002009  00                 	db	0
   142  00200A  00                 	db	0
   143  00200B  00                 	db	0
   144  00200C  00                 	db	0
   145  00200D  00                 	db	0
   146  00200E  00                 	db	0
   147  00200F  00                 	db	0
   148                           
   149                           ;initializer for _logList
   150  002010  80                 	db	low STR_6
   151  002011  10                 	db	high STR_6
   152  002012  88                 	db	low STR_7
   153  002013  10                 	db	high STR_7
   154  002014  8E                 	db	low STR_8
   155  002015  10                 	db	high STR_8
   156  002016  94                 	db	low STR_9
   157  002017  10                 	db	high STR_9
   158  002018  9A                 	db	low STR_10
   159  002019  10                 	db	high STR_10
   160  00201A  00                 	db	0
   161  00201B  00                 	db	0
   162  00201C  00                 	db	0
   163  00201D  00                 	db	0
   164  00201E  00                 	db	0
   165  00201F  00                 	db	0
   166  002020  00                 	db	0
   167  002021  00                 	db	0
   168  002022  00                 	db	0
   169  002023  00                 	db	0
   170  002024  00                 	db	0
   171  002025  00                 	db	0
   172  002026  00                 	db	0
   173  002027  00                 	db	0
   174  002028  00                 	db	0
   175  002029  00                 	db	0
   176  00202A  00                 	db	0
   177  00202B  00                 	db	0
   178  00202C  00                 	db	0
   179  00202D  00                 	db	0
   180  00202E  00                 	db	0
   181  00202F  00                 	db	0
   182  002030  00                 	db	0
   183  002031  00                 	db	0
   184  002032  0000               	dw	0
   185  002034  0000               	dw	0
   186  002036  0003               	dw	3
   187  002038  70                 	db	low _moveCursorUp
   188  002039  20                 	db	high _moveCursorUp
   189  00203A  F6                 	db	low _moveCursorDown
   190  00203B  20                 	db	high _moveCursorDown
   191  00203C  EA                 	db	low _enterKey
   192  00203D  1D                 	db	high _enterKey
   193  00203E  F6                 	db	low _backKey
   194  00203F  25                 	db	high _backKey
   195                           
   196                           ;initializer for _homeScreen
   197  002040  A0                 	db	low STR_1
   198  002041  10                 	db	high STR_1
   199  002042  40                 	db	low (STR_14+8)
   200  002043  10                 	db	high (STR_14+8)
   201  002044  A5                 	db	low STR_3
   202  002045  10                 	db	high STR_3
   203  002046  5B                 	db	low STR_4
   204  002047  10                 	db	high STR_4
   205  002048  65                 	db	low STR_5
   206  002049  10                 	db	high STR_5
   207  00204A  00                 	db	0
   208  00204B  00                 	db	0
   209  00204C  00                 	db	0
   210  00204D  00                 	db	0
   211  00204E  00                 	db	0
   212  00204F  00                 	db	0
   213  002050  00                 	db	0
   214  002051  00                 	db	0
   215  002052  00                 	db	0
   216  002053  00                 	db	0
   217  002054  00                 	db	0
   218  002055  00                 	db	0
   219  002056  00                 	db	0
   220  002057  00                 	db	0
   221  002058  00                 	db	0
   222  002059  00                 	db	0
   223  00205A  00                 	db	0
   224  00205B  00                 	db	0
   225  00205C  00                 	db	0
   226  00205D  00                 	db	0
   227  00205E  00                 	db	0
   228  00205F  00                 	db	0
   229  002060  00                 	db	0
   230  002061  00                 	db	0
   231  002062  0002               	dw	2
   232  002064  0002               	dw	2
   233  002066  0003               	dw	3
   234  002068  70                 	db	low _moveCursorUp
   235  002069  20                 	db	high _moveCursorUp
   236  00206A  F6                 	db	low _moveCursorDown
   237  00206B  20                 	db	high _moveCursorDown
   238  00206C  EA                 	db	low _enterKey
   239  00206D  1D                 	db	high _enterKey
   240  00206E  F6                 	db	low _backKey
   241  00206F  25                 	db	high _backKey
   242                           
   243                           	psect	smallconst
   244  001000                     __psmallconst:
   245                           	opt callstack 0
   246  001000  00                 	db	0
   247  001001                     _keys:
   248                           	opt callstack 0
   249  001001  31                 	db	49
   250  001002  32                 	db	50
   251  001003  33                 	db	51
   252  001004  41                 	db	65
   253  001005  34                 	db	52
   254  001006  35                 	db	53
   255  001007  36                 	db	54
   256  001008  42                 	db	66
   257  001009  37                 	db	55
   258  00100A  38                 	db	56
   259  00100B  39                 	db	57
   260  00100C  43                 	db	67
   261  00100D  2A                 	db	42
   262  00100E  30                 	db	48
   263  00100F  23                 	db	35
   264  001010  44                 	db	68
   265  001011  00                 	db	0
   266  001012                     __end_of_keys:
   267                           	opt callstack 0
   268  001012  50                 	db	80
   269  001013                     __end_of_LCD_LINE4_ADDR:
   270                           	opt callstack 0
   271  001013  10                 	db	16
   272  001014                     __end_of_LCD_LINE3_ADDR:
   273                           	opt callstack 0
   274  001014  40                 	db	64
   275  001015                     __end_of_LCD_LINE2_ADDR:
   276                           	opt callstack 0
   277  001015                     _LCD_LINE1_ADDR:
   278                           	opt callstack 0
   279  001015  00                 	db	0
   280  001016                     __end_of_LCD_LINE1_ADDR:
   281                           	opt callstack 0
   282  001016                     _LCD_SIZE_VERT:
   283                           	opt callstack 0
   284  001016  04                 	db	4
   285  001017                     __end_of_LCD_SIZE_VERT:
   286                           	opt callstack 0
   287  001017                     _LCD_SIZE_HORZ:
   288                           	opt callstack 0
   289  001017  10                 	db	16
   290  001018                     __end_of_LCD_SIZE_HORZ:
   291                           	opt callstack 0
   292  0000                     _PORTB	set	3969
   293  0000                     _ADCON1	set	4033
   294  0000                     _TRISBbits	set	3987
   295  0000                     _TRISD	set	3989
   296  0000                     _TRISC	set	3988
   297  0000                     _SSPBUF	set	4041
   298  0000                     _SSPCON2bits	set	4037
   299  0000                     _SSPCON1	set	4038
   300  0000                     _SSPADD	set	4040
   301  0000                     _TRISCbits	set	3988
   302  0000                     _SSPCON1bits	set	4038
   303  0000                     _SSPCON2	set	4037
   304  0000                     _SSPSTAT	set	4039
   305  0000                     _LATD	set	3980
   306  0000                     _LATDbits	set	3980
   307  0000                     _INTCONbits	set	4082
   308  0000                     _INT1IF	set	32640
   309  0000                     _INT1IE	set	32643
   310  001018                     STR_26:
   311  001018  25                 	db	37
   312  001019  30                 	db	48	;'0'
   313  00101A  32                 	db	50	;'2'
   314  00101B  78                 	db	120	;'x'
   315  00101C  2F                 	db	47
   316  00101D  25                 	db	37
   317  00101E  30                 	db	48	;'0'
   318  00101F  32                 	db	50	;'2'
   319  001020  78                 	db	120	;'x'
   320  001021  2F                 	db	47
   321  001022  32                 	db	50	;'2'
   322  001023  30                 	db	48	;'0'
   323  001024  25                 	db	37
   324  001025  30                 	db	48	;'0'
   325  001026  32                 	db	50	;'2'
   326  001027  78                 	db	120	;'x'
   327  001028  00                 	db	0
   328  001029                     STR_18:
   329  001029  25                 	db	37
   330  00102A  30                 	db	48	;'0'
   331  00102B  32                 	db	50	;'2'
   332  00102C  78                 	db	120	;'x'
   333  00102D  3A                 	db	58	;':'
   334  00102E  25                 	db	37
   335  00102F  30                 	db	48	;'0'
   336  001030  32                 	db	50	;'2'
   337  001031  78                 	db	120	;'x'
   338  001032  3A                 	db	58	;':'
   339  001033  25                 	db	37
   340  001034  30                 	db	48	;'0'
   341  001035  32                 	db	50	;'2'
   342  001036  78                 	db	120	;'x'
   343  001037  00                 	db	0
   344  001038                     STR_14:
   345  001038  43                 	db	67	;'C'
   346  001039  55                 	db	85	;'U'
   347  00103A  52                 	db	82	;'R'
   348  00103B  52                 	db	82	;'R'
   349  00103C  45                 	db	69	;'E'
   350  00103D  4E                 	db	78	;'N'
   351  00103E  54                 	db	84	;'T'
   352  00103F  5F                 	db	95	;'_'
   353  001040  54                 	db	84	;'T'
   354  001041  49                 	db	73	;'I'
   355  001042  4D                 	db	77	;'M'
   356  001043  45                 	db	69	;'E'
   357  001044  00                 	db	0
   358  001045                     STR_12:
   359  001045  52                 	db	82	;'R'
   360  001046  75                 	db	117	;'u'
   361  001047  6E                 	db	110	;'n'
   362  001048  6E                 	db	110	;'n'
   363  001049  69                 	db	105	;'i'
   364  00104A  6E                 	db	110	;'n'
   365  00104B  67                 	db	103	;'g'
   366  00104C  2E                 	db	46
   367  00104D  2E                 	db	46
   368  00104E  2E                 	db	46
   369  00104F  00                 	db	0
   370  001050                     STR_13:
   371  001050  53                 	db	83	;'S'
   372  001051  54                 	db	84	;'T'
   373  001052  41                 	db	65	;'A'
   374  001053  52                 	db	82	;'R'
   375  001054  54                 	db	84	;'T'
   376  001055  5F                 	db	95	;'_'
   377  001056  54                 	db	84	;'T'
   378  001057  49                 	db	73	;'I'
   379  001058  4D                 	db	77	;'M'
   380  001059  45                 	db	69	;'E'
   381  00105A  00                 	db	0
   382  00105B                     STR_4:
   383  00105B  53                 	db	83	;'S'
   384  00105C  74                 	db	116	;'t'
   385  00105D  61                 	db	97	;'a'
   386  00105E  72                 	db	114	;'r'
   387  00105F  74                 	db	116	;'t'
   388  001060  20                 	db	32
   389  001061  52                 	db	82	;'R'
   390  001062  75                 	db	117	;'u'
   391  001063  6E                 	db	110	;'n'
   392  001064  00                 	db	0
   393  001065                     STR_5:
   394  001065  56                 	db	86	;'V'
   395  001066  69                 	db	105	;'i'
   396  001067  65                 	db	101	;'e'
   397  001068  77                 	db	119	;'w'
   398  001069  20                 	db	32
   399  00106A  4C                 	db	76	;'L'
   400  00106B  6F                 	db	111	;'o'
   401  00106C  67                 	db	103	;'g'
   402  00106D  73                 	db	115	;'s'
   403  00106E  00                 	db	0
   404  00106F                     STR_17:
   405  00106F  49                 	db	73	;'I'
   406  001070  4E                 	db	78	;'N'
   407  001071  47                 	db	71	;'G'
   408  001072  20                 	db	32
   409  001073  48                 	db	72	;'H'
   410  001074  45                 	db	69	;'E'
   411  001075  52                 	db	82	;'R'
   412  001076  45                 	db	69	;'E'
   413  001077  00                 	db	0
   414  001078                     STR_11:
   415  001078  52                 	db	82	;'R'
   416  001079  55                 	db	85	;'U'
   417  00107A  4E                 	db	78	;'N'
   418  00107B  4E                 	db	78	;'N'
   419  00107C  49                 	db	73	;'I'
   420  00107D  4E                 	db	78	;'N'
   421  00107E  47                 	db	71	;'G'
   422  00107F  00                 	db	0
   423  001080                     STR_6:
   424  001080  4C                 	db	76	;'L'
   425  001081  4F                 	db	79	;'O'
   426  001082  47                 	db	71	;'G'
   427  001083  4C                 	db	76	;'L'
   428  001084  49                 	db	73	;'I'
   429  001085  53                 	db	83	;'S'
   430  001086  54                 	db	84	;'T'
   431  001087  00                 	db	0
   432  001088                     STR_7:
   433  001088  4C                 	db	76	;'L'
   434  001089  6F                 	db	111	;'o'
   435  00108A  67                 	db	103	;'g'
   436  00108B  20                 	db	32
   437  00108C  31                 	db	49	;'1'
   438  00108D  00                 	db	0
   439  00108E                     STR_8:
   440  00108E  4C                 	db	76	;'L'
   441  00108F  6F                 	db	111	;'o'
   442  001090  67                 	db	103	;'g'
   443  001091  20                 	db	32
   444  001092  32                 	db	50	;'2'
   445  001093  00                 	db	0
   446  001094                     STR_9:
   447  001094  4C                 	db	76	;'L'
   448  001095  6F                 	db	111	;'o'
   449  001096  67                 	db	103	;'g'
   450  001097  20                 	db	32
   451  001098  33                 	db	51	;'3'
   452  001099  00                 	db	0
   453  00109A                     STR_10:
   454  00109A  4C                 	db	76	;'L'
   455  00109B  6F                 	db	111	;'o'
   456  00109C  67                 	db	103	;'g'
   457  00109D  20                 	db	32
   458  00109E  34                 	db	52	;'4'
   459  00109F  00                 	db	0
   460  0010A0                     STR_1:
   461  0010A0  48                 	db	72	;'H'
   462  0010A1  4F                 	db	79	;'O'
   463  0010A2  4D                 	db	77	;'M'
   464  0010A3  45                 	db	69	;'E'
   465  0010A4  00                 	db	0
   466  0010A5                     STR_3:
   467  0010A5  44                 	db	68	;'D'
   468  0010A6  41                 	db	65	;'A'
   469  0010A7  54                 	db	84	;'T'
   470  0010A8  45                 	db	69	;'E'
   471  0010A9  00                 	db	0
   472  0010AA                     STR_21:
   473  0010AA  2A                 	db	42
   474  0010AB  00                 	db	0
   475  0000                     
   476                           ; #config settings
   477  0010AC  00                 	db	0	; dummy byte at the end
   478  0000                     
   479                           	psect	cinit
   480  002476                     __pcinit:
   481                           	opt callstack 0
   482  002476                     start_initialization:
   483                           	opt callstack 0
   484  002476                     __initialization:
   485                           	opt callstack 0
   486                           
   487                           ; Initialize objects allocated to BANK1 (144 bytes)
   488                           ; load TBLPTR registers with __pidataBANK1
   489  002476  0EE0               	movlw	low __pidataBANK1
   490  002478  6EF6               	movwf	tblptrl,c
   491  00247A  0E1F               	movlw	high __pidataBANK1
   492  00247C  6EF7               	movwf	tblptrh,c
   493  00247E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   494  002480  6EF8               	movwf	tblptru,c
   495  002482  EE01  F000         	lfsr	0,__pdataBANK1
   496  002486  EE10 F090          	lfsr	1,144
   497  00248A                     copy_data0:
   498  00248A  0009               	tblrd		*+
   499  00248C  CFF5 FFEE          	movff	tablat,postinc0
   500  002490  50E5               	movf	postdec1,w,c
   501  002492  50E1               	movf	fsr1l,w,c
   502  002494  E1FA               	bnz	copy_data0
   503                           
   504                           ; Clear objects allocated to BANK1 (32 bytes)
   505  002496  EE01  F090         	lfsr	0,__pbssBANK1
   506  00249A  0E20               	movlw	32
   507  00249C                     clear_0:
   508  00249C  6AEE               	clrf	postinc0,c
   509  00249E  06E8               	decf	wreg,f,c
   510  0024A0  E1FD               	bnz	clear_0
   511                           
   512                           ; Clear objects allocated to BANK0 (16 bytes)
   513  0024A2  EE00  F0DF         	lfsr	0,__pbssBANK0
   514  0024A6  0E10               	movlw	16
   515  0024A8                     clear_1:
   516  0024A8  6AEE               	clrf	postinc0,c
   517  0024AA  06E8               	decf	wreg,f,c
   518  0024AC  E1FD               	bnz	clear_1
   519  0024AE                     end_of_initialization:
   520                           	opt callstack 0
   521  0024AE                     __end_of__initialization:
   522                           	opt callstack 0
   523  0024AE  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   524  0024B0  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   525  0024B2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   526  0024B4  6EF8               	movwf	tblptru,c
   527  0024B6  0100               	movlb	0
   528  0024B8  EF2B  F00C         	goto	_main	;jump to C main() function
   529                           
   530                           	psect	bssBANK0
   531  0000DF                     __pbssBANK0:
   532                           	opt callstack 0
   533  0000DF                     _nout:
   534                           	opt callstack 0
   535  0000DF                     	ds	2
   536  0000E1                     _width:
   537                           	opt callstack 0
   538  0000E1                     	ds	2
   539  0000E3                     _prec:
   540                           	opt callstack 0
   541  0000E3                     	ds	2
   542  0000E5                     _flags:
   543                           	opt callstack 0
   544  0000E5                     	ds	2
   545  0000E7                     _key_was_pressed:
   546                           	opt callstack 0
   547  0000E7                     	ds	1
   548  0000E8                     _rtc:
   549                           	opt callstack 0
   550  0000E8                     	ds	7
   551                           
   552                           	psect	bssBANK1
   553  000190                     __pbssBANK1:
   554                           	opt callstack 0
   555  000190                     _dbuf:
   556                           	opt callstack 0
   557  000190                     	ds	32
   558                           
   559                           	psect	dataBANK1
   560  000100                     __pdataBANK1:
   561                           	opt callstack 0
   562  000100                     _runningOperation:
   563                           	opt callstack 0
   564  000100                     	ds	48
   565  000130                     _logList:
   566                           	opt callstack 0
   567  000130                     	ds	48
   568  000160                     _homeScreen:
   569                           	opt callstack 0
   570  000160                     	ds	48
   571                           
   572                           	psect	cstackBANK0
   573  000080                     __pcstackBANK0:
   574                           	opt callstack 0
   575  000080                     enterKey@temp:
   576                           	opt callstack 0
   577  000080                     printDateTime@tempDate:
   578                           	opt callstack 0
   579                           
   580                           ; 20 bytes @ 0x0
   581  000080                     	ds	20
   582  000094                     printDateTime@tempTime:
   583                           	opt callstack 0
   584                           
   585                           ; 20 bytes @ 0x14
   586  000094                     	ds	20
   587  0000A8                     printScreen@currentScreen:
   588                           	opt callstack 0
   589                           
   590                           ; 2 bytes @ 0x28
   591  0000A8                     	ds	2
   592  0000AA                     
   593                           ; 1 bytes @ 0x2A
   594  0000AA                     	ds	2
   595  0000AC                     ??_main:
   596                           
   597                           ; 1 bytes @ 0x2C
   598  0000AC                     	ds	1
   599  0000AD                     main@keypress:
   600                           	opt callstack 0
   601                           
   602                           ; 1 bytes @ 0x2D
   603  0000AD                     	ds	1
   604  0000AE                     main@temp:
   605                           	opt callstack 0
   606                           
   607                           ; 1 bytes @ 0x2E
   608  0000AE                     	ds	1
   609  0000AF                     main@currentScreen:
   610                           	opt callstack 0
   611                           
   612                           ; 48 bytes @ 0x2F
   613  0000AF                     	ds	48
   614                           
   615                           	psect	cstackCOMRAM
   616  000001                     __pcstackCOMRAM:
   617                           	opt callstack 0
   618  000001                     ??_I2C_Master_Wait:
   619  000001                     ?_strlen:
   620                           	opt callstack 0
   621  000001                     ?_isupper:
   622                           	opt callstack 0
   623  000001                     ?_isalpha:
   624                           	opt callstack 0
   625  000001                     ?_isdigit:
   626                           	opt callstack 0
   627  000001                     ?_isspace:
   628                           	opt callstack 0
   629  000001                     ?_islower:
   630                           	opt callstack 0
   631  000001                     ?___wmul:
   632                           	opt callstack 0
   633  000001                     ?___lldiv:
   634                           	opt callstack 0
   635  000001                     pulse_e@interruptState:
   636                           	opt callstack 0
   637  000001                     backKey@currentScreen:
   638                           	opt callstack 0
   639  000001                     ___wmul@multiplier:
   640                           	opt callstack 0
   641  000001                     isalpha@c:
   642                           	opt callstack 0
   643  000001                     isdigit@c:
   644                           	opt callstack 0
   645  000001                     isspace@c:
   646                           	opt callstack 0
   647  000001                     isupper@c:
   648                           	opt callstack 0
   649  000001                     strlen@s:
   650                           	opt callstack 0
   651  000001                     islower@c:
   652                           	opt callstack 0
   653  000001                     ___lldiv@dividend:
   654                           	opt callstack 0
   655                           
   656                           ; 4 bytes @ 0x0
   657  000001                     	ds	1
   658  000002                     send_nibble@data:
   659                           	opt callstack 0
   660  000002                     I2C_Master_Read@ackBit:
   661                           	opt callstack 0
   662  000002                     I2C_Master_Write@byteToWrite:
   663                           	opt callstack 0
   664                           
   665                           ; 2 bytes @ 0x1
   666  000002                     	ds	1
   667  000003                     ??_isupper:
   668  000003                     ??_isalpha:
   669  000003                     ??_isdigit:
   670  000003                     ??_isspace:
   671  000003                     ??_islower:
   672  000003                     send_byte@data:
   673                           	opt callstack 0
   674  000003                     I2C_Master_Read@receivedByte:
   675                           	opt callstack 0
   676  000003                     ___wmul@multiplicand:
   677                           	opt callstack 0
   678  000003                     strlen@a:
   679                           	opt callstack 0
   680                           
   681                           ; 2 bytes @ 0x2
   682  000003                     	ds	1
   683  000004                     lcdInst@data:
   684                           	opt callstack 0
   685  000004                     putch@data:
   686                           	opt callstack 0
   687  000004                     RTC_SetDateTime@rtc:
   688                           	opt callstack 0
   689  000004                     RTC_GetDateTime@rtc:
   690                           	opt callstack 0
   691                           
   692                           ; 2 bytes @ 0x3
   693  000004                     	ds	1
   694  000005                     ??_initLCD:
   695  000005                     LCD_set_cursor@row:
   696                           	opt callstack 0
   697  000005                     LCD_write_str@str:
   698                           	opt callstack 0
   699  000005                     ___wmul@product:
   700                           	opt callstack 0
   701  000005                     fputc@c:
   702                           	opt callstack 0
   703  000005                     ___lldiv@divisor:
   704                           	opt callstack 0
   705                           
   706                           ; 4 bytes @ 0x4
   707  000005                     	ds	1
   708  000006                     ??_RTC_SetDateTime:
   709  000006                     
   710                           ; 1 bytes @ 0x5
   711  000006                     	ds	1
   712  000007                     ??_LCD_write_str:
   713  000007                     ?_toupper:
   714                           	opt callstack 0
   715  000007                     _isspace$1244:
   716                           	opt callstack 0
   717  000007                     LCD_set_cursor@column:
   718                           	opt callstack 0
   719  000007                     fputc@fp:
   720                           	opt callstack 0
   721  000007                     toupper@c:
   722                           	opt callstack 0
   723                           
   724                           ; 2 bytes @ 0x6
   725  000007                     	ds	1
   726  000008                     ?_atoi:
   727                           	opt callstack 0
   728  000008                     atoi@s:
   729                           	opt callstack 0
   730                           
   731                           ; 2 bytes @ 0x7
   732  000008                     	ds	1
   733  000009                     ??_fputc:
   734  000009                     ??_toupper:
   735  000009                     LCD_write_str@i:
   736                           	opt callstack 0
   737  000009                     moveCursorUp@currentScreen:
   738                           	opt callstack 0
   739  000009                     moveCursorDown@currentScreen:
   740                           	opt callstack 0
   741  000009                     ___lldiv@quotient:
   742                           	opt callstack 0
   743                           
   744                           ; 4 bytes @ 0x8
   745  000009                     	ds	1
   746  00000A                     ??_atoi:
   747                           
   748                           ; 1 bytes @ 0x9
   749  00000A                     	ds	1
   750  00000B                     
   751                           ; 1 bytes @ 0xA
   752  00000B                     	ds	2
   753  00000D                     ___lldiv@counter:
   754                           	opt callstack 0
   755  00000D                     _toupper$1314:
   756                           	opt callstack 0
   757                           
   758                           ; 2 bytes @ 0xC
   759  00000D                     	ds	1
   760  00000E                     atoi@neg:
   761                           	opt callstack 0
   762  00000E                     fputs@s:
   763                           	opt callstack 0
   764  00000E                     I2C_Master_Init@clockFreq:
   765                           	opt callstack 0
   766                           
   767                           ; 4 bytes @ 0xD
   768  00000E                     	ds	2
   769  000010                     _atoi$1217:
   770                           	opt callstack 0
   771  000010                     fputs@fp:
   772                           	opt callstack 0
   773                           
   774                           ; 2 bytes @ 0xF
   775  000010                     	ds	2
   776  000012                     ??_I2C_Master_Init:
   777  000012                     fputs@c:
   778                           	opt callstack 0
   779  000012                     _atoi$1219:
   780                           	opt callstack 0
   781                           
   782                           ; 2 bytes @ 0x11
   783  000012                     	ds	1
   784  000013                     fputs@i:
   785                           	opt callstack 0
   786                           
   787                           ; 2 bytes @ 0x12
   788  000013                     	ds	1
   789  000014                     _atoi$1218:
   790                           	opt callstack 0
   791                           
   792                           ; 1 bytes @ 0x13
   793  000014                     	ds	1
   794  000015                     ?_pad:
   795                           	opt callstack 0
   796  000015                     pad@fp:
   797                           	opt callstack 0
   798  000015                     atoi@n:
   799                           	opt callstack 0
   800                           
   801                           ; 2 bytes @ 0x14
   802  000015                     	ds	2
   803  000017                     pad@buf:
   804                           	opt callstack 0
   805                           
   806                           ; 2 bytes @ 0x16
   807  000017                     	ds	2
   808  000019                     pad@p:
   809                           	opt callstack 0
   810                           
   811                           ; 2 bytes @ 0x18
   812  000019                     	ds	2
   813  00001B                     ??_pad:
   814                           
   815                           ; 1 bytes @ 0x1A
   816  00001B                     	ds	1
   817  00001C                     pad@i:
   818                           	opt callstack 0
   819                           
   820                           ; 2 bytes @ 0x1B
   821  00001C                     	ds	2
   822  00001E                     pad@w:
   823                           	opt callstack 0
   824                           
   825                           ; 2 bytes @ 0x1D
   826  00001E                     	ds	2
   827  000020                     ?_xtoa:
   828                           	opt callstack 0
   829  000020                     xtoa@fp:
   830                           	opt callstack 0
   831                           
   832                           ; 2 bytes @ 0x1F
   833  000020                     	ds	2
   834  000022                     xtoa@d:
   835                           	opt callstack 0
   836                           
   837                           ; 8 bytes @ 0x21
   838  000022                     	ds	8
   839  00002A                     xtoa@x:
   840                           	opt callstack 0
   841                           
   842                           ; 1 bytes @ 0x29
   843  00002A                     	ds	1
   844  00002B                     ??_xtoa:
   845                           
   846                           ; 1 bytes @ 0x2A
   847  00002B                     	ds	8
   848  000033                     _xtoa$746:
   849                           	opt callstack 0
   850                           
   851                           ; 2 bytes @ 0x32
   852  000033                     	ds	2
   853  000035                     _xtoa$747:
   854                           	opt callstack 0
   855                           
   856                           ; 2 bytes @ 0x34
   857  000035                     	ds	2
   858  000037                     xtoa@p:
   859                           	opt callstack 0
   860                           
   861                           ; 2 bytes @ 0x36
   862  000037                     	ds	2
   863  000039                     xtoa@w:
   864                           	opt callstack 0
   865                           
   866                           ; 2 bytes @ 0x38
   867  000039                     	ds	2
   868  00003B                     xtoa@n:
   869                           	opt callstack 0
   870                           
   871                           ; 8 bytes @ 0x3A
   872  00003B                     	ds	8
   873  000043                     xtoa@i:
   874                           	opt callstack 0
   875                           
   876                           ; 2 bytes @ 0x42
   877  000043                     	ds	2
   878  000045                     xtoa@c:
   879                           	opt callstack 0
   880                           
   881                           ; 2 bytes @ 0x44
   882  000045                     	ds	2
   883  000047                     ?_vfpfcnvrt:
   884                           	opt callstack 0
   885  000047                     vfpfcnvrt@fp:
   886                           	opt callstack 0
   887                           
   888                           ; 2 bytes @ 0x46
   889  000047                     	ds	2
   890  000049                     vfpfcnvrt@fmt:
   891                           	opt callstack 0
   892                           
   893                           ; 2 bytes @ 0x48
   894  000049                     	ds	2
   895  00004B                     vfpfcnvrt@ap:
   896                           	opt callstack 0
   897                           
   898                           ; 2 bytes @ 0x4A
   899  00004B                     	ds	2
   900  00004D                     ??_vfpfcnvrt:
   901                           
   902                           ; 1 bytes @ 0x4C
   903  00004D                     	ds	4
   904  000051                     vfpfcnvrt@llu:
   905                           	opt callstack 0
   906                           
   907                           ; 8 bytes @ 0x50
   908  000051                     	ds	8
   909  000059                     vfpfcnvrt@done:
   910                           	opt callstack 0
   911                           
   912                           ; 2 bytes @ 0x58
   913  000059                     	ds	2
   914  00005B                     _vfpfcnvrt$762:
   915                           	opt callstack 0
   916                           
   917                           ; 2 bytes @ 0x5A
   918  00005B                     	ds	2
   919  00005D                     vfpfcnvrt@c:
   920                           	opt callstack 0
   921                           
   922                           ; 1 bytes @ 0x5C
   923  00005D                     	ds	1
   924  00005E                     ?_vfprintf:
   925                           	opt callstack 0
   926  00005E                     vfprintf@fp:
   927                           	opt callstack 0
   928                           
   929                           ; 2 bytes @ 0x5D
   930  00005E                     	ds	2
   931  000060                     vfprintf@fmt:
   932                           	opt callstack 0
   933                           
   934                           ; 2 bytes @ 0x5F
   935  000060                     	ds	2
   936  000062                     vfprintf@ap:
   937                           	opt callstack 0
   938                           
   939                           ; 2 bytes @ 0x61
   940  000062                     	ds	2
   941  000064                     vfprintf@cfmt:
   942                           	opt callstack 0
   943                           
   944                           ; 2 bytes @ 0x63
   945  000064                     	ds	2
   946  000066                     ?_sprintf:
   947                           	opt callstack 0
   948  000066                     sprintf@s:
   949                           	opt callstack 0
   950                           
   951                           ; 2 bytes @ 0x65
   952  000066                     	ds	2
   953  000068                     sprintf@fmt:
   954                           	opt callstack 0
   955                           
   956                           ; 2 bytes @ 0x67
   957  000068                     	ds	8
   958  000070                     
   959                           ; 1 bytes @ 0x6F
   960  000070                     	ds	2
   961  000072                     sprintf@ap:
   962                           	opt callstack 0
   963                           
   964                           ; 2 bytes @ 0x71
   965  000072                     	ds	2
   966  000074                     sprintf@f:
   967                           	opt callstack 0
   968                           
   969                           ; 6 bytes @ 0x73
   970  000074                     	ds	6
   971  00007A                     enterKey@currentScreen:
   972                           	opt callstack 0
   973  00007A                     printDateTime@currentScreen:
   974                           	opt callstack 0
   975                           
   976                           ; 2 bytes @ 0x79
   977  00007A                     	ds	2
   978  00007C                     ??_enterKey:
   979  00007C                     ??_printDateTime:
   980                           
   981                           ; 1 bytes @ 0x7B
   982  00007C                     	ds	3
   983                           
   984 ;;
   985 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   986 ;;
   987 ;; *************** function _main *****************
   988 ;; Defined at:
   989 ;;		line 95 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;  temp            1   46[BANK0 ] unsigned char 
   994 ;;  keypress        1   45[BANK0 ] unsigned char 
   995 ;;  currentScree   48   47[BANK0 ] struct Screen
   996 ;; Return value:  Size  Location     Type
   997 ;;                  1    wreg      void 
   998 ;; Registers used:
   999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;      Locals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1007 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1008 ;;      Totals:         0      51       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1009 ;;Total ram usage:       51 bytes
  1010 ;; Hardware stack levels required when called:   14
  1011 ;; This function calls:
  1012 ;;		_I2C_Master_Init
  1013 ;;		_RTC_Init
  1014 ;;		_RTC_SetDateTime
  1015 ;;		_backKey
  1016 ;;		_enterKey
  1017 ;;		_initLCD
  1018 ;;		_lcdInst
  1019 ;;		_moveCursorDown
  1020 ;;		_moveCursorUp
  1021 ;;		_printScreen
  1022 ;; This function is called by:
  1023 ;;		Startup code after reset
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text0
  1028  001856                     __ptext0:
  1029                           	opt callstack 0
  1030  001856                     _main:
  1031                           	opt callstack 17
  1032                           
  1033                           ;main.c: 99:     LATD = 0x00;
  1034                           
  1035                           ;incstack = 0
  1036  001856  0E00               	movlw	0
  1037  001858  6E8C               	movwf	3980,c	;volatile
  1038                           
  1039                           ;main.c: 100:     TRISC = 0x00;
  1040  00185A  0E00               	movlw	0
  1041  00185C  6E94               	movwf	3988,c	;volatile
  1042                           
  1043                           ;main.c: 101:     TRISD = 0x00;
  1044  00185E  0E00               	movlw	0
  1045  001860  6E95               	movwf	3989,c	;volatile
  1046                           
  1047                           ;main.c: 102:     TRISBbits.RB1 = 1;
  1048  001862  8293               	bsf	3987,1,c	;volatile
  1049                           
  1050                           ;main.c: 104:     ADCON1 = 0b00001111;
  1051  001864  0E0F               	movlw	15
  1052  001866  6EC1               	movwf	4033,c	;volatile
  1053                           
  1054                           ;main.c: 106:     INT1IE = 1;
  1055  001868  86F0               	bsf	4080,3,c	;volatile
  1056                           
  1057                           ;main.c: 109:     initLCD();
  1058  00186A  EC3A  F011         	call	_initLCD	;wreg free
  1059                           
  1060                           ;main.c: 110:     I2C_Master_Init(100000);
  1061  00186E  0EA0               	movlw	160
  1062  001870  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1063  001872  0E86               	movlw	134
  1064  001874  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1065  001876  0E01               	movlw	1
  1066  001878  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1067  00187A  0E00               	movlw	0
  1068  00187C  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1069  00187E  EC6F  F011         	call	_I2C_Master_Init	;wreg free
  1070                           
  1071                           ;main.c: 112:     RTC_Init();
  1072  001882  EC12  F013         	call	_RTC_Init	;wreg free
  1073                           
  1074                           ;main.c: 115:     (INTCONbits.GIE = 1);
  1075  001886  8EF2               	bsf	4082,7,c	;volatile
  1076                           
  1077                           ;main.c: 117:     Screen currentScreen = homeScreen;
  1078  001888  EE21  F060         	lfsr	2,_homeScreen
  1079  00188C  EE10  F0AF         	lfsr	1,main@currentScreen
  1080  001890  0E2F               	movlw	47
  1081  001892                     u1851:
  1082  001892  CFDB FFE3          	movff	plusw2,plusw1
  1083  001896  06E8               	decf	wreg,f,c
  1084  001898  E2FC               	bc	u1851
  1085                           
  1086                           ;main.c: 119:     printScreen(&currentScreen);
  1087  00189A  0EAF               	movlw	low main@currentScreen
  1088  00189C  0100               	movlb	0	; () banked
  1089  00189E  6FA8               	movwf	printScreen@currentScreen& (0+255),b
  1090  0018A0  0E00               	movlw	high main@currentScreen
  1091  0018A2  6FA9               	movwf	(printScreen@currentScreen+1)& (0+255),b
  1092  0018A4  ECD6  F009         	call	_printScreen	;wreg free
  1093                           
  1094                           ;main.c: 124:  rtc.hour = 0x23;
  1095  0018A8  0E23               	movlw	35
  1096  0018AA  0100               	movlb	0	; () banked
  1097  0018AC  6FEA               	movwf	(_rtc+2)& (0+255),b
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;main.c: 125:     rtc.min = 0x39;
  1101  0018AE  0E39               	movlw	57
  1102  0018B0  6FE9               	movwf	(_rtc+1)& (0+255),b
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;main.c: 126:     rtc.sec = 0x37;
  1106  0018B2  0E37               	movlw	55
  1107  0018B4  6FE8               	movwf	_rtc& (0+255),b
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;main.c: 128:     rtc.date = 0x01;
  1111  0018B6  0E01               	movlw	1
  1112  0018B8  6FEC               	movwf	(_rtc+4)& (0+255),b
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;main.c: 129:     rtc.month = 0x01;
  1116  0018BA  0E01               	movlw	1
  1117  0018BC  6FED               	movwf	(_rtc+5)& (0+255),b
  1118                           
  1119                           ; BSR set to: 0
  1120                           ;main.c: 130:     rtc.year = 0x19;
  1121  0018BE  0E19               	movlw	25
  1122  0018C0  6FEE               	movwf	(_rtc+6)& (0+255),b
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;main.c: 131:     rtc.weekDay = 1;
  1126  0018C2  0E01               	movlw	1
  1127  0018C4  6FEB               	movwf	(_rtc+3)& (0+255),b
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;main.c: 132:     RTC_SetDateTime(&rtc);
  1131  0018C6  0EE8               	movlw	low _rtc
  1132  0018C8  6E04               	movwf	RTC_SetDateTime@rtc,c
  1133  0018CA  0E00               	movlw	high _rtc
  1134  0018CC  6E05               	movwf	RTC_SetDateTime@rtc+1,c
  1135  0018CE  EC2C  F00E         	call	_RTC_SetDateTime	;wreg free
  1136  0018D2                     l2577:
  1137                           
  1138                           ;main.c: 135:         if(key_was_pressed){
  1139  0018D2  0100               	movlb	0	; () banked
  1140  0018D4  51E7               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1141  0018D6  B4D8               	btfsc	status,2,c
  1142  0018D8  D082               	goto	l2609
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;main.c: 136:             key_was_pressed=0;
  1146  0018DA  0E00               	movlw	0
  1147  0018DC  6FE7               	movwf	_key_was_pressed& (0+255),b	;volatile
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;main.c: 137:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1151  0018DE  3881               	swapf	3969,w,c	;volatile
  1152  0018E0  0B0F               	andlw	15
  1153  0018E2  0B0F               	andlw	15
  1154  0018E4  6FAD               	movwf	main@keypress& (0+255),b
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 138:             unsigned char temp = keys[keypress];
  1158  0018E6  0E01               	movlw	low _keys
  1159  0018E8  25AD               	addwf	main@keypress& (0+255),w,b
  1160  0018EA  6EF6               	movwf	tblptrl,c
  1161  0018EC  6AF7               	clrf	tblptrh,c
  1162  0018EE  0E10               	movlw	high _keys
  1163  0018F0  22F7               	addwfc	tblptrh,f,c
  1164  0018F2                     	if	0	;There are less than 3 active tblptr bytes
  1165  0018F2                     	endif
  1166  0018F2  0008               	tblrd		*
  1167  0018F4  CFF5 F0AE          	movff	tablat,main@temp
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;main.c: 139:             if(temp=='0'){
  1171  0018F8  0E30               	movlw	48
  1172  0018FA  19AE               	xorwf	main@temp& (0+255),w,b
  1173  0018FC  A4D8               	btfss	status,2,c
  1174  0018FE  D012               	goto	u1889
  1175                           
  1176                           ; BSR set to: 0
  1177                           ;main.c: 140:                 currentScreen.moveCursorDown(&currentScreen);
  1178  001900  0EAF               	movlw	low main@currentScreen
  1179  001902  6E09               	movwf	moveCursorDown@currentScreen,c
  1180  001904  0E00               	movlw	high main@currentScreen
  1181  001906  6E0A               	movwf	moveCursorDown@currentScreen+1,c
  1182  001908  EE20  F0D9         	lfsr	2,main@currentScreen+42
  1183  00190C  D801               	call	u1888
  1184  00190E  D00A               	goto	u1889
  1185  001910                     u1888:
  1186  001910  0005               	push	
  1187  001912  6EFA               	movwf	pclath,c
  1188  001914  50DE               	movf	postinc2,w,c
  1189  001916  6EFD               	movwf	tosl,c
  1190  001918  50DE               	movf	postinc2,w,c
  1191  00191A  6EFE               	movwf	tosh,c
  1192  00191C  50F8               	movf	tblptru,w,c
  1193  00191E  6EFF               	movwf	tosu,c
  1194  001920  50FA               	movf	pclath,w,c
  1195  001922  0012               	return		;indir
  1196  001924                     u1889:
  1197                           
  1198                           ;main.c: 142:             if(temp=='2'){
  1199  001924  0E32               	movlw	50
  1200  001926  0100               	movlb	0	; () banked
  1201  001928  19AE               	xorwf	main@temp& (0+255),w,b
  1202  00192A  A4D8               	btfss	status,2,c
  1203  00192C  D012               	goto	u1909
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;main.c: 143:                 currentScreen.moveCursorUp(&currentScreen);
  1207  00192E  0EAF               	movlw	low main@currentScreen
  1208  001930  6E09               	movwf	moveCursorUp@currentScreen,c
  1209  001932  0E00               	movlw	high main@currentScreen
  1210  001934  6E0A               	movwf	moveCursorUp@currentScreen+1,c
  1211  001936  EE20  F0D7         	lfsr	2,main@currentScreen+40
  1212  00193A  D801               	call	u1908
  1213  00193C  D00A               	goto	u1909
  1214  00193E                     u1908:
  1215  00193E  0005               	push	
  1216  001940  6EFA               	movwf	pclath,c
  1217  001942  50DE               	movf	postinc2,w,c
  1218  001944  6EFD               	movwf	tosl,c
  1219  001946  50DE               	movf	postinc2,w,c
  1220  001948  6EFE               	movwf	tosh,c
  1221  00194A  50F8               	movf	tblptru,w,c
  1222  00194C  6EFF               	movwf	tosu,c
  1223  00194E  50FA               	movf	pclath,w,c
  1224  001950  0012               	return		;indir
  1225  001952                     u1909:
  1226                           
  1227                           ;main.c: 145:             if(temp=='B'){
  1228  001952  0E42               	movlw	66
  1229  001954  0100               	movlb	0	; () banked
  1230  001956  19AE               	xorwf	main@temp& (0+255),w,b
  1231  001958  A4D8               	btfss	status,2,c
  1232  00195A  D01E               	goto	l2601
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;main.c: 146:                 currentScreen.backKey(&currentScreen);
  1236  00195C  0EAF               	movlw	low main@currentScreen
  1237  00195E  6E01               	movwf	backKey@currentScreen,c
  1238  001960  0E00               	movlw	high main@currentScreen
  1239  001962  6E02               	movwf	backKey@currentScreen+1,c
  1240  001964  EE20  F0DD         	lfsr	2,main@currentScreen+46
  1241  001968  D801               	call	u1928
  1242  00196A  D00A               	goto	u1929
  1243  00196C                     u1928:
  1244  00196C  0005               	push	
  1245  00196E  6EFA               	movwf	pclath,c
  1246  001970  50DE               	movf	postinc2,w,c
  1247  001972  6EFD               	movwf	tosl,c
  1248  001974  50DE               	movf	postinc2,w,c
  1249  001976  6EFE               	movwf	tosh,c
  1250  001978  50F8               	movf	tblptru,w,c
  1251  00197A  6EFF               	movwf	tosu,c
  1252  00197C  50FA               	movf	pclath,w,c
  1253  00197E  0012               	return		;indir
  1254  001980                     u1929:
  1255                           
  1256                           ;main.c: 147:                 { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000
      +                          .0)));};
  1257  001980  0E01               	movlw	1
  1258  001982  EC9F  F013         	call	_lcdInst
  1259  001986  0E11               	movlw	17
  1260  001988  0100               	movlb	0	; () banked
  1261  00198A  6FAC               	movwf	??_main& (0+255),b
  1262  00198C  0E3A               	movlw	58
  1263  00198E                     u1977:
  1264  00198E  2EE8               	decfsz	wreg,f,c
  1265  001990  D7FE               	bra	u1977
  1266  001992  2FAC               	decfsz	??_main& (0+255),f,b
  1267  001994  D7FC               	bra	u1977
  1268  001996  F000               	nop	
  1269  001998                     l2601:
  1270                           
  1271                           ;main.c: 149:             if(temp=='D'){
  1272  001998  0E44               	movlw	68
  1273  00199A  0100               	movlb	0	; () banked
  1274  00199C  19AE               	xorwf	main@temp& (0+255),w,b
  1275  00199E  A4D8               	btfss	status,2,c
  1276  0019A0  D01E               	goto	l2609
  1277                           
  1278                           ; BSR set to: 0
  1279                           ;main.c: 150:                 currentScreen.enterKey(&currentScreen);
  1280  0019A2  0EAF               	movlw	low main@currentScreen
  1281  0019A4  6E7A               	movwf	enterKey@currentScreen,c
  1282  0019A6  0E00               	movlw	high main@currentScreen
  1283  0019A8  6E7B               	movwf	enterKey@currentScreen+1,c
  1284  0019AA  EE20  F0DB         	lfsr	2,main@currentScreen+44
  1285  0019AE  D801               	call	u1948
  1286  0019B0  D00A               	goto	u1949
  1287  0019B2                     u1948:
  1288  0019B2  0005               	push	
  1289  0019B4  6EFA               	movwf	pclath,c
  1290  0019B6  50DE               	movf	postinc2,w,c
  1291  0019B8  6EFD               	movwf	tosl,c
  1292  0019BA  50DE               	movf	postinc2,w,c
  1293  0019BC  6EFE               	movwf	tosh,c
  1294  0019BE  50F8               	movf	tblptru,w,c
  1295  0019C0  6EFF               	movwf	tosu,c
  1296  0019C2  50FA               	movf	pclath,w,c
  1297  0019C4  0012               	return		;indir
  1298  0019C6                     u1949:
  1299                           
  1300                           ;main.c: 151:                 { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000
      +                          .0)));};
  1301  0019C6  0E01               	movlw	1
  1302  0019C8  EC9F  F013         	call	_lcdInst
  1303  0019CC  0E11               	movlw	17
  1304  0019CE  0100               	movlb	0	; () banked
  1305  0019D0  6FAC               	movwf	??_main& (0+255),b
  1306  0019D2  0E3A               	movlw	58
  1307  0019D4                     u1987:
  1308  0019D4  2EE8               	decfsz	wreg,f,c
  1309  0019D6  D7FE               	bra	u1987
  1310  0019D8  2FAC               	decfsz	??_main& (0+255),f,b
  1311  0019DA  D7FC               	bra	u1987
  1312  0019DC  F000               	nop	
  1313  0019DE                     l2609:
  1314                           
  1315                           ;main.c: 154:         printScreen(&currentScreen);
  1316  0019DE  0EAF               	movlw	low main@currentScreen
  1317  0019E0  0100               	movlb	0	; () banked
  1318  0019E2  6FA8               	movwf	printScreen@currentScreen& (0+255),b
  1319  0019E4  0E00               	movlw	high main@currentScreen
  1320  0019E6  6FA9               	movwf	(printScreen@currentScreen+1)& (0+255),b
  1321  0019E8  ECD6  F009         	call	_printScreen	;wreg free
  1322  0019EC  D772               	goto	l2577
  1323  0019EE                     __end_of_main:
  1324                           	opt callstack 0
  1325                           
  1326 ;; *************** function _printScreen *****************
  1327 ;; Defined at:
  1328 ;;		line 159 in file "main.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  currentScree    2   40[BANK0 ] PTR struct Screen
  1331 ;;		 -> main@currentScreen(48), 
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;		None
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  1    wreg      void 
  1336 ;; Registers used:
  1337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1343 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1346 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1347 ;;Total ram usage:        4 bytes
  1348 ;; Hardware stack levels used:    1
  1349 ;; Hardware stack levels required when called:   13
  1350 ;; This function calls:
  1351 ;;		_LCD_set_cursor
  1352 ;;		_LCD_write_str
  1353 ;;		_printDateTime
  1354 ;; This function is called by:
  1355 ;;		_main
  1356 ;; This function uses a non-reentrant model
  1357 ;;
  1358                           
  1359                           	psect	text1
  1360  0013AC                     __ptext1:
  1361                           	opt callstack 0
  1362  0013AC                     _printScreen:
  1363                           	opt callstack 17
  1364                           
  1365                           ;main.c: 162:     LCD_set_cursor(0,0);
  1366                           
  1367                           ;incstack = 0
  1368  0013AC  0E00               	movlw	0
  1369  0013AE  6E06               	movwf	LCD_set_cursor@row+1,c
  1370  0013B0  0E00               	movlw	0
  1371  0013B2  6E05               	movwf	LCD_set_cursor@row,c
  1372  0013B4  0E00               	movlw	0
  1373  0013B6  6E08               	movwf	LCD_set_cursor@column+1,c
  1374  0013B8  0E00               	movlw	0
  1375  0013BA  6E07               	movwf	LCD_set_cursor@column,c
  1376  0013BC  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1377                           
  1378                           ;main.c: 163:     if(currentScreen->name == "HOME"){
  1379  0013C0  C0A8  FFD9         	movff	printScreen@currentScreen,fsr2l
  1380  0013C4  C0A9  FFDA         	movff	printScreen@currentScreen+1,fsr2h
  1381  0013C8  0EA0               	movlw	low STR_1
  1382  0013CA  18DE               	xorwf	postinc2,w,c
  1383  0013CC  E174               	bnz	l2469
  1384  0013CE  0E10               	movlw	high STR_1
  1385  0013D0  18DE               	xorwf	postinc2,w,c
  1386  0013D2  A4D8               	btfss	status,2,c
  1387  0013D4  D070               	goto	l2469
  1388                           
  1389                           ;main.c: 164:         printDateTime(currentScreen);
  1390  0013D6  C0A8  F07A         	movff	printScreen@currentScreen,printDateTime@currentScreen
  1391  0013DA  C0A9  F07B         	movff	printScreen@currentScreen+1,printDateTime@currentScreen+1
  1392  0013DE  EC97  F00D         	call	_printDateTime	;wreg free
  1393                           
  1394                           ;main.c: 165:         LCD_write_str(currentScreen->lineText[0]);
  1395  0013E2  0100               	movlb	0	; () banked
  1396  0013E4  EE20 F002          	lfsr	2,2
  1397  0013E8  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1398  0013EA  26D9               	addwf	fsr2l,f,c
  1399  0013EC  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1400  0013EE  22DA               	addwfc	fsr2h,f,c
  1401  0013F0  CFDE F005          	movff	postinc2,LCD_write_str@str
  1402  0013F4  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1403  0013F8  ECFF  F010         	call	_LCD_write_str	;wreg free
  1404                           
  1405                           ;main.c: 166:         LCD_set_cursor(1,0);
  1406  0013FC  0E00               	movlw	0
  1407  0013FE  6E06               	movwf	LCD_set_cursor@row+1,c
  1408  001400  0E01               	movlw	1
  1409  001402  6E05               	movwf	LCD_set_cursor@row,c
  1410  001404  0E00               	movlw	0
  1411  001406  6E08               	movwf	LCD_set_cursor@column+1,c
  1412  001408  0E00               	movlw	0
  1413  00140A  6E07               	movwf	LCD_set_cursor@column,c
  1414  00140C  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1415                           
  1416                           ;main.c: 167:         LCD_write_str(currentScreen->lineText[1]);
  1417  001410  0100               	movlb	0	; () banked
  1418  001412  EE20 F004          	lfsr	2,4
  1419  001416  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1420  001418  26D9               	addwf	fsr2l,f,c
  1421  00141A  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1422  00141C  22DA               	addwfc	fsr2h,f,c
  1423  00141E  CFDE F005          	movff	postinc2,LCD_write_str@str
  1424  001422  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1425  001426  ECFF  F010         	call	_LCD_write_str	;wreg free
  1426                           
  1427                           ;main.c: 168:         LCD_set_cursor(2,0);
  1428  00142A  0E00               	movlw	0
  1429  00142C  6E06               	movwf	LCD_set_cursor@row+1,c
  1430  00142E  0E02               	movlw	2
  1431  001430  6E05               	movwf	LCD_set_cursor@row,c
  1432  001432  0E00               	movlw	0
  1433  001434  6E08               	movwf	LCD_set_cursor@column+1,c
  1434  001436  0E00               	movlw	0
  1435  001438  6E07               	movwf	LCD_set_cursor@column,c
  1436  00143A  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1437                           
  1438                           ;main.c: 169:         LCD_write_str(currentScreen->lineText[2]);
  1439  00143E  0100               	movlb	0	; () banked
  1440  001440  EE20 F006          	lfsr	2,6
  1441  001444  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1442  001446  26D9               	addwf	fsr2l,f,c
  1443  001448  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1444  00144A  22DA               	addwfc	fsr2h,f,c
  1445  00144C  CFDE F005          	movff	postinc2,LCD_write_str@str
  1446  001450  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1447  001454  ECFF  F010         	call	_LCD_write_str	;wreg free
  1448                           
  1449                           ;main.c: 170:         LCD_set_cursor(3,0);
  1450  001458  0E00               	movlw	0
  1451  00145A  6E06               	movwf	LCD_set_cursor@row+1,c
  1452  00145C  0E03               	movlw	3
  1453  00145E  6E05               	movwf	LCD_set_cursor@row,c
  1454  001460  0E00               	movlw	0
  1455  001462  6E08               	movwf	LCD_set_cursor@column+1,c
  1456  001464  0E00               	movlw	0
  1457  001466  6E07               	movwf	LCD_set_cursor@column,c
  1458  001468  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1459                           
  1460                           ;main.c: 171:         LCD_write_str(currentScreen->lineText[3]);
  1461  00146C  0100               	movlb	0	; () banked
  1462  00146E  EE20 F008          	lfsr	2,8
  1463  001472  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1464  001474  26D9               	addwf	fsr2l,f,c
  1465  001476  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1466  001478  22DA               	addwfc	fsr2h,f,c
  1467  00147A  CFDE F005          	movff	postinc2,LCD_write_str@str
  1468  00147E  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1469  001482  ECFF  F010         	call	_LCD_write_str	;wreg free
  1470                           
  1471                           ;main.c: 172:         LCD_set_cursor(currentScreen->cursorLine,15);
  1472  001486  0100               	movlb	0	; () banked
  1473  001488  EE20 F022          	lfsr	2,34
  1474  00148C  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1475  00148E  26D9               	addwf	fsr2l,f,c
  1476  001490  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1477  001492  22DA               	addwfc	fsr2h,f,c
  1478  001494  CFDE F005          	movff	postinc2,LCD_set_cursor@row
  1479  001498  CFDD F006          	movff	postdec2,LCD_set_cursor@row+1
  1480  00149C  0E00               	movlw	0
  1481  00149E  6E08               	movwf	LCD_set_cursor@column+1,c
  1482  0014A0  0E0F               	movlw	15
  1483  0014A2  6E07               	movwf	LCD_set_cursor@column,c
  1484  0014A4  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1485                           
  1486                           ;main.c: 173:         LCD_write_str("*");
  1487  0014A8  0EAA               	movlw	low STR_21
  1488  0014AA  6E05               	movwf	LCD_write_str@str,c
  1489  0014AC  0E10               	movlw	high STR_21
  1490  0014AE  6E06               	movwf	LCD_write_str@str+1,c
  1491  0014B0  ECFF  F010         	call	_LCD_write_str	;wreg free
  1492                           
  1493                           ;main.c: 174:     }else if(currentScreen->name == "RUNNING"){
  1494  0014B4  0012               	return	
  1495  0014B6                     l2469:
  1496  0014B6  C0A8  FFD9         	movff	printScreen@currentScreen,fsr2l
  1497  0014BA  C0A9  FFDA         	movff	printScreen@currentScreen+1,fsr2h
  1498  0014BE  0E78               	movlw	low STR_11
  1499  0014C0  18DE               	xorwf	postinc2,w,c
  1500  0014C2  E146               	bnz	l2483
  1501  0014C4  0E10               	movlw	high STR_11
  1502  0014C6  18DE               	xorwf	postinc2,w,c
  1503  0014C8  A4D8               	btfss	status,2,c
  1504  0014CA  D042               	goto	l2483
  1505                           
  1506                           ;main.c: 175:         printDateTime(currentScreen);
  1507  0014CC  C0A8  F07A         	movff	printScreen@currentScreen,printDateTime@currentScreen
  1508  0014D0  C0A9  F07B         	movff	printScreen@currentScreen+1,printDateTime@currentScreen+1
  1509  0014D4  EC97  F00D         	call	_printDateTime	;wreg free
  1510                           
  1511                           ;main.c: 176:         LCD_write_str(currentScreen->lineText[0]);
  1512  0014D8  0100               	movlb	0	; () banked
  1513  0014DA  EE20 F002          	lfsr	2,2
  1514  0014DE  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1515  0014E0  26D9               	addwf	fsr2l,f,c
  1516  0014E2  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1517  0014E4  22DA               	addwfc	fsr2h,f,c
  1518  0014E6  CFDE F005          	movff	postinc2,LCD_write_str@str
  1519  0014EA  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1520  0014EE  ECFF  F010         	call	_LCD_write_str	;wreg free
  1521                           
  1522                           ;main.c: 177:         LCD_set_cursor(1,0);
  1523  0014F2  0E00               	movlw	0
  1524  0014F4  6E06               	movwf	LCD_set_cursor@row+1,c
  1525  0014F6  0E01               	movlw	1
  1526  0014F8  6E05               	movwf	LCD_set_cursor@row,c
  1527  0014FA  0E00               	movlw	0
  1528  0014FC  6E08               	movwf	LCD_set_cursor@column+1,c
  1529  0014FE  0E00               	movlw	0
  1530  001500  6E07               	movwf	LCD_set_cursor@column,c
  1531  001502  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1532                           
  1533                           ;main.c: 178:         LCD_write_str(currentScreen->lineText[1]);
  1534  001506  0100               	movlb	0	; () banked
  1535  001508  EE20 F004          	lfsr	2,4
  1536  00150C  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1537  00150E  26D9               	addwf	fsr2l,f,c
  1538  001510  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1539  001512  22DA               	addwfc	fsr2h,f,c
  1540  001514  CFDE F005          	movff	postinc2,LCD_write_str@str
  1541  001518  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1542  00151C  ECFF  F010         	call	_LCD_write_str	;wreg free
  1543                           
  1544                           ;main.c: 179:         LCD_set_cursor(2,0);
  1545  001520  0E00               	movlw	0
  1546  001522  6E06               	movwf	LCD_set_cursor@row+1,c
  1547  001524  0E02               	movlw	2
  1548  001526  6E05               	movwf	LCD_set_cursor@row,c
  1549  001528  0E00               	movlw	0
  1550  00152A  6E08               	movwf	LCD_set_cursor@column+1,c
  1551  00152C  0E00               	movlw	0
  1552  00152E  6E07               	movwf	LCD_set_cursor@column,c
  1553  001530  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1554                           
  1555                           ;main.c: 180:         LCD_write_str(currentScreen->lineText[2]);
  1556  001534  0100               	movlb	0	; () banked
  1557  001536  EE20 F006          	lfsr	2,6
  1558  00153A  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1559  00153C  26D9               	addwf	fsr2l,f,c
  1560  00153E  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1561  001540  22DA               	addwfc	fsr2h,f,c
  1562  001542  CFDE F005          	movff	postinc2,LCD_write_str@str
  1563  001546  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1564  00154A  ECFF  F010         	call	_LCD_write_str	;wreg free
  1565                           
  1566                           ;main.c: 182:     }else{
  1567  00154E  0012               	return	
  1568  001550                     l2483:
  1569                           
  1570                           ;main.c: 183:         LCD_write_str(currentScreen->lineText[0]);
  1571  001550  0100               	movlb	0	; () banked
  1572  001552  EE20 F002          	lfsr	2,2
  1573  001556  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1574  001558  26D9               	addwf	fsr2l,f,c
  1575  00155A  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1576  00155C  22DA               	addwfc	fsr2h,f,c
  1577  00155E  CFDE F005          	movff	postinc2,LCD_write_str@str
  1578  001562  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1579  001566  ECFF  F010         	call	_LCD_write_str	;wreg free
  1580                           
  1581                           ;main.c: 184:         LCD_set_cursor(1,0);
  1582  00156A  0E00               	movlw	0
  1583  00156C  6E06               	movwf	LCD_set_cursor@row+1,c
  1584  00156E  0E01               	movlw	1
  1585  001570  6E05               	movwf	LCD_set_cursor@row,c
  1586  001572  0E00               	movlw	0
  1587  001574  6E08               	movwf	LCD_set_cursor@column+1,c
  1588  001576  0E00               	movlw	0
  1589  001578  6E07               	movwf	LCD_set_cursor@column,c
  1590  00157A  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1591                           
  1592                           ;main.c: 185:         LCD_write_str(currentScreen->lineText[1]);
  1593  00157E  0100               	movlb	0	; () banked
  1594  001580  EE20 F004          	lfsr	2,4
  1595  001584  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1596  001586  26D9               	addwf	fsr2l,f,c
  1597  001588  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1598  00158A  22DA               	addwfc	fsr2h,f,c
  1599  00158C  CFDE F005          	movff	postinc2,LCD_write_str@str
  1600  001590  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1601  001594  ECFF  F010         	call	_LCD_write_str	;wreg free
  1602                           
  1603                           ;main.c: 186:         LCD_set_cursor(2,0);
  1604  001598  0E00               	movlw	0
  1605  00159A  6E06               	movwf	LCD_set_cursor@row+1,c
  1606  00159C  0E02               	movlw	2
  1607  00159E  6E05               	movwf	LCD_set_cursor@row,c
  1608  0015A0  0E00               	movlw	0
  1609  0015A2  6E08               	movwf	LCD_set_cursor@column+1,c
  1610  0015A4  0E00               	movlw	0
  1611  0015A6  6E07               	movwf	LCD_set_cursor@column,c
  1612  0015A8  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1613                           
  1614                           ;main.c: 187:         LCD_write_str(currentScreen->lineText[2]);
  1615  0015AC  0100               	movlb	0	; () banked
  1616  0015AE  EE20 F006          	lfsr	2,6
  1617  0015B2  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1618  0015B4  26D9               	addwf	fsr2l,f,c
  1619  0015B6  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1620  0015B8  22DA               	addwfc	fsr2h,f,c
  1621  0015BA  CFDE F005          	movff	postinc2,LCD_write_str@str
  1622  0015BE  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1623  0015C2  ECFF  F010         	call	_LCD_write_str	;wreg free
  1624                           
  1625                           ;main.c: 188:         LCD_set_cursor(3,0);
  1626  0015C6  0E00               	movlw	0
  1627  0015C8  6E06               	movwf	LCD_set_cursor@row+1,c
  1628  0015CA  0E03               	movlw	3
  1629  0015CC  6E05               	movwf	LCD_set_cursor@row,c
  1630  0015CE  0E00               	movlw	0
  1631  0015D0  6E08               	movwf	LCD_set_cursor@column+1,c
  1632  0015D2  0E00               	movlw	0
  1633  0015D4  6E07               	movwf	LCD_set_cursor@column,c
  1634  0015D6  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1635                           
  1636                           ;main.c: 189:         LCD_write_str(currentScreen->lineText[3]);
  1637  0015DA  0100               	movlb	0	; () banked
  1638  0015DC  EE20 F008          	lfsr	2,8
  1639  0015E0  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1640  0015E2  26D9               	addwf	fsr2l,f,c
  1641  0015E4  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1642  0015E6  22DA               	addwfc	fsr2h,f,c
  1643  0015E8  CFDE F005          	movff	postinc2,LCD_write_str@str
  1644  0015EC  CFDD F006          	movff	postdec2,LCD_write_str@str+1
  1645  0015F0  ECFF  F010         	call	_LCD_write_str	;wreg free
  1646                           
  1647                           ;main.c: 190:         LCD_set_cursor(currentScreen->cursorLine,15);
  1648  0015F4  0100               	movlb	0	; () banked
  1649  0015F6  EE20 F022          	lfsr	2,34
  1650  0015FA  51A8               	movf	printScreen@currentScreen& (0+255),w,b
  1651  0015FC  26D9               	addwf	fsr2l,f,c
  1652  0015FE  51A9               	movf	(printScreen@currentScreen+1)& (0+255),w,b
  1653  001600  22DA               	addwfc	fsr2h,f,c
  1654  001602  CFDE F005          	movff	postinc2,LCD_set_cursor@row
  1655  001606  CFDD F006          	movff	postdec2,LCD_set_cursor@row+1
  1656  00160A  0E00               	movlw	0
  1657  00160C  6E08               	movwf	LCD_set_cursor@column+1,c
  1658  00160E  0E0F               	movlw	15
  1659  001610  6E07               	movwf	LCD_set_cursor@column,c
  1660  001612  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1661                           
  1662                           ;main.c: 191:         LCD_write_str("*");
  1663  001616  0EAA               	movlw	low STR_21
  1664  001618  6E05               	movwf	LCD_write_str@str,c
  1665  00161A  0E10               	movlw	high STR_21
  1666  00161C  6E06               	movwf	LCD_write_str@str+1,c
  1667  00161E  ECFF  F010         	call	_LCD_write_str	;wreg free
  1668  001622  0012               	return		;funcret
  1669  001624                     __end_of_printScreen:
  1670                           	opt callstack 0
  1671                           
  1672 ;; *************** function _printDateTime *****************
  1673 ;; Defined at:
  1674 ;;		line 195 in file "main.c"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;  currentScree    2  121[COMRAM] PTR struct Screen
  1677 ;;		 -> main@currentScreen(48), 
  1678 ;; Auto vars:     Size  Location     Type
  1679 ;;  tempTime       20   20[BANK0 ] unsigned char [20]
  1680 ;;  tempDate       20    0[BANK0 ] unsigned char [20]
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Locals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Totals:         5      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;Total ram usage:       45 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:   12
  1697 ;; This function calls:
  1698 ;;		_LCD_set_cursor
  1699 ;;		_RTC_GetDateTime
  1700 ;;		_sprintf
  1701 ;; This function is called by:
  1702 ;;		_printScreen
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text2
  1707  001B2E                     __ptext2:
  1708                           	opt callstack 0
  1709  001B2E                     _printDateTime:
  1710                           	opt callstack 17
  1711                           
  1712                           ;main.c: 196:     char tempTime[20], tempDate[20];;main.c: 197:     LCD_set_cursor(0,0);
  1713                           
  1714                           ;incstack = 0
  1715  001B2E  0E00               	movlw	0
  1716  001B30  6E06               	movwf	LCD_set_cursor@row+1,c
  1717  001B32  0E00               	movlw	0
  1718  001B34  6E05               	movwf	LCD_set_cursor@row,c
  1719  001B36  0E00               	movlw	0
  1720  001B38  6E08               	movwf	LCD_set_cursor@column+1,c
  1721  001B3A  0E00               	movlw	0
  1722  001B3C  6E07               	movwf	LCD_set_cursor@column,c
  1723  001B3E  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1724                           
  1725                           ;main.c: 198:     RTC_GetDateTime(&rtc);
  1726  001B42  0EE8               	movlw	low _rtc
  1727  001B44  6E04               	movwf	RTC_GetDateTime@rtc,c
  1728  001B46  0E00               	movlw	high _rtc
  1729  001B48  6E05               	movwf	RTC_GetDateTime@rtc+1,c
  1730  001B4A  EC96  F00E         	call	_RTC_GetDateTime	;wreg free
  1731                           
  1732                           ;main.c: 199:     if(currentScreen->name == "HOME"){
  1733  001B4E  C07A  FFD9         	movff	printDateTime@currentScreen,fsr2l
  1734  001B52  C07B  FFDA         	movff	printDateTime@currentScreen+1,fsr2h
  1735  001B56  0EA0               	movlw	low STR_1
  1736  001B58  18DE               	xorwf	postinc2,w,c
  1737  001B5A  E155               	bnz	l2335
  1738  001B5C  0E10               	movlw	high STR_1
  1739  001B5E  18DE               	xorwf	postinc2,w,c
  1740  001B60  A4D8               	btfss	status,2,c
  1741  001B62  D051               	goto	l2335
  1742                           
  1743                           ;main.c: 200:         LCD_set_cursor(0,0);
  1744  001B64  0E00               	movlw	0
  1745  001B66  6E06               	movwf	LCD_set_cursor@row+1,c
  1746  001B68  0E00               	movlw	0
  1747  001B6A  6E05               	movwf	LCD_set_cursor@row,c
  1748  001B6C  0E00               	movlw	0
  1749  001B6E  6E08               	movwf	LCD_set_cursor@column+1,c
  1750  001B70  0E00               	movlw	0
  1751  001B72  6E07               	movwf	LCD_set_cursor@column,c
  1752  001B74  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  1753                           
  1754                           ;main.c: 201:         sprintf(tempTime, "%02x:%02x:%02x", rtc.hour, rtc.min,rtc.sec);
  1755  001B78  0E94               	movlw	low printDateTime@tempTime
  1756  001B7A  6E66               	movwf	sprintf@s,c
  1757  001B7C  0E00               	movlw	high printDateTime@tempTime
  1758  001B7E  6E67               	movwf	sprintf@s+1,c
  1759  001B80  0E29               	movlw	low STR_18
  1760  001B82  6E68               	movwf	sprintf@fmt,c
  1761  001B84  0E10               	movlw	high STR_18
  1762  001B86  6E69               	movwf	sprintf@fmt+1,c
  1763  001B88  C0EA  F06A         	movff	_rtc+2,?_sprintf+4
  1764  001B8C  6A6B               	clrf	?_sprintf+5,c
  1765  001B8E  C0E9  F06C         	movff	_rtc+1,?_sprintf+6
  1766  001B92  6A6D               	clrf	?_sprintf+7,c
  1767  001B94  C0E8  F06E         	movff	_rtc,?_sprintf+8
  1768  001B98  6A6F               	clrf	?_sprintf+9,c
  1769  001B9A  ECEF  F011         	call	_sprintf	;wreg free
  1770                           
  1771                           ;main.c: 202:         currentScreen->lineText[0] = tempTime;
  1772  001B9E  EE20 F002          	lfsr	2,2
  1773  001BA2  507A               	movf	printDateTime@currentScreen,w,c
  1774  001BA4  26D9               	addwf	fsr2l,f,c
  1775  001BA6  507B               	movf	printDateTime@currentScreen+1,w,c
  1776  001BA8  22DA               	addwfc	fsr2h,f,c
  1777  001BAA  0E94               	movlw	low printDateTime@tempTime
  1778  001BAC  6EDE               	movwf	postinc2,c
  1779  001BAE  0E00               	movlw	high printDateTime@tempTime
  1780  001BB0  6EDD               	movwf	postdec2,c
  1781                           
  1782                           ;main.c: 204:         sprintf(tempDate, "%02x/%02x/20%02x", (rtc.date)&0x0F+0x30, (rtc.m
      +                          onth)&0x0F+0x30,(rtc.year)&0x0F+0x30);
  1783  001BB2  0E80               	movlw	low printDateTime@tempDate
  1784  001BB4  6E66               	movwf	sprintf@s,c
  1785  001BB6  0E00               	movlw	high printDateTime@tempDate
  1786  001BB8  6E67               	movwf	sprintf@s+1,c
  1787  001BBA  0E18               	movlw	low STR_26
  1788  001BBC  6E68               	movwf	sprintf@fmt,c
  1789  001BBE  0E10               	movlw	high STR_26
  1790  001BC0  6E69               	movwf	sprintf@fmt+1,c
  1791  001BC2  C0EC  F07C         	movff	_rtc+4,??_printDateTime
  1792  001BC6  0E3F               	movlw	63
  1793  001BC8  167C               	andwf	??_printDateTime,f,c
  1794  001BCA  507C               	movf	??_printDateTime,w,c
  1795  001BCC  6E6A               	movwf	?_sprintf+4,c
  1796  001BCE  6A6B               	clrf	?_sprintf+5,c
  1797  001BD0  C0ED  F07D         	movff	_rtc+5,??_printDateTime+1
  1798  001BD4  0E3F               	movlw	63
  1799  001BD6  167D               	andwf	??_printDateTime+1,f,c
  1800  001BD8  507D               	movf	??_printDateTime+1,w,c
  1801  001BDA  6E6C               	movwf	?_sprintf+6,c
  1802  001BDC  6A6D               	clrf	?_sprintf+7,c
  1803  001BDE  C0EE  F07E         	movff	_rtc+6,??_printDateTime+2
  1804  001BE2  0E3F               	movlw	63
  1805  001BE4  167E               	andwf	??_printDateTime+2,f,c
  1806  001BE6  507E               	movf	??_printDateTime+2,w,c
  1807  001BE8  6E6E               	movwf	?_sprintf+8,c
  1808  001BEA  6A6F               	clrf	?_sprintf+9,c
  1809  001BEC  ECEF  F011         	call	_sprintf	;wreg free
  1810                           
  1811                           ;main.c: 205:         currentScreen->lineText[1] = tempDate;
  1812  001BF0  EE20 F004          	lfsr	2,4
  1813  001BF4  507A               	movf	printDateTime@currentScreen,w,c
  1814  001BF6  26D9               	addwf	fsr2l,f,c
  1815  001BF8  507B               	movf	printDateTime@currentScreen+1,w,c
  1816  001BFA  22DA               	addwfc	fsr2h,f,c
  1817  001BFC  0E80               	movlw	low printDateTime@tempDate
  1818  001BFE  6EDE               	movwf	postinc2,c
  1819  001C00  0E00               	movlw	high printDateTime@tempDate
  1820  001C02  6EDD               	movwf	postdec2,c
  1821                           
  1822                           ;main.c: 207:     }else if(currentScreen->name == "RUNNING"){
  1823  001C04  0012               	return	
  1824  001C06                     l2335:
  1825  001C06  C07A  FFD9         	movff	printDateTime@currentScreen,fsr2l
  1826  001C0A  C07B  FFDA         	movff	printDateTime@currentScreen+1,fsr2h
  1827  001C0E  0E78               	movlw	low STR_11
  1828  001C10  18DE               	xorwf	postinc2,w,c
  1829  001C12  E121               	bnz	l211
  1830  001C14  0E10               	movlw	high STR_11
  1831  001C16  18DE               	xorwf	postinc2,w,c
  1832  001C18  A4D8               	btfss	status,2,c
  1833  001C1A  0012               	return	
  1834                           
  1835                           ;main.c: 210:         sprintf(tempTime, "%02x:%02x:%02x", rtc.hour, rtc.min,rtc.sec);
  1836  001C1C  0E94               	movlw	low printDateTime@tempTime
  1837  001C1E  6E66               	movwf	sprintf@s,c
  1838  001C20  0E00               	movlw	high printDateTime@tempTime
  1839  001C22  6E67               	movwf	sprintf@s+1,c
  1840  001C24  0E29               	movlw	low STR_18
  1841  001C26  6E68               	movwf	sprintf@fmt,c
  1842  001C28  0E10               	movlw	high STR_18
  1843  001C2A  6E69               	movwf	sprintf@fmt+1,c
  1844  001C2C  C0EA  F06A         	movff	_rtc+2,?_sprintf+4
  1845  001C30  6A6B               	clrf	?_sprintf+5,c
  1846  001C32  C0E9  F06C         	movff	_rtc+1,?_sprintf+6
  1847  001C36  6A6D               	clrf	?_sprintf+7,c
  1848  001C38  C0E8  F06E         	movff	_rtc,?_sprintf+8
  1849  001C3C  6A6F               	clrf	?_sprintf+9,c
  1850  001C3E  ECEF  F011         	call	_sprintf	;wreg free
  1851                           
  1852                           ;main.c: 211:         currentScreen->lineText[2] = tempTime;
  1853  001C42  EE20 F006          	lfsr	2,6
  1854  001C46  507A               	movf	printDateTime@currentScreen,w,c
  1855  001C48  26D9               	addwf	fsr2l,f,c
  1856  001C4A  507B               	movf	printDateTime@currentScreen+1,w,c
  1857  001C4C  22DA               	addwfc	fsr2h,f,c
  1858  001C4E  0E94               	movlw	low printDateTime@tempTime
  1859  001C50  6EDE               	movwf	postinc2,c
  1860  001C52  0E00               	movlw	high printDateTime@tempTime
  1861  001C54  6EDD               	movwf	postdec2,c
  1862  001C56                     l211:
  1863  001C56  0012               	return		;funcret
  1864  001C58                     __end_of_printDateTime:
  1865                           	opt callstack 0
  1866                           
  1867 ;; *************** function _RTC_GetDateTime *****************
  1868 ;; Defined at:
  1869 ;;		line 104 in file "rtc.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  rtc             2    3[COMRAM] PTR struct .
  1872 ;;		 -> rtc(7), 
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;		None
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  1    wreg      void 
  1877 ;; Registers used:
  1878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1884 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1887 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1888 ;;Total ram usage:        2 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; Hardware stack levels required when called:    3
  1891 ;; This function calls:
  1892 ;;		_I2C_Master_Read
  1893 ;;		_I2C_Master_Start
  1894 ;;		_I2C_Master_Stop
  1895 ;;		_I2C_Master_Write
  1896 ;; This function is called by:
  1897 ;;		_printDateTime
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text3
  1902  001D2C                     __ptext3:
  1903                           	opt callstack 0
  1904  001D2C                     _RTC_GetDateTime:
  1905                           	opt callstack 25
  1906                           
  1907                           ;rtc.c: 104: void RTC_GetDateTime(rtc_t *rtc);rtc.c: 105: {;rtc.c: 106:     I2C_Master_S
      +                          tart();
  1908                           
  1909                           ;incstack = 0
  1910  001D2C  ECB4  F013         	call	_I2C_Master_Start	;wreg free
  1911                           
  1912                           ;rtc.c: 108:     I2C_Master_Write(0xD0u);
  1913  001D30  0E00               	movlw	0
  1914  001D32  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1915  001D34  0ED0               	movlw	208
  1916  001D36  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1917  001D38  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  1918                           
  1919                           ;rtc.c: 109:     I2C_Master_Write(0x00u);
  1920  001D3C  0E00               	movlw	0
  1921  001D3E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1922  001D40  0E00               	movlw	0
  1923  001D42  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1924  001D44  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  1925                           
  1926                           ;rtc.c: 111:     I2C_Master_Stop();
  1927  001D48  ECB0  F013         	call	_I2C_Master_Stop	;wreg free
  1928                           
  1929                           ;rtc.c: 113:     I2C_Master_Start();
  1930  001D4C  ECB4  F013         	call	_I2C_Master_Start	;wreg free
  1931                           
  1932                           ;rtc.c: 114:     I2C_Master_Write(0xD1u);
  1933  001D50  0E00               	movlw	0
  1934  001D52  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  1935  001D54  0ED1               	movlw	209
  1936  001D56  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  1937  001D58  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  1938                           
  1939                           ;rtc.c: 116:     rtc->sec = I2C_Master_Read(0);
  1940  001D5C  0E00               	movlw	0
  1941  001D5E  EC66  F013         	call	_I2C_Master_Read
  1942  001D62  C004  FFD9         	movff	RTC_GetDateTime@rtc,fsr2l
  1943  001D66  C005  FFDA         	movff	RTC_GetDateTime@rtc+1,fsr2h
  1944  001D6A  6EDF               	movwf	indf2,c
  1945                           
  1946                           ;rtc.c: 117:     rtc->min = I2C_Master_Read(0);
  1947  001D6C  EE20 F001          	lfsr	2,1
  1948  001D70  5004               	movf	RTC_GetDateTime@rtc,w,c
  1949  001D72  26D9               	addwf	fsr2l,f,c
  1950  001D74  5005               	movf	RTC_GetDateTime@rtc+1,w,c
  1951  001D76  22DA               	addwfc	fsr2h,f,c
  1952  001D78  0E00               	movlw	0
  1953  001D7A  EC66  F013         	call	_I2C_Master_Read
  1954  001D7E  6EDF               	movwf	indf2,c
  1955                           
  1956                           ;rtc.c: 118:     rtc->hour= I2C_Master_Read(0);
  1957  001D80  EE20 F002          	lfsr	2,2
  1958  001D84  5004               	movf	RTC_GetDateTime@rtc,w,c
  1959  001D86  26D9               	addwf	fsr2l,f,c
  1960  001D88  5005               	movf	RTC_GetDateTime@rtc+1,w,c
  1961  001D8A  22DA               	addwfc	fsr2h,f,c
  1962  001D8C  0E00               	movlw	0
  1963  001D8E  EC66  F013         	call	_I2C_Master_Read
  1964  001D92  6EDF               	movwf	indf2,c
  1965                           
  1966                           ;rtc.c: 119:     rtc->weekDay = I2C_Master_Read(0);
  1967  001D94  EE20 F003          	lfsr	2,3
  1968  001D98  5004               	movf	RTC_GetDateTime@rtc,w,c
  1969  001D9A  26D9               	addwf	fsr2l,f,c
  1970  001D9C  5005               	movf	RTC_GetDateTime@rtc+1,w,c
  1971  001D9E  22DA               	addwfc	fsr2h,f,c
  1972  001DA0  0E00               	movlw	0
  1973  001DA2  EC66  F013         	call	_I2C_Master_Read
  1974  001DA6  6EDF               	movwf	indf2,c
  1975                           
  1976                           ;rtc.c: 120:     rtc->date= I2C_Master_Read(0);
  1977  001DA8  EE20 F004          	lfsr	2,4
  1978  001DAC  5004               	movf	RTC_GetDateTime@rtc,w,c
  1979  001DAE  26D9               	addwf	fsr2l,f,c
  1980  001DB0  5005               	movf	RTC_GetDateTime@rtc+1,w,c
  1981  001DB2  22DA               	addwfc	fsr2h,f,c
  1982  001DB4  0E00               	movlw	0
  1983  001DB6  EC66  F013         	call	_I2C_Master_Read
  1984  001DBA  6EDF               	movwf	indf2,c
  1985                           
  1986                           ;rtc.c: 121:     rtc->month=I2C_Master_Read(0);
  1987  001DBC  EE20 F005          	lfsr	2,5
  1988  001DC0  5004               	movf	RTC_GetDateTime@rtc,w,c
  1989  001DC2  26D9               	addwf	fsr2l,f,c
  1990  001DC4  5005               	movf	RTC_GetDateTime@rtc+1,w,c
  1991  001DC6  22DA               	addwfc	fsr2h,f,c
  1992  001DC8  0E00               	movlw	0
  1993  001DCA  EC66  F013         	call	_I2C_Master_Read
  1994  001DCE  6EDF               	movwf	indf2,c
  1995                           
  1996                           ;rtc.c: 122:     rtc->year =I2C_Master_Read(1);
  1997  001DD0  EE20 F006          	lfsr	2,6
  1998  001DD4  5004               	movf	RTC_GetDateTime@rtc,w,c
  1999  001DD6  26D9               	addwf	fsr2l,f,c
  2000  001DD8  5005               	movf	RTC_GetDateTime@rtc+1,w,c
  2001  001DDA  22DA               	addwfc	fsr2h,f,c
  2002  001DDC  0E01               	movlw	1
  2003  001DDE  EC66  F013         	call	_I2C_Master_Read
  2004  001DE2  6EDF               	movwf	indf2,c
  2005                           
  2006                           ;rtc.c: 124:     I2C_Master_Stop();
  2007  001DE4  ECB0  F013         	call	_I2C_Master_Stop	;wreg free
  2008  001DE8  0012               	return		;funcret
  2009  001DEA                     __end_of_RTC_GetDateTime:
  2010                           	opt callstack 0
  2011                           
  2012 ;; *************** function _I2C_Master_Read *****************
  2013 ;; Defined at:
  2014 ;;		line 73 in file "I2C.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  ackBit          1    wreg     unsigned char 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  ackBit          1    1[COMRAM] unsigned char 
  2019 ;;  receivedByte    1    2[COMRAM] unsigned char 
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  1    wreg      unsigned char 
  2022 ;; Registers used:
  2023 ;;		wreg, status,2, status,0, cstack
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;Total ram usage:        2 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; Hardware stack levels required when called:    2
  2036 ;; This function calls:
  2037 ;;		_I2C_Master_Wait
  2038 ;; This function is called by:
  2039 ;;		_RTC_GetDateTime
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           	psect	text4
  2044  0026CC                     __ptext4:
  2045                           	opt callstack 0
  2046  0026CC                     _I2C_Master_Read:
  2047                           	opt callstack 25
  2048                           
  2049                           ;incstack = 0
  2050                           ;I2C_Master_Read@ackBit stored from wreg
  2051  0026CC  6E02               	movwf	I2C_Master_Read@ackBit,c
  2052                           
  2053                           ;I2C.c: 74:     I2C_Master_Wait();
  2054  0026CE  EC96  F013         	call	_I2C_Master_Wait	;wreg free
  2055                           
  2056                           ;I2C.c: 75:     SSPCON2bits.RCEN = 1;
  2057  0026D2  86C5               	bsf	4037,3,c	;volatile
  2058                           
  2059                           ;I2C.c: 77:     I2C_Master_Wait();
  2060  0026D4  EC96  F013         	call	_I2C_Master_Wait	;wreg free
  2061                           
  2062                           ;I2C.c: 80:     unsigned char receivedByte = SSPBUF;
  2063  0026D8  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  2064                           
  2065                           ;I2C.c: 82:     I2C_Master_Wait();
  2066  0026DC  EC96  F013         	call	_I2C_Master_Wait	;wreg free
  2067                           
  2068                           ;I2C.c: 83:     SSPCON2bits.ACKDT = ackBit;
  2069  0026E0  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  2070  0026E2  D002               	bra	u1605
  2071  0026E4  9AC5               	bcf	4037,5,c	;volatile
  2072  0026E6  D001               	bra	u1606
  2073  0026E8                     u1605:
  2074  0026E8  8AC5               	bsf	4037,5,c	;volatile
  2075  0026EA                     u1606:
  2076                           
  2077                           ;I2C.c: 84:     SSPCON2bits.ACKEN = 1;
  2078  0026EA  88C5               	bsf	4037,4,c	;volatile
  2079                           
  2080                           ;I2C.c: 86:     return receivedByte;
  2081  0026EC  5003               	movf	I2C_Master_Read@receivedByte,w,c
  2082  0026EE  0012               	return		;funcret
  2083  0026F0                     __end_of_I2C_Master_Read:
  2084                           	opt callstack 0
  2085                           
  2086 ;; *************** function _moveCursorUp *****************
  2087 ;; Defined at:
  2088 ;;		line 52 in file "main.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  currentScree    2    8[COMRAM] PTR struct Screen
  2091 ;;		 -> main@currentScreen(48), 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2103 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;Total ram usage:        6 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    6
  2110 ;; This function calls:
  2111 ;;		_LCD_set_cursor
  2112 ;;		_putch
  2113 ;; This function is called by:
  2114 ;;		_main
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text5
  2119  002070                     __ptext5:
  2120                           	opt callstack 0
  2121  002070                     _moveCursorUp:
  2122                           	opt callstack 24
  2123                           
  2124                           ;main.c: 53:     if(currentScreen->cursorLine != currentScreen->minCursor){
  2125                           
  2126                           ;incstack = 0
  2127  002070  EE20 F024          	lfsr	2,36
  2128  002074  5009               	movf	moveCursorUp@currentScreen,w,c
  2129  002076  26D9               	addwf	fsr2l,f,c
  2130  002078  500A               	movf	moveCursorUp@currentScreen+1,w,c
  2131  00207A  22DA               	addwfc	fsr2h,f,c
  2132  00207C  EE10 F022          	lfsr	1,34
  2133  002080  5009               	movf	moveCursorUp@currentScreen,w,c
  2134  002082  26E1               	addwf	fsr1l,f,c
  2135  002084  500A               	movf	moveCursorUp@currentScreen+1,w,c
  2136  002086  22E2               	addwfc	fsr1h,f,c
  2137  002088  50DE               	movf	postinc2,w,c
  2138  00208A  18E6               	xorwf	postinc1,w,c
  2139  00208C  E104               	bnz	u1740
  2140  00208E  50DE               	movf	postinc2,w,c
  2141  002090  18E6               	xorwf	postinc1,w,c
  2142  002092  B4D8               	btfsc	status,2,c
  2143  002094  0012               	return	
  2144  002096                     u1740:
  2145                           
  2146                           ;main.c: 54:         LCD_set_cursor(currentScreen->cursorLine,15);
  2147  002096  EE20 F022          	lfsr	2,34
  2148  00209A  5009               	movf	moveCursorUp@currentScreen,w,c
  2149  00209C  26D9               	addwf	fsr2l,f,c
  2150  00209E  500A               	movf	moveCursorUp@currentScreen+1,w,c
  2151  0020A0  22DA               	addwfc	fsr2h,f,c
  2152  0020A2  CFDE F005          	movff	postinc2,LCD_set_cursor@row
  2153  0020A6  CFDD F006          	movff	postdec2,LCD_set_cursor@row+1
  2154  0020AA  0E00               	movlw	0
  2155  0020AC  6E08               	movwf	LCD_set_cursor@column+1,c
  2156  0020AE  0E0F               	movlw	15
  2157  0020B0  6E07               	movwf	LCD_set_cursor@column,c
  2158  0020B2  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  2159                           
  2160                           ;main.c: 55:         putch(' ');
  2161  0020B6  0E20               	movlw	32
  2162  0020B8  ECA5  F013         	call	_putch
  2163                           
  2164                           ;main.c: 56:         currentScreen->cursorLine-=1;
  2165  0020BC  EE20 F022          	lfsr	2,34
  2166  0020C0  5009               	movf	moveCursorUp@currentScreen,w,c
  2167  0020C2  26D9               	addwf	fsr2l,f,c
  2168  0020C4  500A               	movf	moveCursorUp@currentScreen+1,w,c
  2169  0020C6  22DA               	addwfc	fsr2h,f,c
  2170  0020C8  06DE               	decf	postinc2,f,c
  2171  0020CA  0E00               	movlw	0
  2172  0020CC  5ADD               	subwfb	postdec2,f,c
  2173                           
  2174                           ;main.c: 57:         LCD_set_cursor(currentScreen->cursorLine,15);
  2175  0020CE  EE20 F022          	lfsr	2,34
  2176  0020D2  5009               	movf	moveCursorUp@currentScreen,w,c
  2177  0020D4  26D9               	addwf	fsr2l,f,c
  2178  0020D6  500A               	movf	moveCursorUp@currentScreen+1,w,c
  2179  0020D8  22DA               	addwfc	fsr2h,f,c
  2180  0020DA  CFDE F005          	movff	postinc2,LCD_set_cursor@row
  2181  0020DE  CFDD F006          	movff	postdec2,LCD_set_cursor@row+1
  2182  0020E2  0E00               	movlw	0
  2183  0020E4  6E08               	movwf	LCD_set_cursor@column+1,c
  2184  0020E6  0E0F               	movlw	15
  2185  0020E8  6E07               	movwf	LCD_set_cursor@column,c
  2186  0020EA  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  2187                           
  2188                           ;main.c: 58:         putch('*');
  2189  0020EE  0E2A               	movlw	42
  2190  0020F0  ECA5  F013         	call	_putch
  2191  0020F4  0012               	return		;funcret
  2192  0020F6                     __end_of_moveCursorUp:
  2193                           	opt callstack 0
  2194                           
  2195 ;; *************** function _moveCursorDown *****************
  2196 ;; Defined at:
  2197 ;;		line 61 in file "main.c"
  2198 ;; Parameters:    Size  Location     Type
  2199 ;;  currentScree    2    8[COMRAM] PTR struct Screen
  2200 ;;		 -> main@currentScreen(48), 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;		None
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;Total ram usage:        6 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    6
  2219 ;; This function calls:
  2220 ;;		_LCD_set_cursor
  2221 ;;		_putch
  2222 ;; This function is called by:
  2223 ;;		_main
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text6
  2228  0020F6                     __ptext6:
  2229                           	opt callstack 0
  2230  0020F6                     _moveCursorDown:
  2231                           	opt callstack 24
  2232                           
  2233                           ;main.c: 62:     if(currentScreen->cursorLine != currentScreen->maxCursor){
  2234                           
  2235                           ;incstack = 0
  2236  0020F6  EE20 F026          	lfsr	2,38
  2237  0020FA  5009               	movf	moveCursorDown@currentScreen,w,c
  2238  0020FC  26D9               	addwf	fsr2l,f,c
  2239  0020FE  500A               	movf	moveCursorDown@currentScreen+1,w,c
  2240  002100  22DA               	addwfc	fsr2h,f,c
  2241  002102  EE10 F022          	lfsr	1,34
  2242  002106  5009               	movf	moveCursorDown@currentScreen,w,c
  2243  002108  26E1               	addwf	fsr1l,f,c
  2244  00210A  500A               	movf	moveCursorDown@currentScreen+1,w,c
  2245  00210C  22E2               	addwfc	fsr1h,f,c
  2246  00210E  50DE               	movf	postinc2,w,c
  2247  002110  18E6               	xorwf	postinc1,w,c
  2248  002112  E104               	bnz	u1750
  2249  002114  50DE               	movf	postinc2,w,c
  2250  002116  18E6               	xorwf	postinc1,w,c
  2251  002118  B4D8               	btfsc	status,2,c
  2252  00211A  0012               	return	
  2253  00211C                     u1750:
  2254                           
  2255                           ;main.c: 63:         LCD_set_cursor(currentScreen->cursorLine,15);
  2256  00211C  EE20 F022          	lfsr	2,34
  2257  002120  5009               	movf	moveCursorDown@currentScreen,w,c
  2258  002122  26D9               	addwf	fsr2l,f,c
  2259  002124  500A               	movf	moveCursorDown@currentScreen+1,w,c
  2260  002126  22DA               	addwfc	fsr2h,f,c
  2261  002128  CFDE F005          	movff	postinc2,LCD_set_cursor@row
  2262  00212C  CFDD F006          	movff	postdec2,LCD_set_cursor@row+1
  2263  002130  0E00               	movlw	0
  2264  002132  6E08               	movwf	LCD_set_cursor@column+1,c
  2265  002134  0E0F               	movlw	15
  2266  002136  6E07               	movwf	LCD_set_cursor@column,c
  2267  002138  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  2268                           
  2269                           ;main.c: 64:         putch(' ');
  2270  00213C  0E20               	movlw	32
  2271  00213E  ECA5  F013         	call	_putch
  2272                           
  2273                           ;main.c: 65:         currentScreen->cursorLine+=1;
  2274  002142  EE20 F022          	lfsr	2,34
  2275  002146  5009               	movf	moveCursorDown@currentScreen,w,c
  2276  002148  26D9               	addwf	fsr2l,f,c
  2277  00214A  500A               	movf	moveCursorDown@currentScreen+1,w,c
  2278  00214C  22DA               	addwfc	fsr2h,f,c
  2279  00214E  2ADE               	incf	postinc2,f,c
  2280  002150  0E00               	movlw	0
  2281  002152  22DD               	addwfc	postdec2,f,c
  2282                           
  2283                           ;main.c: 66:         LCD_set_cursor((*currentScreen).cursorLine,15);
  2284  002154  EE20 F022          	lfsr	2,34
  2285  002158  5009               	movf	moveCursorDown@currentScreen,w,c
  2286  00215A  26D9               	addwf	fsr2l,f,c
  2287  00215C  500A               	movf	moveCursorDown@currentScreen+1,w,c
  2288  00215E  22DA               	addwfc	fsr2h,f,c
  2289  002160  CFDE F005          	movff	postinc2,LCD_set_cursor@row
  2290  002164  CFDD F006          	movff	postdec2,LCD_set_cursor@row+1
  2291  002168  0E00               	movlw	0
  2292  00216A  6E08               	movwf	LCD_set_cursor@column+1,c
  2293  00216C  0E0F               	movlw	15
  2294  00216E  6E07               	movwf	LCD_set_cursor@column,c
  2295  002170  ECC8  F011         	call	_LCD_set_cursor	;wreg free
  2296                           
  2297                           ;main.c: 67:         putch('*');
  2298  002174  0E2A               	movlw	42
  2299  002176  ECA5  F013         	call	_putch
  2300  00217A  0012               	return		;funcret
  2301  00217C                     __end_of_moveCursorDown:
  2302                           	opt callstack 0
  2303                           
  2304 ;; *************** function _LCD_set_cursor *****************
  2305 ;; Defined at:
  2306 ;;		line 106 in file "lcd.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  row             2    4[COMRAM] unsigned int 
  2309 ;;  column          2    6[COMRAM] unsigned int 
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;		None
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      void 
  2314 ;; Registers used:
  2315 ;;		wreg, status,2, status,0, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2324 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;Total ram usage:        4 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    5
  2328 ;; This function calls:
  2329 ;;		_lcdInst
  2330 ;; This function is called by:
  2331 ;;		_moveCursorUp
  2332 ;;		_moveCursorDown
  2333 ;;		_printScreen
  2334 ;;		_printDateTime
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text7
  2339  002390                     __ptext7:
  2340                           	opt callstack 0
  2341  002390                     _LCD_set_cursor:
  2342                           	opt callstack 23
  2343                           
  2344                           ;lcd.c: 108:     row=row%4;
  2345                           
  2346                           ;incstack = 0
  2347  002390  0E03               	movlw	3
  2348  002392  1405               	andwf	LCD_set_cursor@row,w,c
  2349  002394  6E05               	movwf	LCD_set_cursor@row,c
  2350  002396  6A06               	clrf	LCD_set_cursor@row+1,c
  2351                           
  2352                           ;lcd.c: 109:     column = column %16;
  2353  002398  0E0F               	movlw	15
  2354  00239A  1407               	andwf	LCD_set_cursor@column,w,c
  2355  00239C  6E07               	movwf	LCD_set_cursor@column,c
  2356  00239E  6A08               	clrf	LCD_set_cursor@column+1,c
  2357                           
  2358                           ;lcd.c: 110:     if(row==1){
  2359  0023A0  0405               	decf	LCD_set_cursor@row,w,c
  2360  0023A2  1006               	iorwf	LCD_set_cursor@row+1,w,c
  2361  0023A4  A4D8               	btfss	status,2,c
  2362  0023A6  D004               	goto	l51
  2363                           
  2364                           ;lcd.c: 111:         column +=LCD_LINE2_ADDR;
  2365  0023A8  0E40               	movlw	64
  2366  0023AA  2607               	addwf	LCD_set_cursor@column,f,c
  2367  0023AC  0E00               	movlw	0
  2368  0023AE  2208               	addwfc	LCD_set_cursor@column+1,f,c
  2369  0023B0                     l51:
  2370                           
  2371                           ;lcd.c: 113:     if(row==2){
  2372  0023B0  0E02               	movlw	2
  2373  0023B2  1805               	xorwf	LCD_set_cursor@row,w,c
  2374  0023B4  1006               	iorwf	LCD_set_cursor@row+1,w,c
  2375  0023B6  A4D8               	btfss	status,2,c
  2376  0023B8  D004               	goto	l52
  2377                           
  2378                           ;lcd.c: 114:         column +=LCD_LINE3_ADDR;
  2379  0023BA  0E10               	movlw	16
  2380  0023BC  2607               	addwf	LCD_set_cursor@column,f,c
  2381  0023BE  0E00               	movlw	0
  2382  0023C0  2208               	addwfc	LCD_set_cursor@column+1,f,c
  2383  0023C2                     l52:
  2384                           
  2385                           ;lcd.c: 116:     if(row==3){
  2386  0023C2  0E03               	movlw	3
  2387  0023C4  1805               	xorwf	LCD_set_cursor@row,w,c
  2388  0023C6  1006               	iorwf	LCD_set_cursor@row+1,w,c
  2389  0023C8  A4D8               	btfss	status,2,c
  2390  0023CA  D004               	goto	l2279
  2391                           
  2392                           ;lcd.c: 117:         column +=LCD_LINE4_ADDR;
  2393  0023CC  0E50               	movlw	80
  2394  0023CE  2607               	addwf	LCD_set_cursor@column,f,c
  2395  0023D0  0E00               	movlw	0
  2396  0023D2  2208               	addwfc	LCD_set_cursor@column+1,f,c
  2397  0023D4                     l2279:
  2398                           
  2399                           ;lcd.c: 120:     { lcdInst(0x80 | column);};
  2400  0023D4  5007               	movf	LCD_set_cursor@column,w,c
  2401  0023D6  0980               	iorlw	128
  2402  0023D8  EC9F  F013         	call	_lcdInst
  2403  0023DC  0012               	return		;funcret
  2404  0023DE                     __end_of_LCD_set_cursor:
  2405                           	opt callstack 0
  2406                           
  2407 ;; *************** function _initLCD *****************
  2408 ;; Defined at:
  2409 ;;		line 67 in file "lcd.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;		None
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      void 
  2416 ;; Registers used:
  2417 ;;		wreg, status,2, status,0, cstack
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2427 ;;Total ram usage:        1 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    5
  2430 ;; This function calls:
  2431 ;;		_lcdInst
  2432 ;;		_send_byte
  2433 ;;		_send_nibble
  2434 ;; This function is called by:
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text8
  2440  002274                     __ptext8:
  2441                           	opt callstack 0
  2442  002274                     _initLCD:
  2443                           	opt callstack 25
  2444                           
  2445                           ;lcd.c: 68:     _delay((unsigned long)((15)*(10000000/4000.0)));
  2446                           
  2447                           ;incstack = 0
  2448  002274  0E31               	movlw	49
  2449  002276  6E05               	movwf	??_initLCD& (0+255),c
  2450  002278  0EB2               	movlw	178
  2451  00227A                     u1997:
  2452  00227A  2EE8               	decfsz	wreg,f,c
  2453  00227C  D7FE               	bra	u1997
  2454  00227E  2E05               	decfsz	??_initLCD& (0+255),f,c
  2455  002280  D7FC               	bra	u1997
  2456  002282  D000               	nop2	
  2457                           
  2458                           ;lcd.c: 70:     LATDbits.LATD2 = 0;
  2459  002284  948C               	bcf	3980,2,c	;volatile
  2460                           
  2461                           ;lcd.c: 72:     send_nibble(0b0011);
  2462  002286  0E03               	movlw	3
  2463  002288  EC78  F013         	call	_send_nibble
  2464                           
  2465                           ;lcd.c: 73:     _delay((unsigned long)((5)*(10000000/4000.0)));
  2466  00228C  0E11               	movlw	17
  2467  00228E  6E05               	movwf	??_initLCD& (0+255),c
  2468  002290  0E3A               	movlw	58
  2469  002292                     u2007:
  2470  002292  2EE8               	decfsz	wreg,f,c
  2471  002294  D7FE               	bra	u2007
  2472  002296  2E05               	decfsz	??_initLCD& (0+255),f,c
  2473  002298  D7FC               	bra	u2007
  2474  00229A  D000               	nop2	
  2475                           
  2476                           ;lcd.c: 74:     send_nibble(0b0011);
  2477  00229C  0E03               	movlw	3
  2478  00229E  EC78  F013         	call	_send_nibble
  2479                           
  2480                           ;lcd.c: 75:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  2481  0022A2  0E7D               	movlw	125
  2482  0022A4                     u2017:
  2483  0022A4  2EE8               	decfsz	wreg,f,c
  2484  0022A6  D7FE               	bra	u2017
  2485                           
  2486                           ;lcd.c: 76:     send_byte(0b00110010);
  2487  0022A8  0E32               	movlw	50
  2488  0022AA  EC8D  F013         	call	_send_byte
  2489                           
  2490                           ;lcd.c: 78:     send_byte(0b00101000);
  2491  0022AE  0E28               	movlw	40
  2492  0022B0  EC8D  F013         	call	_send_byte
  2493                           
  2494                           ;lcd.c: 79:     send_byte(0b00001000);
  2495  0022B4  0E08               	movlw	8
  2496  0022B6  EC8D  F013         	call	_send_byte
  2497                           
  2498                           ;lcd.c: 80:     send_byte(0b00000001);
  2499  0022BA  0E01               	movlw	1
  2500  0022BC  EC8D  F013         	call	_send_byte
  2501                           
  2502                           ;lcd.c: 81:     _delay((unsigned long)((5)*(10000000/4000.0)));
  2503  0022C0  0E11               	movlw	17
  2504  0022C2  6E05               	movwf	??_initLCD& (0+255),c
  2505  0022C4  0E3A               	movlw	58
  2506  0022C6                     u2027:
  2507  0022C6  2EE8               	decfsz	wreg,f,c
  2508  0022C8  D7FE               	bra	u2027
  2509  0022CA  2E05               	decfsz	??_initLCD& (0+255),f,c
  2510  0022CC  D7FC               	bra	u2027
  2511  0022CE  D000               	nop2	
  2512                           
  2513                           ;lcd.c: 82:     send_byte(0b00000110);
  2514  0022D0  0E06               	movlw	6
  2515  0022D2  EC8D  F013         	call	_send_byte
  2516                           
  2517                           ;lcd.c: 85:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  2518  0022D6  0E0F               	movlw	15
  2519  0022D8  EC9F  F013         	call	_lcdInst
  2520  0022DC  0012               	return		;funcret
  2521  0022DE                     __end_of_initLCD:
  2522                           	opt callstack 0
  2523                           
  2524 ;; *************** function _lcdInst *****************
  2525 ;; Defined at:
  2526 ;;		line 62 in file "lcd.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;  data            1    wreg     unsigned char 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  data            1    3[COMRAM] unsigned char 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0, cstack
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2541 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;Total ram usage:        1 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    4
  2547 ;; This function calls:
  2548 ;;		_send_byte
  2549 ;; This function is called by:
  2550 ;;		_initLCD
  2551 ;;		_LCD_set_cursor
  2552 ;;		_main
  2553 ;;		_lcd_shift_cursor
  2554 ;;		_lcd_shift_display
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text9
  2559  00273E                     __ptext9:
  2560                           	opt callstack 0
  2561  00273E                     _lcdInst:
  2562                           	opt callstack 23
  2563                           
  2564                           ;incstack = 0
  2565                           ;lcdInst@data stored from wreg
  2566  00273E  6E04               	movwf	lcdInst@data,c
  2567                           
  2568                           ;lcd.c: 63:     LATDbits.LATD2 = 0;
  2569  002740  948C               	bcf	3980,2,c	;volatile
  2570                           
  2571                           ;lcd.c: 64:     send_byte(data);
  2572  002742  5004               	movf	lcdInst@data,w,c
  2573  002744  EC8D  F013         	call	_send_byte
  2574  002748  0012               	return		;funcret
  2575  00274A                     __end_of_lcdInst:
  2576                           	opt callstack 0
  2577                           
  2578 ;; *************** function _enterKey *****************
  2579 ;; Defined at:
  2580 ;;		line 70 in file "main.c"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;  currentScree    2  121[COMRAM] PTR struct Screen
  2583 ;;		 -> main@currentScreen(48), 
  2584 ;; Auto vars:     Size  Location     Type
  2585 ;;  temp           20    0[BANK0 ] unsigned char [20]
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  1    wreg      void 
  2588 ;; Registers used:
  2589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2599 ;;Total ram usage:       24 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:   12
  2602 ;; This function calls:
  2603 ;;		_LCD_write_str
  2604 ;;		_sprintf
  2605 ;; This function is called by:
  2606 ;;		_main
  2607 ;; This function uses a non-reentrant model
  2608 ;;
  2609                           
  2610                           	psect	text10
  2611  001DEA                     __ptext10:
  2612                           	opt callstack 0
  2613  001DEA                     _enterKey:
  2614                           	opt callstack 18
  2615                           
  2616                           ;main.c: 71:     if(currentScreen->name == "HOME"){
  2617                           
  2618                           ;incstack = 0
  2619  001DEA  C07A  FFD9         	movff	enterKey@currentScreen,fsr2l
  2620  001DEE  C07B  FFDA         	movff	enterKey@currentScreen+1,fsr2h
  2621  001DF2  0EA0               	movlw	low STR_1
  2622  001DF4  18DE               	xorwf	postinc2,w,c
  2623  001DF6  E156               	bnz	l181
  2624  001DF8  0E10               	movlw	high STR_1
  2625  001DFA  18DE               	xorwf	postinc2,w,c
  2626  001DFC  A4D8               	btfss	status,2,c
  2627  001DFE  0012               	return	
  2628  001E00  D03B               	goto	l2433
  2629  001E02                     l2421:
  2630                           
  2631                           ;main.c: 74:                 *currentScreen = runningOperation;
  2632  001E02  EE21  F000         	lfsr	2,_runningOperation
  2633  001E06  C07A  FFE1         	movff	enterKey@currentScreen,fsr1l
  2634  001E0A  C07B  FFE2         	movff	enterKey@currentScreen+1,fsr1h
  2635  001E0E  0E2F               	movlw	47
  2636  001E10                     u1771:
  2637  001E10  CFDB FFE3          	movff	plusw2,plusw1
  2638  001E14  06E8               	decf	wreg,f,c
  2639  001E16  E2FC               	bc	u1771
  2640                           
  2641                           ;main.c: 75:                 LCD_write_str("ING HERE");
  2642  001E18  0E6F               	movlw	low STR_17
  2643  001E1A  6E05               	movwf	LCD_write_str@str,c
  2644  001E1C  0E10               	movlw	high STR_17
  2645  001E1E  6E06               	movwf	LCD_write_str@str+1,c
  2646  001E20  ECFF  F010         	call	_LCD_write_str	;wreg free
  2647                           
  2648                           ;main.c: 76:                 unsigned char temp[20];;main.c: 77:                 sprintf
      +                          (temp, "%02x:%02x:%02x", rtc.hour, rtc.min,rtc.sec);
  2649  001E24  0E80               	movlw	low enterKey@temp
  2650  001E26  6E66               	movwf	sprintf@s,c
  2651  001E28  0E00               	movlw	high enterKey@temp
  2652  001E2A  6E67               	movwf	sprintf@s+1,c
  2653  001E2C  0E29               	movlw	low STR_18
  2654  001E2E  6E68               	movwf	sprintf@fmt,c
  2655  001E30  0E10               	movlw	high STR_18
  2656  001E32  6E69               	movwf	sprintf@fmt+1,c
  2657  001E34  C0EA  F06A         	movff	_rtc+2,?_sprintf+4
  2658  001E38  6A6B               	clrf	?_sprintf+5,c
  2659  001E3A  C0E9  F06C         	movff	_rtc+1,?_sprintf+6
  2660  001E3E  6A6D               	clrf	?_sprintf+7,c
  2661  001E40  C0E8  F06E         	movff	_rtc,?_sprintf+8
  2662  001E44  6A6F               	clrf	?_sprintf+9,c
  2663  001E46  ECEF  F011         	call	_sprintf	;wreg free
  2664                           
  2665                           ;main.c: 78:                 currentScreen->lineText[1] = temp;
  2666  001E4A  EE20 F004          	lfsr	2,4
  2667  001E4E  507A               	movf	enterKey@currentScreen,w,c
  2668  001E50  26D9               	addwf	fsr2l,f,c
  2669  001E52  507B               	movf	enterKey@currentScreen+1,w,c
  2670  001E54  22DA               	addwfc	fsr2h,f,c
  2671  001E56  0E80               	movlw	low enterKey@temp
  2672  001E58  6EDE               	movwf	postinc2,c
  2673  001E5A  0E00               	movlw	high enterKey@temp
  2674  001E5C  6EDD               	movwf	postdec2,c
  2675                           
  2676                           ;main.c: 79:                 break;
  2677  001E5E  0012               	return	
  2678  001E60                     l2429:
  2679                           
  2680                           ;main.c: 81:                 *currentScreen = logList;
  2681  001E60  EE21  F030         	lfsr	2,_logList
  2682  001E64  C07A  FFE1         	movff	enterKey@currentScreen,fsr1l
  2683  001E68  C07B  FFE2         	movff	enterKey@currentScreen+1,fsr1h
  2684  001E6C  0E2F               	movlw	47
  2685  001E6E                     u1781:
  2686  001E6E  CFDB FFE3          	movff	plusw2,plusw1
  2687  001E72  06E8               	decf	wreg,f,c
  2688  001E74  E2FC               	bc	u1781
  2689                           
  2690                           ;main.c: 82:                 break;
  2691  001E76  0012               	return	
  2692  001E78                     l2433:
  2693  001E78  EE20 F022          	lfsr	2,34
  2694  001E7C  507A               	movf	enterKey@currentScreen,w,c
  2695  001E7E  26D9               	addwf	fsr2l,f,c
  2696  001E80  507B               	movf	enterKey@currentScreen+1,w,c
  2697  001E82  22DA               	addwfc	fsr2h,f,c
  2698  001E84  CFDE F07C          	movff	postinc2,??_enterKey
  2699  001E88  CFDD F07D          	movff	postdec2,??_enterKey+1
  2700                           
  2701                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2702                           ; Switch size 1, requested type "simple"
  2703                           ; Number of cases is 1, Range of values is 0 to 0
  2704                           ; switch strategies available:
  2705                           ; Name         Instructions Cycles
  2706                           ; simple_byte            4     3 (average)
  2707                           ;	Chosen strategy is simple_byte
  2708  001E8C  507D               	movf	??_enterKey+1,w,c
  2709  001E8E  0A00               	xorlw	0	; case 0
  2710  001E90  A4D8               	btfss	status,2,c
  2711  001E92  0012               	return	
  2712                           
  2713                           ; Switch size 1, requested type "simple"
  2714                           ; Number of cases is 2, Range of values is 2 to 3
  2715                           ; switch strategies available:
  2716                           ; Name         Instructions Cycles
  2717                           ; simple_byte            7     4 (average)
  2718                           ;	Chosen strategy is simple_byte
  2719  001E94  507C               	movf	??_enterKey,w,c
  2720  001E96  0A02               	xorlw	2	; case 2
  2721  001E98  B4D8               	btfsc	status,2,c
  2722  001E9A  D7B3               	goto	l2421
  2723  001E9C  0A01               	xorlw	1	; case 3
  2724  001E9E  A4D8               	btfss	status,2,c
  2725  001EA0  0012               	return	
  2726  001EA2  D7DE               	goto	l2429
  2727  001EA4                     l181:
  2728  001EA4  0012               	return		;funcret
  2729  001EA6                     __end_of_enterKey:
  2730                           	opt callstack 0
  2731                           
  2732 ;; *************** function _sprintf *****************
  2733 ;; Defined at:
  2734 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  s               2  101[COMRAM] PTR unsigned char 
  2737 ;;		 -> printDateTime@tempDate(20), printDateTime@tempTime(20), enterKey@temp(20), 
  2738 ;;  fmt             2  103[COMRAM] PTR const unsigned char 
  2739 ;;		 -> STR_28(15), STR_26(17), STR_25(15), STR_18(15), 
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  f               6  115[COMRAM] struct _IO_FILE
  2742 ;;  ap              2  113[COMRAM] PTR void [1]
  2743 ;;		 -> ?_sprintf(2), 
  2744 ;;  ret             2    0        int 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  2  101[COMRAM] int 
  2747 ;; Registers used:
  2748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2754 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2755 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;Total ram usage:       20 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:   11
  2761 ;; This function calls:
  2762 ;;		_vfprintf
  2763 ;; This function is called by:
  2764 ;;		_enterKey
  2765 ;;		_printDateTime
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text11
  2770  0023DE                     __ptext11:
  2771                           	opt callstack 0
  2772  0023DE                     _sprintf:
  2773                           	opt callstack 17
  2774                           
  2775                           ;incstack = 0
  2776  0023DE  0E6A               	movlw	low (?_sprintf+4)
  2777  0023E0  6E72               	movwf	sprintf@ap,c
  2778  0023E2  0E00               	movlw	high (?_sprintf+4)
  2779  0023E4  6E73               	movwf	sprintf@ap+1,c
  2780  0023E6  C066  F074         	movff	sprintf@s,sprintf@f
  2781  0023EA  C067  F075         	movff	sprintf@s+1,sprintf@f+1
  2782  0023EE  0E00               	movlw	0
  2783  0023F0  6E77               	movwf	sprintf@f+3,c
  2784  0023F2  0E00               	movlw	0
  2785  0023F4  6E76               	movwf	sprintf@f+2,c
  2786  0023F6  0E00               	movlw	0
  2787  0023F8  6E79               	movwf	sprintf@f+5,c
  2788  0023FA  0E00               	movlw	0
  2789  0023FC  6E78               	movwf	sprintf@f+4,c
  2790  0023FE  0E74               	movlw	low sprintf@f
  2791  002400  6E5E               	movwf	vfprintf@fp,c
  2792  002402  0E00               	movlw	high sprintf@f
  2793  002404  6E5F               	movwf	vfprintf@fp+1,c
  2794  002406  C068  F060         	movff	sprintf@fmt,vfprintf@fmt
  2795  00240A  C069  F061         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2796  00240E  0E72               	movlw	low sprintf@ap
  2797  002410  6E62               	movwf	vfprintf@ap,c
  2798  002412  0E00               	movlw	high sprintf@ap
  2799  002414  6E63               	movwf	vfprintf@ap+1,c
  2800  002416  EC9D  F011         	call	_vfprintf	;wreg free
  2801  00241A  5076               	movf	sprintf@f+2,w,c
  2802  00241C  2466               	addwf	sprintf@s,w,c
  2803  00241E  6ED9               	movwf	fsr2l,c
  2804  002420  5077               	movf	sprintf@f+3,w,c
  2805  002422  2067               	addwfc	sprintf@s+1,w,c
  2806  002424  6EDA               	movwf	fsr2h,c
  2807  002426  0E00               	movlw	0
  2808  002428  6EDF               	movwf	indf2,c
  2809  00242A  0012               	return		;funcret
  2810  00242C                     __end_of_sprintf:
  2811                           	opt callstack 0
  2812                           
  2813 ;; *************** function _vfprintf *****************
  2814 ;; Defined at:
  2815 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  fp              2   93[COMRAM] PTR struct _IO_FILE
  2818 ;;		 -> sprintf@f(6), 
  2819 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
  2820 ;;		 -> STR_28(15), STR_26(17), STR_25(15), STR_18(15), 
  2821 ;;  ap              2   97[COMRAM] PTR PTR void 
  2822 ;;		 -> sprintf@ap(2), 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  cfmt            2   99[COMRAM] PTR unsigned char 
  2825 ;;		 -> STR_28(15), STR_26(17), STR_25(15), STR_18(15), 
  2826 ;; Return value:  Size  Location     Type
  2827 ;;                  2   93[COMRAM] int 
  2828 ;; Registers used:
  2829 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2830 ;; Tracked objects:
  2831 ;;		On entry : 0/0
  2832 ;;		On exit  : 0/0
  2833 ;;		Unchanged: 0/0
  2834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2835 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;Total ram usage:        8 bytes
  2840 ;; Hardware stack levels used:    1
  2841 ;; Hardware stack levels required when called:   10
  2842 ;; This function calls:
  2843 ;;		_vfpfcnvrt
  2844 ;; This function is called by:
  2845 ;;		_sprintf
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           	psect	text12
  2850  00233A                     __ptext12:
  2851                           	opt callstack 0
  2852  00233A                     _vfprintf:
  2853                           	opt callstack 17
  2854                           
  2855                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  2856                           
  2857                           ;incstack = 0
  2858  00233A  C060  F064         	movff	vfprintf@fmt,vfprintf@cfmt
  2859  00233E  C061  F065         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2860                           
  2861                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  2862  002342  0E00               	movlw	0
  2863  002344  0100               	movlb	0	; () banked
  2864  002346  6FE0               	movwf	(_nout+1)& (0+255),b
  2865  002348  0E00               	movlw	0
  2866  00234A  6FDF               	movwf	_nout& (0+255),b
  2867                           
  2868                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  2869  00234C  D013               	goto	l2269
  2870  00234E                     l2267:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  2874  00234E  C05E  F047         	movff	vfprintf@fp,vfpfcnvrt@fp
  2875  002352  C05F  F048         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2876  002356  0E64               	movlw	low vfprintf@cfmt
  2877  002358  6E49               	movwf	vfpfcnvrt@fmt,c
  2878  00235A  0E00               	movlw	high vfprintf@cfmt
  2879  00235C  6E4A               	movwf	vfpfcnvrt@fmt+1,c
  2880  00235E  C062  F04B         	movff	vfprintf@ap,vfpfcnvrt@ap
  2881  002362  C063  F04C         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2882  002366  EC57  F008         	call	_vfpfcnvrt	;wreg free
  2883  00236A  5047               	movf	?_vfpfcnvrt,w,c
  2884  00236C  0100               	movlb	0	; () banked
  2885  00236E  27DF               	addwf	_nout& (0+255),f,b
  2886  002370  5048               	movf	?_vfpfcnvrt+1,w,c
  2887  002372  23E0               	addwfc	(_nout+1)& (0+255),f,b
  2888  002374                     l2269:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  2892  002374  C064  FFF6         	movff	vfprintf@cfmt,tblptrl
  2893  002378  C065  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2894  00237C                     	if	0	;tblptru may be non-zero
  2895  00237C                     	endif
  2896  00237C                     	if	0	;tblptru may be non-zero
  2897  00237C                     	endif
  2898  00237C  0008               	tblrd		*
  2899  00237E  50F5               	movf	tablat,w,c
  2900  002380  0900               	iorlw	0
  2901  002382  A4D8               	btfss	status,2,c
  2902  002384  D7E4               	goto	l2267
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  2906  002386  C0DF  F05E         	movff	_nout,?_vfprintf
  2907  00238A  C0E0  F05F         	movff	_nout+1,?_vfprintf+1
  2908                           
  2909                           ; BSR set to: 0
  2910  00238E  0012               	return		;funcret
  2911  002390                     __end_of_vfprintf:
  2912                           	opt callstack 0
  2913                           
  2914 ;; *************** function _vfpfcnvrt *****************
  2915 ;; Defined at:
  2916 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  2917 ;; Parameters:    Size  Location     Type
  2918 ;;  fp              2   70[COMRAM] PTR struct _IO_FILE
  2919 ;;		 -> sprintf@f(6), 
  2920 ;;  fmt             2   72[COMRAM] PTR PTR unsigned char 
  2921 ;;		 -> vfprintf@cfmt(2), 
  2922 ;;  ap              2   74[COMRAM] PTR PTR void 
  2923 ;;		 -> sprintf@ap(2), 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  llu             8   80[COMRAM] unsigned long long 
  2926 ;;  ll              8    0        long long 
  2927 ;;  f               4    0        long long 
  2928 ;;  vp              3    0        PTR void 
  2929 ;;  ct              3    0        unsigned char [3]
  2930 ;;  cp              3    0        PTR unsigned char 
  2931 ;;  done            2   88[COMRAM] int 
  2932 ;;  i               2    0        int 
  2933 ;;  c               1   92[COMRAM] unsigned char 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  2   70[COMRAM] int 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2943 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;Total ram usage:       23 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:    9
  2950 ;; This function calls:
  2951 ;;		_atoi
  2952 ;;		_fputc
  2953 ;;		_isdigit
  2954 ;;		_xtoa
  2955 ;; This function is called by:
  2956 ;;		_vfprintf
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text13
  2961  0010AE                     __ptext13:
  2962                           	opt callstack 0
  2963  0010AE                     _vfpfcnvrt:
  2964                           	opt callstack 17
  2965                           
  2966                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;incstack = 0
  2970  0010AE  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2971  0010B2  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2972  0010B6  CFDE FFF6          	movff	postinc2,tblptrl
  2973  0010BA  CFDD FFF7          	movff	postdec2,tblptrh
  2974  0010BE                     	if	0	;tblptru may be non-zero
  2975  0010BE                     	endif
  2976  0010BE                     	if	0	;tblptru may be non-zero
  2977  0010BE                     	endif
  2978  0010BE  0008               	tblrd		*
  2979  0010C0  50F5               	movf	tablat,w,c
  2980  0010C2  0A25               	xorlw	37
  2981  0010C4  A4D8               	btfss	status,2,c
  2982  0010C6  D158               	goto	l2219
  2983                           
  2984                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  2985  0010C8  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2986  0010CC  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2987  0010D0  2ADE               	incf	postinc2,f,c
  2988  0010D2  0E00               	movlw	0
  2989  0010D4  22DD               	addwfc	postdec2,f,c
  2990                           
  2991                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  2992  0010D6  0E00               	movlw	0
  2993  0010D8  0100               	movlb	0	; () banked
  2994  0010DA  6FE2               	movwf	(_width+1)& (0+255),b
  2995  0010DC  0E00               	movlw	0
  2996  0010DE  6FE1               	movwf	_width& (0+255),b
  2997  0010E0  C0E1  F0E5         	movff	_width,_flags
  2998  0010E4  C0E2  F0E6         	movff	_width+1,_flags+1
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  3002  0010E8  69E3               	setf	_prec& (0+255),b
  3003  0010EA  69E4               	setf	(_prec+1)& (0+255),b
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 688:       
      +                            done = 0;
  3007  0010EC  0E00               	movlw	0
  3008  0010EE  6E5A               	movwf	vfpfcnvrt@done+1,c
  3009  0010F0  0E00               	movlw	0
  3010  0010F2  D019               	goto	L1
  3011  0010F4                     l2141:
  3012                           
  3013                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 692:       
      +                                        flags |= (1 << 0);
  3014  0010F4  0100               	movlb	0	; () banked
  3015  0010F6  81E5               	bsf	_flags& (0+255),0,b
  3016  0010F8                     l2143:
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 693:       
      +                                        ++*fmt;
  3020  0010F8  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3021  0010FC  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3022  001100  2ADE               	incf	postinc2,f,c
  3023  001102  0E00               	movlw	0
  3024  001104  22DD               	addwfc	postdec2,f,c
  3025                           
  3026                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 694:       
      +                                        break;
  3027  001106  D032               	goto	l2167
  3028  001108                     l2145:
  3029                           
  3030                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 696:       
      +                                        flags |= (1 << 1);
  3031  001108  0100               	movlb	0	; () banked
  3032  00110A  83E5               	bsf	_flags& (0+255),1,b
  3033  00110C  D7F5               	goto	l2143
  3034  00110E                     l2149:
  3035                           
  3036                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 700:       
      +                                        flags |= (1 << 2);
  3037  00110E  0100               	movlb	0	; () banked
  3038  001110  85E5               	bsf	_flags& (0+255),2,b
  3039  001112  D7F2               	goto	l2143
  3040  001114                     l2153:
  3041                           
  3042                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 704:       
      +                                        flags |= (1 << 3);
  3043  001114  0100               	movlb	0	; () banked
  3044  001116  87E5               	bsf	_flags& (0+255),3,b
  3045  001118  D7EF               	goto	l2143
  3046  00111A                     l2157:
  3047                           
  3048                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 708:       
      +                                        flags |= (1 << 4);
  3049  00111A  0100               	movlb	0	; () banked
  3050  00111C  89E5               	bsf	_flags& (0+255),4,b
  3051  00111E  D7EC               	goto	l2143
  3052  001120                     l2161:
  3053                           
  3054                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 712:       
      +                                        done = 1;
  3055  001120  0E00               	movlw	0
  3056  001122  6E5A               	movwf	vfpfcnvrt@done+1,c
  3057  001124  0E01               	movlw	1
  3058  001126                     L1:
  3059  001126  6E59               	movwf	vfpfcnvrt@done,c
  3060                           
  3061                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 713:       
      +                                        break;
  3062  001128  D021               	goto	l2167
  3063  00112A                     l2165:
  3064  00112A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3065  00112E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3066  001132  CFDE FFF6          	movff	postinc2,tblptrl
  3067  001136  CFDD FFF7          	movff	postdec2,tblptrh
  3068  00113A                     	if	0	;tblptru may be non-zero
  3069  00113A                     	endif
  3070  00113A                     	if	0	;tblptru may be non-zero
  3071  00113A                     	endif
  3072  00113A  0008               	tblrd		*
  3073  00113C  50F5               	movf	tablat,w,c
  3074  00113E  6E4D               	movwf	??_vfpfcnvrt& (0+255),c
  3075  001140  6A4E               	clrf	(??_vfpfcnvrt+1)& (0+255),c
  3076                           
  3077                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3078                           ; Switch size 1, requested type "simple"
  3079                           ; Number of cases is 1, Range of values is 0 to 0
  3080                           ; switch strategies available:
  3081                           ; Name         Instructions Cycles
  3082                           ; simple_byte            4     3 (average)
  3083                           ;	Chosen strategy is simple_byte
  3084  001142  504E               	movf	??_vfpfcnvrt+1,w,c
  3085  001144  0A00               	xorlw	0	; case 0
  3086  001146  A4D8               	btfss	status,2,c
  3087  001148  D7EB               	goto	l2161
  3088                           
  3089                           ; Switch size 1, requested type "simple"
  3090                           ; Number of cases is 5, Range of values is 32 to 48
  3091                           ; switch strategies available:
  3092                           ; Name         Instructions Cycles
  3093                           ; simple_byte           16     9 (average)
  3094                           ;	Chosen strategy is simple_byte
  3095  00114A  504D               	movf	??_vfpfcnvrt,w,c
  3096  00114C  0A20               	xorlw	32	; case 32
  3097  00114E  B4D8               	btfsc	status,2,c
  3098  001150  D7E1               	goto	l2153
  3099  001152  0A03               	xorlw	3	; case 35
  3100  001154  B4D8               	btfsc	status,2,c
  3101  001156  D7E1               	goto	l2157
  3102  001158  0A08               	xorlw	8	; case 43
  3103  00115A  B4D8               	btfsc	status,2,c
  3104  00115C  D7D8               	goto	l2149
  3105  00115E  0A06               	xorlw	6	; case 45
  3106  001160  B4D8               	btfsc	status,2,c
  3107  001162  D7C8               	goto	l2141
  3108  001164  0A1D               	xorlw	29	; case 48
  3109  001166  B4D8               	btfsc	status,2,c
  3110  001168  D7CF               	goto	l2145
  3111  00116A  D7DA               	goto	l2161
  3112  00116C                     l2167:
  3113                           
  3114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 689:       
      +                            while (!done) {
  3115  00116C  5059               	movf	vfpfcnvrt@done,w,c
  3116  00116E  105A               	iorwf	vfpfcnvrt@done+1,w,c
  3117  001170  B4D8               	btfsc	status,2,c
  3118  001172  D7DB               	goto	l2165
  3119                           
  3120                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 716:       
      +                            if (flags & (1 << 0)) {
  3121  001174  0100               	movlb	0	; () banked
  3122  001176  B1E5               	btfsc	_flags& (0+255),0,b
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 717:       
      +                                flags &= ~(1 << 1);
  3126  001178  93E5               	bcf	_flags& (0+255),1,b
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  3130  00117A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3131  00117E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3132  001182  CFDE FFF6          	movff	postinc2,tblptrl
  3133  001186  CFDD FFF7          	movff	postdec2,tblptrh
  3134  00118A                     	if	0	;tblptru may be non-zero
  3135  00118A                     	endif
  3136  00118A                     	if	0	;tblptru may be non-zero
  3137  00118A                     	endif
  3138  00118A  0008               	tblrd		*
  3139  00118C  50F5               	movf	tablat,w,c
  3140  00118E  0A2A               	xorlw	42
  3141  001190  A4D8               	btfss	status,2,c
  3142  001192  D023               	goto	l2179
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  3146  001194  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3147  001198  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3148  00119C  2ADE               	incf	postinc2,f,c
  3149  00119E  0E00               	movlw	0
  3150  0011A0  22DD               	addwfc	postdec2,f,c
  3151                           
  3152                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  3153  0011A2  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3154  0011A6  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3155  0011AA  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  3156  0011AE  0E02               	movlw	2
  3157  0011B0  26DE               	addwf	postinc2,f,c
  3158  0011B2  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  3159  0011B6  0E00               	movlw	0
  3160  0011B8  22DD               	addwfc	postdec2,f,c
  3161  0011BA  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3162  0011BE  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3163  0011C2  CFDE F0E1          	movff	postinc2,_width
  3164  0011C6  CFDD F0E2          	movff	postdec2,_width+1
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  3168  0011CA  AFE2               	btfss	(_width+1)& (0+255),7,b
  3169  0011CC  D03F               	goto	u1560
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  3173  0011CE  81E5               	bsf	_flags& (0+255),0,b
  3174                           
  3175                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  3176  0011D0  6DE1               	negf	_width& (0+255),b
  3177  0011D2  1FE2               	comf	(_width+1)& (0+255),f,b
  3178  0011D4  B0D8               	btfsc	status,0,c
  3179  0011D6  2BE2               	incf	(_width+1)& (0+255),f,b
  3180  0011D8  D039               	goto	u1560
  3181  0011DA                     l2179:
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  3185  0011DA  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3186  0011DE  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3187  0011E2  CFDE F008          	movff	postinc2,atoi@s
  3188  0011E6  CFDD F009          	movff	postdec2,atoi@s+1
  3189  0011EA  ECF7  F00C         	call	_atoi	;wreg free
  3190  0011EE  C008  F0E1         	movff	?_atoi,_width
  3191  0011F2  C009  F0E2         	movff	?_atoi+1,_width+1
  3192                           
  3193                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  3194  0011F6  D007               	goto	l2183
  3195  0011F8                     l2181:
  3196                           
  3197                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  3198  0011F8  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3199  0011FC  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3200  001200  2ADE               	incf	postinc2,f,c
  3201  001202  0E00               	movlw	0
  3202  001204  22DD               	addwfc	postdec2,f,c
  3203  001206                     l2183:
  3204  001206  0ED0               	movlw	208
  3205  001208  6E4D               	movwf	??_vfpfcnvrt& (0+255),c
  3206  00120A  0EFF               	movlw	255
  3207  00120C  6E4E               	movwf	(??_vfpfcnvrt+1)& (0+255),c
  3208  00120E  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3209  001212  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3210  001216  CFDE FFF6          	movff	postinc2,tblptrl
  3211  00121A  CFDD FFF7          	movff	postdec2,tblptrh
  3212  00121E                     	if	0	;tblptru may be non-zero
  3213  00121E                     	endif
  3214  00121E                     	if	0	;tblptru may be non-zero
  3215  00121E                     	endif
  3216  00121E  0008               	tblrd		*
  3217  001220  50F5               	movf	tablat,w,c
  3218  001222  6E4F               	movwf	(??_vfpfcnvrt+2)& (0+255),c
  3219  001224  6A50               	clrf	(??_vfpfcnvrt+3)& (0+255),c
  3220  001226  504D               	movf	??_vfpfcnvrt,w,c
  3221  001228  264F               	addwf	??_vfpfcnvrt+2,f,c
  3222  00122A  504E               	movf	??_vfpfcnvrt+1,w,c
  3223  00122C  2250               	addwfc	??_vfpfcnvrt+3,f,c
  3224  00122E  5050               	movf	??_vfpfcnvrt+3,w,c
  3225  001230  E106               	bnz	u1540
  3226  001232  0E0A               	movlw	10
  3227  001234  5C4F               	subwf	??_vfpfcnvrt+2,w,c
  3228  001236  B0D8               	btfsc	status,0,c
  3229  001238  D002               	goto	u1540
  3230  00123A  0E01               	movlw	1
  3231  00123C  D001               	goto	u1550
  3232  00123E                     u1540:
  3233  00123E  0E00               	movlw	0
  3234  001240                     u1550:
  3235  001240  6E5B               	movwf	_vfpfcnvrt$762,c
  3236  001242  6A5C               	clrf	_vfpfcnvrt$762+1,c
  3237  001244  505B               	movf	_vfpfcnvrt$762,w,c
  3238  001246  105C               	iorwf	_vfpfcnvrt$762+1,w,c
  3239  001248  A4D8               	btfss	status,2,c
  3240  00124A  D7D6               	goto	l2181
  3241  00124C                     u1560:
  3242                           
  3243                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1274:      
      +                             if ((*fmt[0] == 'x') || (*fmt[0] == 'X')) {
  3244  00124C  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3245  001250  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3246  001254  CFDE FFF6          	movff	postinc2,tblptrl
  3247  001258  CFDD FFF7          	movff	postdec2,tblptrh
  3248  00125C                     	if	0	;tblptru may be non-zero
  3249  00125C                     	endif
  3250  00125C                     	if	0	;tblptru may be non-zero
  3251  00125C                     	endif
  3252  00125C  0008               	tblrd		*
  3253  00125E  50F5               	movf	tablat,w,c
  3254  001260  0A78               	xorlw	120
  3255  001262  B4D8               	btfsc	status,2,c
  3256  001264  D00D               	goto	u1580
  3257  001266  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3258  00126A  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3259  00126E  CFDE FFF6          	movff	postinc2,tblptrl
  3260  001272  CFDD FFF7          	movff	postdec2,tblptrh
  3261  001276                     	if	0	;tblptru may be non-zero
  3262  001276                     	endif
  3263  001276                     	if	0	;tblptru may be non-zero
  3264  001276                     	endif
  3265  001276  0008               	tblrd		*
  3266  001278  50F5               	movf	tablat,w,c
  3267  00127A  0A58               	xorlw	88
  3268  00127C  A4D8               	btfss	status,2,c
  3269  00127E  D04D               	goto	l2203
  3270  001280                     u1580:
  3271                           
  3272                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1276:      
      +                                 c = (*fmt)[0];
  3273  001280  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3274  001284  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3275  001288  CFDE FFF6          	movff	postinc2,tblptrl
  3276  00128C  CFDD FFF7          	movff	postdec2,tblptrh
  3277  001290                     	if	0	;tblptru may be non-zero
  3278  001290                     	endif
  3279  001290                     	if	0	;tblptru may be non-zero
  3280  001290                     	endif
  3281  001290  0008               	tblrd		*
  3282  001292  CFF5 F05D          	movff	tablat,vfpfcnvrt@c
  3283                           
  3284                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1277:      
      +                                 ++*fmt;
  3285  001296  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3286  00129A  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3287  00129E  2ADE               	incf	postinc2,f,c
  3288  0012A0  0E00               	movlw	0
  3289  0012A2  22DD               	addwfc	postdec2,f,c
  3290                           
  3291                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1278:      
      +                                 llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsig
      +                          ned int)0));
  3292  0012A4  C04B  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  3293  0012A8  C04C  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  3294  0012AC  CFDF F04D          	movff	indf2,??_vfpfcnvrt
  3295  0012B0  0E02               	movlw	2
  3296  0012B2  26DE               	addwf	postinc2,f,c
  3297  0012B4  CFDF F04E          	movff	indf2,??_vfpfcnvrt+1
  3298  0012B8  0E00               	movlw	0
  3299  0012BA  22DD               	addwfc	postdec2,f,c
  3300  0012BC  C04D  FFD9         	movff	??_vfpfcnvrt,fsr2l
  3301  0012C0  C04E  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  3302  0012C4  CFDE F04F          	movff	postinc2,??_vfpfcnvrt+2
  3303  0012C8  CFDD F050          	movff	postdec2,??_vfpfcnvrt+3
  3304  0012CC  C04F  F051         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
  3305  0012D0  C050  F052         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
  3306  0012D4  6A53               	clrf	vfpfcnvrt@llu+2,c
  3307  0012D6  6A54               	clrf	vfpfcnvrt@llu+3,c
  3308  0012D8  6A55               	clrf	vfpfcnvrt@llu+4,c
  3309  0012DA  6A56               	clrf	vfpfcnvrt@llu+5,c
  3310  0012DC  6A57               	clrf	vfpfcnvrt@llu+6,c
  3311  0012DE  6A58               	clrf	vfpfcnvrt@llu+7,c
  3312                           
  3313                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1280:      
      +                                 return xtoa(fp, llu, c);
  3314  0012E0  C047  F020         	movff	vfpfcnvrt@fp,xtoa@fp
  3315  0012E4  C048  F021         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
  3316  0012E8  C051  F022         	movff	vfpfcnvrt@llu,xtoa@d
  3317  0012EC  C052  F023         	movff	vfpfcnvrt@llu+1,xtoa@d+1
  3318  0012F0  C053  F024         	movff	vfpfcnvrt@llu+2,xtoa@d+2
  3319  0012F4  C054  F025         	movff	vfpfcnvrt@llu+3,xtoa@d+3
  3320  0012F8  C055  F026         	movff	vfpfcnvrt@llu+4,xtoa@d+4
  3321  0012FC  C056  F027         	movff	vfpfcnvrt@llu+5,xtoa@d+5
  3322  001300  C057  F028         	movff	vfpfcnvrt@llu+6,xtoa@d+6
  3323  001304  C058  F029         	movff	vfpfcnvrt@llu+7,xtoa@d+7
  3324  001308  C05D  F02A         	movff	vfpfcnvrt@c,xtoa@x
  3325  00130C  EC12  F00B         	call	_xtoa	;wreg free
  3326  001310  C020  F047         	movff	?_xtoa,?_vfpfcnvrt
  3327  001314  C021  F048         	movff	?_xtoa+1,?_vfpfcnvrt+1
  3328  001318  0012               	return	
  3329  00131A                     l2203:
  3330                           
  3331                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  3332  00131A  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3333  00131E  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3334  001322  CFDE FFF6          	movff	postinc2,tblptrl
  3335  001326  CFDD FFF7          	movff	postdec2,tblptrh
  3336  00132A                     	if	0	;tblptru may be non-zero
  3337  00132A                     	endif
  3338  00132A                     	if	0	;tblptru may be non-zero
  3339  00132A                     	endif
  3340  00132A  0008               	tblrd		*
  3341  00132C  50F5               	movf	tablat,w,c
  3342  00132E  0A25               	xorlw	37
  3343  001330  A4D8               	btfss	status,2,c
  3344  001332  D016               	goto	l2213
  3345                           
  3346                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  3347  001334  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3348  001338  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3349  00133C  2ADE               	incf	postinc2,f,c
  3350  00133E  0E00               	movlw	0
  3351  001340  22DD               	addwfc	postdec2,f,c
  3352                           
  3353                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  3354  001342  0E00               	movlw	0
  3355  001344  6E06               	movwf	fputc@c+1,c
  3356  001346  0E25               	movlw	37
  3357  001348  6E05               	movwf	fputc@c,c
  3358  00134A  C047  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3359  00134E  C048  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3360  001352  EC53  F00F         	call	_fputc	;wreg free
  3361  001356                     l2209:
  3362                           
  3363                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  3364  001356  0E00               	movlw	0
  3365  001358  6E48               	movwf	?_vfpfcnvrt+1,c
  3366  00135A  0E01               	movlw	1
  3367  00135C  6E47               	movwf	?_vfpfcnvrt,c
  3368  00135E  0012               	return	
  3369  001360                     l2213:
  3370                           
  3371                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  3372  001360  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3373  001364  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3374  001368  2ADE               	incf	postinc2,f,c
  3375  00136A  0E00               	movlw	0
  3376  00136C  22DD               	addwfc	postdec2,f,c
  3377                           
  3378                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  3379  00136E  0E00               	movlw	0
  3380  001370  6E48               	movwf	?_vfpfcnvrt+1,c
  3381  001372  0E00               	movlw	0
  3382  001374  6E47               	movwf	?_vfpfcnvrt,c
  3383  001376  0012               	return	
  3384  001378                     l2219:
  3385                           
  3386                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  3387  001378  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3388  00137C  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3389  001380  CFDE FFF6          	movff	postinc2,tblptrl
  3390  001384  CFDD FFF7          	movff	postdec2,tblptrh
  3391  001388                     	if	0	;tblptru may be non-zero
  3392  001388                     	endif
  3393  001388                     	if	0	;tblptru may be non-zero
  3394  001388                     	endif
  3395  001388  0008               	tblrd		*
  3396  00138A  50F5               	movf	tablat,w,c
  3397  00138C  6E05               	movwf	fputc@c,c
  3398  00138E  6A06               	clrf	fputc@c+1,c
  3399  001390  C047  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3400  001394  C048  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  3401  001398  EC53  F00F         	call	_fputc	;wreg free
  3402                           
  3403                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  3404  00139C  C049  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  3405  0013A0  C04A  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  3406  0013A4  2ADE               	incf	postinc2,f,c
  3407  0013A6  0E00               	movlw	0
  3408  0013A8  22DD               	addwfc	postdec2,f,c
  3409  0013AA  D7D5               	goto	l2209
  3410  0013AC                     __end_of_vfpfcnvrt:
  3411                           	opt callstack 0
  3412                           
  3413 ;; *************** function _xtoa *****************
  3414 ;; Defined at:
  3415 ;;		line 623 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  3418 ;;		 -> sprintf@f(6), 
  3419 ;;  d               8   33[COMRAM] unsigned long long 
  3420 ;;  x               1   41[COMRAM] unsigned char 
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;  n               8   58[COMRAM] unsigned long long 
  3423 ;;  c               2   68[COMRAM] int 
  3424 ;;  i               2   66[COMRAM] int 
  3425 ;;  w               2   56[COMRAM] int 
  3426 ;;  p               2   54[COMRAM] int 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  2   31[COMRAM] int 
  3429 ;; Registers used:
  3430 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3436 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;Total ram usage:       39 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    8
  3443 ;; This function calls:
  3444 ;;		_isalpha
  3445 ;;		_isupper
  3446 ;;		_pad
  3447 ;;		_toupper
  3448 ;; This function is called by:
  3449 ;;		_vfpfcnvrt
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           	psect	text14
  3454  001624                     __ptext14:
  3455                           	opt callstack 0
  3456  001624                     _xtoa:
  3457                           	opt callstack 17
  3458                           
  3459                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 623: static
      +                           int xtoa(FILE *fp, unsigned long long d, char x);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 624: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 625:     int c, i, p, w;;C:\Program Files (x86)\Microch
      +                          ip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 626:     unsigned long long n;;C:\Program 
      +                          Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 629:     if (!(prec < 0
      +                          )) {
  3460                           
  3461                           ;incstack = 0
  3462  001624  0100               	movlb	0	; () banked
  3463  001626  AFE4               	btfss	(_prec+1)& (0+255),7,b
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 630:       
      +                            flags &= ~(1 << 1);
  3467  001628  93E5               	bcf	_flags& (0+255),1,b
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 632:     p 
      +                          = (0 < prec) ? prec : 1;
  3471  00162A  BFE4               	btfsc	(_prec+1)& (0+255),7,b
  3472  00162C  D005               	goto	u1240
  3473  00162E  51E4               	movf	(_prec+1)& (0+255),w,b
  3474  001630  E108               	bnz	l279
  3475  001632  05E3               	decf	_prec& (0+255),w,b
  3476  001634  B0D8               	btfsc	status,0,c
  3477  001636  D005               	goto	l279
  3478  001638                     u1240:
  3479                           
  3480                           ; BSR set to: 0
  3481  001638  0E00               	movlw	0
  3482  00163A  6E38               	movwf	xtoa@p+1,c
  3483  00163C  0E01               	movlw	1
  3484  00163E  6E37               	movwf	xtoa@p,c
  3485  001640  D004               	goto	l281
  3486  001642                     l279:
  3487                           
  3488                           ; BSR set to: 0
  3489  001642  C0E3  F037         	movff	_prec,xtoa@p
  3490  001646  C0E4  F038         	movff	_prec+1,xtoa@p+1
  3491  00164A                     l281:
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 633:     w 
      +                          = width;
  3495  00164A  C0E1  F039         	movff	_width,xtoa@w
  3496  00164E  C0E2  F03A         	movff	_width+1,xtoa@w+1
  3497                           
  3498                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 634:     if
      +                           (flags & (1 << 4)) {
  3499  001652  A9E5               	btfss	_flags& (0+255),4,b
  3500  001654  D004               	goto	l2029
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 635:       
      +                            w -= 2;
  3504  001656  0EFE               	movlw	254
  3505  001658  2639               	addwf	xtoa@w,f,c
  3506  00165A  0EFF               	movlw	255
  3507  00165C  223A               	addwfc	xtoa@w+1,f,c
  3508  00165E                     l2029:
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 639:     n 
      +                          = d;
  3512  00165E  C022  F03B         	movff	xtoa@d,xtoa@n
  3513  001662  C023  F03C         	movff	xtoa@d+1,xtoa@n+1
  3514  001666  C024  F03D         	movff	xtoa@d+2,xtoa@n+2
  3515  00166A  C025  F03E         	movff	xtoa@d+3,xtoa@n+3
  3516  00166E  C026  F03F         	movff	xtoa@d+4,xtoa@n+4
  3517  001672  C027  F040         	movff	xtoa@d+5,xtoa@n+5
  3518  001676  C028  F041         	movff	xtoa@d+6,xtoa@n+6
  3519  00167A  C029  F042         	movff	xtoa@d+7,xtoa@n+7
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 640:     i 
      +                          = sizeof(dbuf) - 1;
  3523  00167E  0E00               	movlw	0
  3524  001680  6E44               	movwf	xtoa@i+1,c
  3525  001682  0E1F               	movlw	31
  3526  001684  6E43               	movwf	xtoa@i,c
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 641:     db
      +                          uf[i] = '\0';
  3530  001686  0E00               	movlw	0
  3531  001688  0101               	movlb	1	; () banked
  3532  00168A  6FAF               	movwf	(_dbuf+31)& (0+255),b
  3533                           
  3534                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3535  00168C  D093               	goto	l2065
  3536  00168E                     l2035:
  3537                           
  3538                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 643:       
      +                            --i;
  3539  00168E  0643               	decf	xtoa@i,f,c
  3540  001690  A0D8               	btfss	status,0,c
  3541  001692  0644               	decf	xtoa@i+1,f,c
  3542                           
  3543                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 644:       
      +                            c = n & 0x0f;
  3544  001694  0E0F               	movlw	15
  3545  001696  143B               	andwf	xtoa@n,w,c
  3546  001698  6E45               	movwf	xtoa@c,c
  3547  00169A  6A46               	clrf	xtoa@c+1,c
  3548                           
  3549                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 645:       
      +                            c = (c < 10) ? '0' + c : 'a' + (c - 10);
  3550  00169C  BE46               	btfsc	xtoa@c+1,7,c
  3551  00169E  D008               	goto	l2043
  3552  0016A0  5046               	movf	xtoa@c+1,w,c
  3553  0016A2  E104               	bnz	u1260
  3554  0016A4  0E0A               	movlw	10
  3555  0016A6  5C45               	subwf	xtoa@c,w,c
  3556  0016A8  A0D8               	btfss	status,0,c
  3557  0016AA  D002               	goto	l2043
  3558  0016AC                     u1260:
  3559  0016AC  0E57               	movlw	87
  3560  0016AE  D001               	goto	L2
  3561  0016B0                     l2043:
  3562  0016B0  0E30               	movlw	48
  3563  0016B2                     L2:
  3564  0016B2  2445               	addwf	xtoa@c,w,c
  3565  0016B4  6E45               	movwf	xtoa@c,c
  3566  0016B6  0E00               	movlw	0
  3567  0016B8  2046               	addwfc	xtoa@c+1,w,c
  3568  0016BA  6E46               	movwf	xtoa@c+1,c
  3569                           
  3570                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 646:       
      +                            if ((0 ? isupper((int)x) : ((unsigned)((int)x)-'A') < 26) && (0 ? isalpha(c) : (((unsi
      +                          gned)(c)|32)-'a') < 26)) {
  3571  0016BC  0EBF               	movlw	191
  3572  0016BE  6E2B               	movwf	??_xtoa& (0+255),c
  3573  0016C0  0EFF               	movlw	255
  3574  0016C2  6E2C               	movwf	(??_xtoa+1)& (0+255),c
  3575  0016C4  502A               	movf	xtoa@x,w,c
  3576  0016C6  6E2D               	movwf	(??_xtoa+2)& (0+255),c
  3577  0016C8  6A2E               	clrf	(??_xtoa+3)& (0+255),c
  3578  0016CA  502B               	movf	??_xtoa,w,c
  3579  0016CC  262D               	addwf	??_xtoa+2,f,c
  3580  0016CE  502C               	movf	??_xtoa+1,w,c
  3581  0016D0  222E               	addwfc	??_xtoa+3,f,c
  3582  0016D2  502E               	movf	??_xtoa+3,w,c
  3583  0016D4  E106               	bnz	u1270
  3584  0016D6  0E1A               	movlw	26
  3585  0016D8  5C2D               	subwf	??_xtoa+2,w,c
  3586  0016DA  B0D8               	btfsc	status,0,c
  3587  0016DC  D002               	goto	u1270
  3588  0016DE  0E01               	movlw	1
  3589  0016E0  D001               	goto	u1280
  3590  0016E2                     u1270:
  3591  0016E2  0E00               	movlw	0
  3592  0016E4                     u1280:
  3593  0016E4  6E33               	movwf	_xtoa$746,c
  3594  0016E6  6A34               	clrf	_xtoa$746+1,c
  3595  0016E8  5033               	movf	_xtoa$746,w,c
  3596  0016EA  1034               	iorwf	_xtoa$746+1,w,c
  3597  0016EC  B4D8               	btfsc	status,2,c
  3598  0016EE  D027               	goto	l2057
  3599  0016F0  0E9F               	movlw	159
  3600  0016F2  6E2B               	movwf	??_xtoa& (0+255),c
  3601  0016F4  0EFF               	movlw	255
  3602  0016F6  6E2C               	movwf	(??_xtoa+1)& (0+255),c
  3603  0016F8  0E20               	movlw	32
  3604  0016FA  1045               	iorwf	xtoa@c,w,c
  3605  0016FC  6E2D               	movwf	(??_xtoa+2)& (0+255),c
  3606  0016FE  0E00               	movlw	0
  3607  001700  1046               	iorwf	xtoa@c+1,w,c
  3608  001702  6E2E               	movwf	(??_xtoa+3)& (0+255),c
  3609  001704  502B               	movf	??_xtoa,w,c
  3610  001706  262D               	addwf	??_xtoa+2,f,c
  3611  001708  502C               	movf	??_xtoa+1,w,c
  3612  00170A  222E               	addwfc	??_xtoa+3,f,c
  3613  00170C  502E               	movf	??_xtoa+3,w,c
  3614  00170E  E106               	bnz	u1300
  3615  001710  0E1A               	movlw	26
  3616  001712  5C2D               	subwf	??_xtoa+2,w,c
  3617  001714  B0D8               	btfsc	status,0,c
  3618  001716  D002               	goto	u1300
  3619  001718  0E01               	movlw	1
  3620  00171A  D001               	goto	u1310
  3621  00171C                     u1300:
  3622  00171C  0E00               	movlw	0
  3623  00171E                     u1310:
  3624  00171E  6E35               	movwf	_xtoa$747,c
  3625  001720  6A36               	clrf	_xtoa$747+1,c
  3626  001722  5035               	movf	_xtoa$747,w,c
  3627  001724  1036               	iorwf	_xtoa$747+1,w,c
  3628  001726  B4D8               	btfsc	status,2,c
  3629  001728  D00A               	goto	l2057
  3630                           
  3631                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 647:       
      +                                c = toupper(c);
  3632  00172A  C045  F007         	movff	xtoa@c,toupper@c
  3633  00172E  C046  F008         	movff	xtoa@c+1,toupper@c+1
  3634  001732  EC16  F012         	call	_toupper	;wreg free
  3635  001736  C007  F045         	movff	?_toupper,xtoa@c
  3636  00173A  C008  F046         	movff	?_toupper+1,xtoa@c+1
  3637  00173E                     l2057:
  3638                           
  3639                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 649:       
      +                            dbuf[i] = (char)c;
  3640  00173E  0E90               	movlw	low _dbuf
  3641  001740  2443               	addwf	xtoa@i,w,c
  3642  001742  6ED9               	movwf	fsr2l,c
  3643  001744  0E01               	movlw	high _dbuf
  3644  001746  2044               	addwfc	xtoa@i+1,w,c
  3645  001748  6EDA               	movwf	fsr2h,c
  3646  00174A  C045  FFDF         	movff	xtoa@c,indf2
  3647                           
  3648                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 650:       
      +                            --p;
  3649  00174E  0637               	decf	xtoa@p,f,c
  3650  001750  A0D8               	btfss	status,0,c
  3651  001752  0638               	decf	xtoa@p+1,f,c
  3652                           
  3653                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 651:       
      +                            --w;
  3654  001754  0639               	decf	xtoa@w,f,c
  3655  001756  A0D8               	btfss	status,0,c
  3656  001758  063A               	decf	xtoa@w+1,f,c
  3657                           
  3658                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 652:       
      +                            n = n >> 4;
  3659  00175A  C03B  F02B         	movff	xtoa@n,??_xtoa
  3660  00175E  C03C  F02C         	movff	xtoa@n+1,??_xtoa+1
  3661  001762  C03D  F02D         	movff	xtoa@n+2,??_xtoa+2
  3662  001766  C03E  F02E         	movff	xtoa@n+3,??_xtoa+3
  3663  00176A  C03F  F02F         	movff	xtoa@n+4,??_xtoa+4
  3664  00176E  C040  F030         	movff	xtoa@n+5,??_xtoa+5
  3665  001772  C041  F031         	movff	xtoa@n+6,??_xtoa+6
  3666  001776  C042  F032         	movff	xtoa@n+7,??_xtoa+7
  3667  00177A  0E05               	movlw	5
  3668  00177C  D009               	goto	u1330
  3669  00177E                     u1335:
  3670  00177E  90D8               	bcf	status,0,c
  3671  001780  3232               	rrcf	??_xtoa+7,f,c
  3672  001782  3231               	rrcf	??_xtoa+6,f,c
  3673  001784  3230               	rrcf	??_xtoa+5,f,c
  3674  001786  322F               	rrcf	??_xtoa+4,f,c
  3675  001788  322E               	rrcf	??_xtoa+3,f,c
  3676  00178A  322D               	rrcf	??_xtoa+2,f,c
  3677  00178C  322C               	rrcf	??_xtoa+1,f,c
  3678  00178E  322B               	rrcf	??_xtoa,f,c
  3679  001790                     u1330:
  3680  001790  2EE8               	decfsz	wreg,f,c
  3681  001792  D7F5               	goto	u1335
  3682  001794  C02B  F03B         	movff	??_xtoa,xtoa@n
  3683  001798  C02C  F03C         	movff	??_xtoa+1,xtoa@n+1
  3684  00179C  C02D  F03D         	movff	??_xtoa+2,xtoa@n+2
  3685  0017A0  C02E  F03E         	movff	??_xtoa+3,xtoa@n+3
  3686  0017A4  C02F  F03F         	movff	??_xtoa+4,xtoa@n+4
  3687  0017A8  C030  F040         	movff	??_xtoa+5,xtoa@n+5
  3688  0017AC  C031  F041         	movff	??_xtoa+6,xtoa@n+6
  3689  0017B0  C032  F042         	movff	??_xtoa+7,xtoa@n+7
  3690  0017B4                     l2065:
  3691                           
  3692                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 642:     wh
      +                          ile (!(i < 2) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3693  0017B4  BE44               	btfsc	xtoa@i+1,7,c
  3694  0017B6  D021               	goto	u1380
  3695  0017B8  5044               	movf	xtoa@i+1,w,c
  3696  0017BA  E104               	bnz	u1340
  3697  0017BC  0E02               	movlw	2
  3698  0017BE  5C43               	subwf	xtoa@i,w,c
  3699  0017C0  A0D8               	btfss	status,0,c
  3700  0017C2  D01B               	goto	u1380
  3701  0017C4                     u1340:
  3702  0017C4  503B               	movf	xtoa@n,w,c
  3703  0017C6  103C               	iorwf	xtoa@n+1,w,c
  3704  0017C8  103D               	iorwf	xtoa@n+2,w,c
  3705  0017CA  103E               	iorwf	xtoa@n+3,w,c
  3706  0017CC  103F               	iorwf	xtoa@n+4,w,c
  3707  0017CE  1040               	iorwf	xtoa@n+5,w,c
  3708  0017D0  1041               	iorwf	xtoa@n+6,w,c
  3709  0017D2  1042               	iorwf	xtoa@n+7,w,c
  3710  0017D4  A4D8               	btfss	status,2,c
  3711  0017D6  D75B               	goto	l2035
  3712  0017D8  BE38               	btfsc	xtoa@p+1,7,c
  3713  0017DA  D005               	goto	u1360
  3714  0017DC  5038               	movf	xtoa@p+1,w,c
  3715  0017DE  E102               	bnz	u1361
  3716  0017E0  0437               	decf	xtoa@p,w,c
  3717  0017E2  B0D8               	btfsc	status,0,c
  3718  0017E4                     u1361:
  3719  0017E4  D754               	goto	l2035
  3720  0017E6                     u1360:
  3721  0017E6  BE3A               	btfsc	xtoa@w+1,7,c
  3722  0017E8  D008               	goto	u1380
  3723  0017EA  503A               	movf	xtoa@w+1,w,c
  3724  0017EC  E103               	bnz	u1370
  3725  0017EE  0439               	decf	xtoa@w,w,c
  3726  0017F0  A0D8               	btfss	status,0,c
  3727  0017F2  D003               	goto	u1380
  3728  0017F4                     u1370:
  3729  0017F4  0100               	movlb	0	; () banked
  3730  0017F6  B3E5               	btfsc	_flags& (0+255),1,b
  3731  0017F8  D74A               	goto	l2035
  3732  0017FA                     u1380:
  3733                           
  3734                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 656:     if
      +                           (flags & (1 << 4)) {
  3735  0017FA  0100               	movlb	0	; () banked
  3736  0017FC  A9E5               	btfss	_flags& (0+255),4,b
  3737  0017FE  D016               	goto	l2081
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 657:       
      +                            --i;
  3741  001800  0643               	decf	xtoa@i,f,c
  3742  001802  A0D8               	btfss	status,0,c
  3743  001804  0644               	decf	xtoa@i+1,f,c
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 658:       
      +                            dbuf[i] = x;
  3747  001806  0E90               	movlw	low _dbuf
  3748  001808  2443               	addwf	xtoa@i,w,c
  3749  00180A  6ED9               	movwf	fsr2l,c
  3750  00180C  0E01               	movlw	high _dbuf
  3751  00180E  2044               	addwfc	xtoa@i+1,w,c
  3752  001810  6EDA               	movwf	fsr2h,c
  3753  001812  C02A  FFDF         	movff	xtoa@x,indf2
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 659:       
      +                            --i;
  3757  001816  0643               	decf	xtoa@i,f,c
  3758  001818  A0D8               	btfss	status,0,c
  3759  00181A  0644               	decf	xtoa@i+1,f,c
  3760                           
  3761                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 660:       
      +                            dbuf[i] = '0';
  3762  00181C  0E90               	movlw	low _dbuf
  3763  00181E  2443               	addwf	xtoa@i,w,c
  3764  001820  6ED9               	movwf	fsr2l,c
  3765  001822  0E01               	movlw	high _dbuf
  3766  001824  2044               	addwfc	xtoa@i+1,w,c
  3767  001826  6EDA               	movwf	fsr2h,c
  3768  001828  0E30               	movlw	48
  3769  00182A  6EDF               	movwf	indf2,c
  3770  00182C                     l2081:
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 664:     re
      +                          turn pad(fp, &dbuf[i], w);
  3774  00182C  C020  F015         	movff	xtoa@fp,pad@fp
  3775  001830  C021  F016         	movff	xtoa@fp+1,pad@fp+1
  3776  001834  0E90               	movlw	low _dbuf
  3777  001836  2443               	addwf	xtoa@i,w,c
  3778  001838  6E17               	movwf	pad@buf,c
  3779  00183A  0E01               	movlw	high _dbuf
  3780  00183C  2044               	addwfc	xtoa@i+1,w,c
  3781  00183E  6E18               	movwf	pad@buf+1,c
  3782  001840  C039  F019         	movff	xtoa@w,pad@p
  3783  001844  C03A  F01A         	movff	xtoa@w+1,pad@p+1
  3784  001848  ECA3  F00F         	call	_pad	;wreg free
  3785  00184C  C015  F020         	movff	?_pad,?_xtoa
  3786  001850  C016  F021         	movff	?_pad+1,?_xtoa+1
  3787  001854  0012               	return		;funcret
  3788  001856                     __end_of_xtoa:
  3789                           	opt callstack 0
  3790                           
  3791 ;; *************** function _toupper *****************
  3792 ;; Defined at:
  3793 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\toupper.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;  c               2    6[COMRAM] int 
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;		None
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  2    6[COMRAM] int 
  3800 ;; Registers used:
  3801 ;;		wreg, status,2, status,0
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3807 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3809 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;Total ram usage:        8 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    2
  3814 ;; This function calls:
  3815 ;;		_islower
  3816 ;; This function is called by:
  3817 ;;		_xtoa
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text15
  3822  00242C                     __ptext15:
  3823                           	opt callstack 0
  3824  00242C                     _toupper:
  3825                           	opt callstack 22
  3826                           
  3827                           ;incstack = 0
  3828  00242C  0E9F               	movlw	159
  3829  00242E  6E09               	movwf	??_toupper& (0+255),c
  3830  002430  0EFF               	movlw	255
  3831  002432  6E0A               	movwf	(??_toupper+1)& (0+255),c
  3832  002434  C007  F00B         	movff	toupper@c,??_toupper+2
  3833  002438  C008  F00C         	movff	toupper@c+1,??_toupper+3
  3834  00243C  5009               	movf	??_toupper,w,c
  3835  00243E  260B               	addwf	??_toupper+2,f,c
  3836  002440  500A               	movf	??_toupper+1,w,c
  3837  002442  220C               	addwfc	??_toupper+3,f,c
  3838  002444  500C               	movf	??_toupper+3,w,c
  3839  002446  E106               	bnz	u1160
  3840  002448  0E1A               	movlw	26
  3841  00244A  5C0B               	subwf	??_toupper+2,w,c
  3842  00244C  B0D8               	btfsc	status,0,c
  3843  00244E  D002               	goto	u1160
  3844  002450  0E01               	movlw	1
  3845  002452  D001               	goto	u1170
  3846  002454                     u1160:
  3847  002454  0E00               	movlw	0
  3848  002456                     u1170:
  3849  002456  6E0D               	movwf	_toupper$1314,c
  3850  002458  6A0E               	clrf	_toupper$1314+1,c
  3851  00245A  500D               	movf	_toupper$1314,w,c
  3852  00245C  100E               	iorwf	_toupper$1314+1,w,c
  3853  00245E  B4D8               	btfsc	status,2,c
  3854  002460  D005               	goto	l1109
  3855  002462  0E5F               	movlw	95
  3856  002464  1407               	andwf	toupper@c,w,c
  3857  002466  6E07               	movwf	?_toupper,c
  3858  002468  6A08               	clrf	?_toupper+1,c
  3859  00246A  0012               	return	
  3860  00246C                     l1109:
  3861  00246C  C007  F007         	movff	toupper@c,?_toupper
  3862  002470  C008  F008         	movff	toupper@c+1,?_toupper+1
  3863  002474  0012               	return		;funcret
  3864  002476                     __end_of_toupper:
  3865                           	opt callstack 0
  3866                           
  3867 ;; *************** function _islower *****************
  3868 ;; Defined at:
  3869 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\islower.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  c               2    0[COMRAM] int 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;		None
  3874 ;; Return value:  Size  Location     Type
  3875 ;;                  2    0[COMRAM] int 
  3876 ;; Registers used:
  3877 ;;		wreg, status,2, status,0
  3878 ;; Tracked objects:
  3879 ;;		On entry : 0/0
  3880 ;;		On exit  : 0/0
  3881 ;;		Unchanged: 0/0
  3882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3883 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;Total ram usage:        6 bytes
  3888 ;; Hardware stack levels used:    1
  3889 ;; Hardware stack levels required when called:    1
  3890 ;; This function calls:
  3891 ;;		Nothing
  3892 ;; This function is called by:
  3893 ;;		_toupper
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           	psect	text16
  3898  002566                     __ptext16:
  3899                           	opt callstack 0
  3900  002566                     _islower:
  3901                           	opt callstack 22
  3902                           
  3903                           ;incstack = 0
  3904  002566  0E9F               	movlw	159
  3905  002568  6E03               	movwf	??_islower& (0+255),c
  3906  00256A  0EFF               	movlw	255
  3907  00256C  6E04               	movwf	(??_islower+1)& (0+255),c
  3908  00256E  C001  F005         	movff	islower@c,??_islower+2
  3909  002572  C002  F006         	movff	islower@c+1,??_islower+3
  3910  002576  5003               	movf	??_islower,w,c
  3911  002578  2605               	addwf	??_islower+2,f,c
  3912  00257A  5004               	movf	??_islower+1,w,c
  3913  00257C  2206               	addwfc	??_islower+3,f,c
  3914  00257E  5006               	movf	??_islower+3,w,c
  3915  002580  E106               	bnz	u1060
  3916  002582  0E1A               	movlw	26
  3917  002584  5C05               	subwf	??_islower+2,w,c
  3918  002586  B0D8               	btfsc	status,0,c
  3919  002588  D002               	goto	u1060
  3920  00258A  0E01               	movlw	1
  3921  00258C  D001               	goto	u1070
  3922  00258E                     u1060:
  3923  00258E  0E00               	movlw	0
  3924  002590                     u1070:
  3925  002590  6E01               	movwf	?_islower,c
  3926  002592  6A02               	clrf	?_islower+1,c
  3927  002594  0012               	return		;funcret
  3928  002596                     __end_of_islower:
  3929                           	opt callstack 0
  3930                           
  3931 ;; *************** function _pad *****************
  3932 ;; Defined at:
  3933 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  3936 ;;		 -> sprintf@f(6), 
  3937 ;;  buf             2   22[COMRAM] PTR unsigned char 
  3938 ;;		 -> dbuf(32), 
  3939 ;;  p               2   24[COMRAM] int 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  w               2   29[COMRAM] int 
  3942 ;;  i               2   27[COMRAM] int 
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  2   20[COMRAM] int 
  3945 ;; Registers used:
  3946 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3952 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;Total ram usage:       11 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    7
  3959 ;; This function calls:
  3960 ;;		_fputc
  3961 ;;		_fputs
  3962 ;;		_strlen
  3963 ;; This function is called by:
  3964 ;;		_xtoa
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text17
  3969  001F46                     __ptext17:
  3970                           	opt callstack 0
  3971  001F46                     _pad:
  3972                           	opt callstack 17
  3973                           
  3974                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  3975                           
  3976                           ;incstack = 0
  3977  001F46  0100               	movlb	0	; () banked
  3978  001F48  A1E5               	btfss	_flags& (0+255),0,b
  3979  001F4A  D00A               	goto	l1961
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  3983  001F4C  C017  F00E         	movff	pad@buf,fputs@s
  3984  001F50  C018  F00F         	movff	pad@buf+1,fputs@s+1
  3985  001F54  C015  F010         	movff	pad@fp,fputs@fp
  3986  001F58  C016  F011         	movff	pad@fp+1,fputs@fp+1
  3987  001F5C  EC7D  F012         	call	_fputs	;wreg free
  3988  001F60                     l1961:
  3989                           
  3990                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  3991  001F60  BE1A               	btfsc	pad@p+1,7,c
  3992  001F62  D005               	goto	l1965
  3993  001F64  C019  F01E         	movff	pad@p,pad@w
  3994  001F68  C01A  F01F         	movff	pad@p+1,pad@w+1
  3995  001F6C  D004               	goto	l269
  3996  001F6E                     l1965:
  3997  001F6E  0E00               	movlw	0
  3998  001F70  6E1F               	movwf	pad@w+1,c
  3999  001F72  0E00               	movlw	0
  4000  001F74  6E1E               	movwf	pad@w,c
  4001  001F76                     l269:
  4002                           
  4003                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  4004  001F76  0E00               	movlw	0
  4005  001F78  6E1D               	movwf	pad@i+1,c
  4006  001F7A  0E00               	movlw	0
  4007  001F7C  6E1C               	movwf	pad@i,c
  4008                           
  4009                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  4010  001F7E  D00C               	goto	l1971
  4011  001F80                     l1967:
  4012                           
  4013                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  4014  001F80  0E00               	movlw	0
  4015  001F82  6E06               	movwf	fputc@c+1,c
  4016  001F84  0E20               	movlw	32
  4017  001F86  6E05               	movwf	fputc@c,c
  4018  001F88  C015  F007         	movff	pad@fp,fputc@fp
  4019  001F8C  C016  F008         	movff	pad@fp+1,fputc@fp+1
  4020  001F90  EC53  F00F         	call	_fputc	;wreg free
  4021                           
  4022                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  4023  001F94  4A1C               	infsnz	pad@i,f,c
  4024  001F96  2A1D               	incf	pad@i+1,f,c
  4025  001F98                     l1971:
  4026                           
  4027                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  4028  001F98  501E               	movf	pad@w,w,c
  4029  001F9A  5C1C               	subwf	pad@i,w,c
  4030  001F9C  501D               	movf	pad@i+1,w,c
  4031  001F9E  0A80               	xorlw	128
  4032  001FA0  6E1B               	movwf	??_pad& (0+255),c
  4033  001FA2  501F               	movf	pad@w+1,w,c
  4034  001FA4  0A80               	xorlw	128
  4035  001FA6  581B               	subwfb	??_pad& (0+255),w,c
  4036  001FA8  A0D8               	btfss	status,0,c
  4037  001FAA  D7EA               	goto	l1967
  4038                           
  4039                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  4040  001FAC  0100               	movlb	0	; () banked
  4041  001FAE  B1E5               	btfsc	_flags& (0+255),0,b
  4042  001FB0  D00A               	goto	l1975
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  4046  001FB2  C017  F00E         	movff	pad@buf,fputs@s
  4047  001FB6  C018  F00F         	movff	pad@buf+1,fputs@s+1
  4048  001FBA  C015  F010         	movff	pad@fp,fputs@fp
  4049  001FBE  C016  F011         	movff	pad@fp+1,fputs@fp+1
  4050  001FC2  EC7D  F012         	call	_fputs	;wreg free
  4051  001FC6                     l1975:
  4052                           
  4053                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  4054  001FC6  C017  F001         	movff	pad@buf,strlen@s
  4055  001FCA  C018  F002         	movff	pad@buf+1,strlen@s+1
  4056  001FCE  EC29  F013         	call	_strlen	;wreg free
  4057  001FD2  501E               	movf	pad@w,w,c
  4058  001FD4  2401               	addwf	?_strlen,w,c
  4059  001FD6  6E15               	movwf	?_pad,c
  4060  001FD8  501F               	movf	pad@w+1,w,c
  4061  001FDA  2002               	addwfc	?_strlen+1,w,c
  4062  001FDC  6E16               	movwf	?_pad+1,c
  4063  001FDE  0012               	return		;funcret
  4064  001FE0                     __end_of_pad:
  4065                           	opt callstack 0
  4066                           
  4067 ;; *************** function _strlen *****************
  4068 ;; Defined at:
  4069 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  s               2    0[COMRAM] PTR const unsigned char 
  4072 ;;		 -> dbuf(32), 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  a               2    2[COMRAM] PTR const unsigned char 
  4075 ;;		 -> dbuf(32), 
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  2    0[COMRAM] unsigned int 
  4078 ;; Registers used:
  4079 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4085 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;Total ram usage:        4 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    1
  4092 ;; This function calls:
  4093 ;;		Nothing
  4094 ;; This function is called by:
  4095 ;;		_pad
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           	psect	text18
  4100  002652                     __ptext18:
  4101                           	opt callstack 0
  4102  002652                     _strlen:
  4103                           	opt callstack 22
  4104                           
  4105                           ;incstack = 0
  4106  002652  C001  F003         	movff	strlen@s,strlen@a
  4107  002656  C002  F004         	movff	strlen@s+1,strlen@a+1
  4108  00265A  D002               	goto	l1947
  4109  00265C                     l1945:
  4110  00265C  4A01               	infsnz	strlen@s,f,c
  4111  00265E  2A02               	incf	strlen@s+1,f,c
  4112  002660                     l1947:
  4113  002660  C001  FFD9         	movff	strlen@s,fsr2l
  4114  002664  C002  FFDA         	movff	strlen@s+1,fsr2h
  4115  002668  50DF               	movf	indf2,w,c
  4116  00266A  A4D8               	btfss	status,2,c
  4117  00266C  D7F7               	goto	l1945
  4118  00266E  5003               	movf	strlen@a,w,c
  4119  002670  5C01               	subwf	strlen@s,w,c
  4120  002672  6E01               	movwf	?_strlen,c
  4121  002674  5004               	movf	strlen@a+1,w,c
  4122  002676  5802               	subwfb	strlen@s+1,w,c
  4123  002678  6E02               	movwf	?_strlen+1,c
  4124  00267A  0012               	return		;funcret
  4125  00267C                     __end_of_strlen:
  4126                           	opt callstack 0
  4127                           
  4128 ;; *************** function _fputs *****************
  4129 ;; Defined at:
  4130 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  s               2   13[COMRAM] PTR const unsigned char 
  4133 ;;		 -> dbuf(32), 
  4134 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  4135 ;;		 -> sprintf@f(6), 
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;  i               2   18[COMRAM] int 
  4138 ;;  c               1   17[COMRAM] unsigned char 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  2   13[COMRAM] int 
  4141 ;; Registers used:
  4142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4151 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;Total ram usage:        7 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    6
  4155 ;; This function calls:
  4156 ;;		_fputc
  4157 ;; This function is called by:
  4158 ;;		_pad
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text19
  4163  0024FA                     __ptext19:
  4164                           	opt callstack 0
  4165  0024FA                     _fputs:
  4166                           	opt callstack 17
  4167                           
  4168                           ;incstack = 0
  4169  0024FA  0E00               	movlw	0
  4170  0024FC  6E14               	movwf	fputs@i+1,c
  4171  0024FE  0E00               	movlw	0
  4172  002500  6E13               	movwf	fputs@i,c
  4173  002502  D00B               	goto	l1941
  4174  002504                     l1937:
  4175  002504  C012  F005         	movff	fputs@c,fputc@c
  4176  002508  6A06               	clrf	fputc@c+1,c
  4177  00250A  C010  F007         	movff	fputs@fp,fputc@fp
  4178  00250E  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  4179  002512  EC53  F00F         	call	_fputc	;wreg free
  4180  002516  4A13               	infsnz	fputs@i,f,c
  4181  002518  2A14               	incf	fputs@i+1,f,c
  4182  00251A                     l1941:
  4183  00251A  5013               	movf	fputs@i,w,c
  4184  00251C  240E               	addwf	fputs@s,w,c
  4185  00251E  6ED9               	movwf	fsr2l,c
  4186  002520  5014               	movf	fputs@i+1,w,c
  4187  002522  200F               	addwfc	fputs@s+1,w,c
  4188  002524  6EDA               	movwf	fsr2h,c
  4189  002526  50DF               	movf	indf2,w,c
  4190  002528  6E12               	movwf	fputs@c,c
  4191  00252A  5012               	movf	fputs@c,w,c
  4192  00252C  B4D8               	btfsc	status,2,c
  4193  00252E  0012               	return	
  4194  002530  D7E9               	goto	l1937
  4195  002532                     __end_of_fputs:
  4196                           	opt callstack 0
  4197                           
  4198 ;; *************** function _fputc *****************
  4199 ;; Defined at:
  4200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  c               2    4[COMRAM] int 
  4203 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  4204 ;;		 -> sprintf@f(6), 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  2    4[COMRAM] int 
  4209 ;; Registers used:
  4210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4216 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;Total ram usage:        9 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    5
  4223 ;; This function calls:
  4224 ;;		_putch
  4225 ;; This function is called by:
  4226 ;;		_pad
  4227 ;;		_vfpfcnvrt
  4228 ;;		_fputs
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text20
  4233  001EA6                     __ptext20:
  4234                           	opt callstack 0
  4235  001EA6                     _fputc:
  4236                           	opt callstack 17
  4237                           
  4238                           ;incstack = 0
  4239  001EA6  5007               	movf	fputc@fp,w,c
  4240  001EA8  1008               	iorwf	fputc@fp+1,w,c
  4241  001EAA  B4D8               	btfsc	status,2,c
  4242  001EAC  D004               	goto	u1010
  4243  001EAE  5007               	movf	fputc@fp,w,c
  4244  001EB0  1008               	iorwf	fputc@fp+1,w,c
  4245  001EB2  A4D8               	btfss	status,2,c
  4246  001EB4  D004               	goto	l1927
  4247  001EB6                     u1010:
  4248  001EB6  5005               	movf	fputc@c,w,c
  4249  001EB8  ECA5  F013         	call	_putch
  4250  001EBC  0012               	return	
  4251  001EBE                     l1927:
  4252  001EBE  EE20 F004          	lfsr	2,4
  4253  001EC2  5007               	movf	fputc@fp,w,c
  4254  001EC4  26D9               	addwf	fsr2l,f,c
  4255  001EC6  5008               	movf	fputc@fp+1,w,c
  4256  001EC8  22DA               	addwfc	fsr2h,f,c
  4257  001ECA  50DE               	movf	postinc2,w,c
  4258  001ECC  10DE               	iorwf	postinc2,w,c
  4259  001ECE  B4D8               	btfsc	status,2,c
  4260  001ED0  D016               	goto	u1030
  4261  001ED2  EE20 F004          	lfsr	2,4
  4262  001ED6  5007               	movf	fputc@fp,w,c
  4263  001ED8  26D9               	addwf	fsr2l,f,c
  4264  001EDA  5008               	movf	fputc@fp+1,w,c
  4265  001EDC  22DA               	addwfc	fsr2h,f,c
  4266  001EDE  EE10 F002          	lfsr	1,2
  4267  001EE2  5007               	movf	fputc@fp,w,c
  4268  001EE4  26E1               	addwf	fsr1l,f,c
  4269  001EE6  5008               	movf	fputc@fp+1,w,c
  4270  001EE8  22E2               	addwfc	fsr1h,f,c
  4271  001EEA  50DE               	movf	postinc2,w,c
  4272  001EEC  5CE6               	subwf	postinc1,w,c
  4273  001EEE  50E6               	movf	postinc1,w,c
  4274  001EF0  0A80               	xorlw	128
  4275  001EF2  6E0D               	movwf	(??_fputc+4)& (0+255),c
  4276  001EF4  50DE               	movf	postinc2,w,c
  4277  001EF6  0A80               	xorlw	128
  4278  001EF8  580D               	subwfb	(??_fputc+4)& (0+255),w,c
  4279  001EFA  B0D8               	btfsc	status,0,c
  4280  001EFC  0012               	return	
  4281  001EFE                     u1030:
  4282  001EFE  EE20 F002          	lfsr	2,2
  4283  001F02  5007               	movf	fputc@fp,w,c
  4284  001F04  26D9               	addwf	fsr2l,f,c
  4285  001F06  5008               	movf	fputc@fp+1,w,c
  4286  001F08  22DA               	addwfc	fsr2h,f,c
  4287  001F0A  CFDE F009          	movff	postinc2,??_fputc
  4288  001F0E  CFDD F00A          	movff	postdec2,??_fputc+1
  4289  001F12  C007  FFD9         	movff	fputc@fp,fsr2l
  4290  001F16  C008  FFDA         	movff	fputc@fp+1,fsr2h
  4291  001F1A  CFDE F00B          	movff	postinc2,??_fputc+2
  4292  001F1E  CFDD F00C          	movff	postdec2,??_fputc+3
  4293  001F22  5009               	movf	??_fputc,w,c
  4294  001F24  240B               	addwf	??_fputc+2,w,c
  4295  001F26  6ED9               	movwf	fsr2l,c
  4296  001F28  500A               	movf	??_fputc+1,w,c
  4297  001F2A  200C               	addwfc	??_fputc+3,w,c
  4298  001F2C  6EDA               	movwf	fsr2h,c
  4299  001F2E  C005  FFDF         	movff	fputc@c,indf2
  4300  001F32  EE20 F002          	lfsr	2,2
  4301  001F36  5007               	movf	fputc@fp,w,c
  4302  001F38  26D9               	addwf	fsr2l,f,c
  4303  001F3A  5008               	movf	fputc@fp+1,w,c
  4304  001F3C  22DA               	addwfc	fsr2h,f,c
  4305  001F3E  2ADE               	incf	postinc2,f,c
  4306  001F40  0E00               	movlw	0
  4307  001F42  22DD               	addwfc	postdec2,f,c
  4308  001F44  0012               	return		;funcret
  4309  001F46                     __end_of_fputc:
  4310                           	opt callstack 0
  4311                           
  4312 ;; *************** function _isupper *****************
  4313 ;; Defined at:
  4314 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isupper.c"
  4315 ;; Parameters:    Size  Location     Type
  4316 ;;  c               2    0[COMRAM] int 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;		None
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  2    0[COMRAM] int 
  4321 ;; Registers used:
  4322 ;;		wreg, status,2, status,0
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4328 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;Total ram usage:        6 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    1
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_xtoa
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text21
  4343  002596                     __ptext21:
  4344                           	opt callstack 0
  4345  002596                     _isupper:
  4346                           	opt callstack 23
  4347                           
  4348                           ;incstack = 0
  4349  002596  0EBF               	movlw	191
  4350  002598  6E03               	movwf	??_isupper& (0+255),c
  4351  00259A  0EFF               	movlw	255
  4352  00259C  6E04               	movwf	(??_isupper+1)& (0+255),c
  4353  00259E  C001  F005         	movff	isupper@c,??_isupper+2
  4354  0025A2  C002  F006         	movff	isupper@c+1,??_isupper+3
  4355  0025A6  5003               	movf	??_isupper,w,c
  4356  0025A8  2605               	addwf	??_isupper+2,f,c
  4357  0025AA  5004               	movf	??_isupper+1,w,c
  4358  0025AC  2206               	addwfc	??_isupper+3,f,c
  4359  0025AE  5006               	movf	??_isupper+3,w,c
  4360  0025B0  E106               	bnz	u1120
  4361  0025B2  0E1A               	movlw	26
  4362  0025B4  5C05               	subwf	??_isupper+2,w,c
  4363  0025B6  B0D8               	btfsc	status,0,c
  4364  0025B8  D002               	goto	u1120
  4365  0025BA  0E01               	movlw	1
  4366  0025BC  D001               	goto	u1130
  4367  0025BE                     u1120:
  4368  0025BE  0E00               	movlw	0
  4369  0025C0                     u1130:
  4370  0025C0  6E01               	movwf	?_isupper,c
  4371  0025C2  6A02               	clrf	?_isupper+1,c
  4372  0025C4  0012               	return		;funcret
  4373  0025C6                     __end_of_isupper:
  4374                           	opt callstack 0
  4375                           
  4376 ;; *************** function _isalpha *****************
  4377 ;; Defined at:
  4378 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isalpha.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  c               2    0[COMRAM] int 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  2    0[COMRAM] int 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4392 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;Total ram usage:        6 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    1
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_xtoa
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text22
  4407  002532                     __ptext22:
  4408                           	opt callstack 0
  4409  002532                     _isalpha:
  4410                           	opt callstack 23
  4411                           
  4412                           ;incstack = 0
  4413  002532  0E9F               	movlw	159
  4414  002534  6E03               	movwf	??_isalpha& (0+255),c
  4415  002536  0EFF               	movlw	255
  4416  002538  6E04               	movwf	(??_isalpha+1)& (0+255),c
  4417  00253A  0E20               	movlw	32
  4418  00253C  1001               	iorwf	isalpha@c,w,c
  4419  00253E  6E05               	movwf	(??_isalpha+2)& (0+255),c
  4420  002540  0E00               	movlw	0
  4421  002542  1002               	iorwf	isalpha@c+1,w,c
  4422  002544  6E06               	movwf	(??_isalpha+3)& (0+255),c
  4423  002546  5003               	movf	??_isalpha,w,c
  4424  002548  2605               	addwf	??_isalpha+2,f,c
  4425  00254A  5004               	movf	??_isalpha+1,w,c
  4426  00254C  2206               	addwfc	??_isalpha+3,f,c
  4427  00254E  5006               	movf	??_isalpha+3,w,c
  4428  002550  E106               	bnz	u1140
  4429  002552  0E1A               	movlw	26
  4430  002554  5C05               	subwf	??_isalpha+2,w,c
  4431  002556  B0D8               	btfsc	status,0,c
  4432  002558  D002               	goto	u1140
  4433  00255A  0E01               	movlw	1
  4434  00255C  D001               	goto	u1150
  4435  00255E                     u1140:
  4436  00255E  0E00               	movlw	0
  4437  002560                     u1150:
  4438  002560  6E01               	movwf	?_isalpha,c
  4439  002562  6A02               	clrf	?_isalpha+1,c
  4440  002564  0012               	return		;funcret
  4441  002566                     __end_of_isalpha:
  4442                           	opt callstack 0
  4443                           
  4444 ;; *************** function _atoi *****************
  4445 ;; Defined at:
  4446 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;  s               2    7[COMRAM] PTR const unsigned char 
  4449 ;;		 -> STR_28(15), STR_26(17), STR_25(15), STR_18(15), 
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;  n               2   20[COMRAM] int 
  4452 ;;  neg             2   13[COMRAM] int 
  4453 ;; Return value:  Size  Location     Type
  4454 ;;                  2    7[COMRAM] int 
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4462 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;Total ram usage:       15 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    2
  4469 ;; This function calls:
  4470 ;;		___wmul
  4471 ;;		_isdigit
  4472 ;;		_isspace
  4473 ;; This function is called by:
  4474 ;;		_vfpfcnvrt
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text23
  4479  0019EE                     __ptext23:
  4480                           	opt callstack 0
  4481  0019EE                     _atoi:
  4482                           	opt callstack 23
  4483                           
  4484                           ;incstack = 0
  4485  0019EE  0E00               	movlw	0
  4486  0019F0  6E16               	movwf	atoi@n+1,c
  4487  0019F2  0E00               	movlw	0
  4488  0019F4  6E15               	movwf	atoi@n,c
  4489  0019F6  0E00               	movlw	0
  4490  0019F8  6E0F               	movwf	atoi@neg+1,c
  4491  0019FA  0E00               	movlw	0
  4492  0019FC  6E0E               	movwf	atoi@neg,c
  4493  0019FE  D002               	goto	l2089
  4494  001A00                     l2087:
  4495  001A00  4A08               	infsnz	atoi@s,f,c
  4496  001A02  2A09               	incf	atoi@s+1,f,c
  4497  001A04                     l2089:
  4498  001A04  0E01               	movlw	1
  4499  001A06  6E14               	movwf	_atoi$1218,c
  4500  001A08  C008  FFF6         	movff	atoi@s,tblptrl
  4501  001A0C  C009  FFF7         	movff	atoi@s+1,tblptrh
  4502  001A10                     	if	0	;tblptru may be non-zero
  4503  001A10                     	endif
  4504  001A10                     	if	0	;tblptru may be non-zero
  4505  001A10                     	endif
  4506  001A10  0008               	tblrd		*
  4507  001A12  50F5               	movf	tablat,w,c
  4508  001A14  0A20               	xorlw	32
  4509  001A16  B4D8               	btfsc	status,2,c
  4510  001A18  D018               	goto	l2097
  4511  001A1A  0EF7               	movlw	247
  4512  001A1C  6E0A               	movwf	??_atoi& (0+255),c
  4513  001A1E  0EFF               	movlw	255
  4514  001A20  6E0B               	movwf	(??_atoi+1)& (0+255),c
  4515  001A22  C008  FFF6         	movff	atoi@s,tblptrl
  4516  001A26  C009  FFF7         	movff	atoi@s+1,tblptrh
  4517  001A2A                     	if	0	;tblptru may be non-zero
  4518  001A2A                     	endif
  4519  001A2A                     	if	0	;tblptru may be non-zero
  4520  001A2A                     	endif
  4521  001A2A  0008               	tblrd		*
  4522  001A2C  50F5               	movf	tablat,w,c
  4523  001A2E  6E0C               	movwf	(??_atoi+2)& (0+255),c
  4524  001A30  6A0D               	clrf	(??_atoi+3)& (0+255),c
  4525  001A32  500A               	movf	??_atoi,w,c
  4526  001A34  260C               	addwf	??_atoi+2,f,c
  4527  001A36  500B               	movf	??_atoi+1,w,c
  4528  001A38  220D               	addwfc	??_atoi+3,f,c
  4529  001A3A  500D               	movf	??_atoi+3,w,c
  4530  001A3C  E104               	bnz	u1410
  4531  001A3E  0E05               	movlw	5
  4532  001A40  5C0C               	subwf	??_atoi+2,w,c
  4533  001A42  A0D8               	btfss	status,0,c
  4534  001A44  D002               	goto	l2097
  4535  001A46                     u1410:
  4536  001A46  0E00               	movlw	0
  4537  001A48  6E14               	movwf	_atoi$1218,c
  4538  001A4A                     l2097:
  4539  001A4A  C014  F010         	movff	_atoi$1218,_atoi$1217
  4540  001A4E  6A11               	clrf	_atoi$1217+1,c
  4541  001A50  5010               	movf	_atoi$1217,w,c
  4542  001A52  1011               	iorwf	_atoi$1217+1,w,c
  4543  001A54  B4D8               	btfsc	status,2,c
  4544  001A56  D008               	goto	l2107
  4545  001A58  D7D3               	goto	l2087
  4546  001A5A                     l2103:
  4547  001A5A  0E00               	movlw	0
  4548  001A5C  6E0F               	movwf	atoi@neg+1,c
  4549  001A5E  0E01               	movlw	1
  4550  001A60  6E0E               	movwf	atoi@neg,c
  4551  001A62                     l2105:
  4552  001A62  4A08               	infsnz	atoi@s,f,c
  4553  001A64  2A09               	incf	atoi@s+1,f,c
  4554  001A66  D02E               	goto	l2113
  4555  001A68                     l2107:
  4556  001A68  C008  FFF6         	movff	atoi@s,tblptrl
  4557  001A6C  C009  FFF7         	movff	atoi@s+1,tblptrh
  4558  001A70                     	if	0	;tblptru may be non-zero
  4559  001A70                     	endif
  4560  001A70                     	if	0	;tblptru may be non-zero
  4561  001A70                     	endif
  4562  001A70  0008               	tblrd		*
  4563  001A72  50F5               	movf	tablat,w,c
  4564  001A74  6E0A               	movwf	??_atoi& (0+255),c
  4565  001A76  6A0B               	clrf	(??_atoi+1)& (0+255),c
  4566                           
  4567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4568                           ; Switch size 1, requested type "simple"
  4569                           ; Number of cases is 1, Range of values is 0 to 0
  4570                           ; switch strategies available:
  4571                           ; Name         Instructions Cycles
  4572                           ; simple_byte            4     3 (average)
  4573                           ;	Chosen strategy is simple_byte
  4574  001A78  500B               	movf	??_atoi+1,w,c
  4575  001A7A  0A00               	xorlw	0	; case 0
  4576  001A7C  A4D8               	btfss	status,2,c
  4577  001A7E  D022               	goto	l2113
  4578                           
  4579                           ; Switch size 1, requested type "simple"
  4580                           ; Number of cases is 2, Range of values is 43 to 45
  4581                           ; switch strategies available:
  4582                           ; Name         Instructions Cycles
  4583                           ; simple_byte            7     4 (average)
  4584                           ;	Chosen strategy is simple_byte
  4585  001A80  500A               	movf	??_atoi,w,c
  4586  001A82  0A2B               	xorlw	43	; case 43
  4587  001A84  B4D8               	btfsc	status,2,c
  4588  001A86  D7ED               	goto	l2105
  4589  001A88  0A06               	xorlw	6	; case 45
  4590  001A8A  B4D8               	btfsc	status,2,c
  4591  001A8C  D7E6               	goto	l2103
  4592  001A8E  D01A               	goto	l2113
  4593  001A90                     l2109:
  4594  001A90  C015  F001         	movff	atoi@n,___wmul@multiplier
  4595  001A94  C016  F002         	movff	atoi@n+1,___wmul@multiplier+1
  4596  001A98  0E00               	movlw	0
  4597  001A9A  6E04               	movwf	___wmul@multiplicand+1,c
  4598  001A9C  0E0A               	movlw	10
  4599  001A9E  6E03               	movwf	___wmul@multiplicand,c
  4600  001AA0  EC53  F013         	call	___wmul	;wreg free
  4601  001AA4  C008  FFF6         	movff	atoi@s,tblptrl
  4602  001AA8  C009  FFF7         	movff	atoi@s+1,tblptrh
  4603  001AAC                     	if	0	;tblptru may be non-zero
  4604  001AAC                     	endif
  4605  001AAC                     	if	0	;tblptru may be non-zero
  4606  001AAC                     	endif
  4607  001AAC  0008               	tblrd		*
  4608  001AAE  50F5               	movf	tablat,w,c
  4609  001AB0  5E01               	subwf	?___wmul,f,c
  4610  001AB2  0E00               	movlw	0
  4611  001AB4  5A02               	subwfb	?___wmul+1,f,c
  4612  001AB6  0E30               	movlw	48
  4613  001AB8  2401               	addwf	?___wmul,w,c
  4614  001ABA  6E15               	movwf	atoi@n,c
  4615  001ABC  0E00               	movlw	0
  4616  001ABE  2002               	addwfc	?___wmul+1,w,c
  4617  001AC0  6E16               	movwf	atoi@n+1,c
  4618  001AC2  D7CF               	goto	l2105
  4619  001AC4                     l2113:
  4620  001AC4  0ED0               	movlw	208
  4621  001AC6  6E0A               	movwf	??_atoi& (0+255),c
  4622  001AC8  0EFF               	movlw	255
  4623  001ACA  6E0B               	movwf	(??_atoi+1)& (0+255),c
  4624  001ACC  C008  FFF6         	movff	atoi@s,tblptrl
  4625  001AD0  C009  FFF7         	movff	atoi@s+1,tblptrh
  4626  001AD4                     	if	0	;tblptru may be non-zero
  4627  001AD4                     	endif
  4628  001AD4                     	if	0	;tblptru may be non-zero
  4629  001AD4                     	endif
  4630  001AD4  0008               	tblrd		*
  4631  001AD6  50F5               	movf	tablat,w,c
  4632  001AD8  6E0C               	movwf	(??_atoi+2)& (0+255),c
  4633  001ADA  6A0D               	clrf	(??_atoi+3)& (0+255),c
  4634  001ADC  500A               	movf	??_atoi,w,c
  4635  001ADE  260C               	addwf	??_atoi+2,f,c
  4636  001AE0  500B               	movf	??_atoi+1,w,c
  4637  001AE2  220D               	addwfc	??_atoi+3,f,c
  4638  001AE4  500D               	movf	??_atoi+3,w,c
  4639  001AE6  E106               	bnz	u1430
  4640  001AE8  0E0A               	movlw	10
  4641  001AEA  5C0C               	subwf	??_atoi+2,w,c
  4642  001AEC  B0D8               	btfsc	status,0,c
  4643  001AEE  D002               	goto	u1430
  4644  001AF0  0E01               	movlw	1
  4645  001AF2  D001               	goto	u1440
  4646  001AF4                     u1430:
  4647  001AF4  0E00               	movlw	0
  4648  001AF6                     u1440:
  4649  001AF6  6E12               	movwf	_atoi$1219,c
  4650  001AF8  6A13               	clrf	_atoi$1219+1,c
  4651  001AFA  5012               	movf	_atoi$1219,w,c
  4652  001AFC  1013               	iorwf	_atoi$1219+1,w,c
  4653  001AFE  A4D8               	btfss	status,2,c
  4654  001B00  D7C7               	goto	l2109
  4655  001B02  500E               	movf	atoi@neg,w,c
  4656  001B04  100F               	iorwf	atoi@neg+1,w,c
  4657  001B06  A4D8               	btfss	status,2,c
  4658  001B08  D00D               	goto	l1042
  4659  001B0A  C015  F00A         	movff	atoi@n,??_atoi
  4660  001B0E  C016  F00B         	movff	atoi@n+1,??_atoi+1
  4661  001B12  1E0A               	comf	??_atoi,f,c
  4662  001B14  1E0B               	comf	??_atoi+1,f,c
  4663  001B16  4A0A               	infsnz	??_atoi,f,c
  4664  001B18  2A0B               	incf	??_atoi+1,f,c
  4665  001B1A  C00A  F008         	movff	??_atoi,?_atoi
  4666  001B1E  C00B  F009         	movff	??_atoi+1,?_atoi+1
  4667  001B22  0012               	return	
  4668  001B24                     l1042:
  4669  001B24  C015  F008         	movff	atoi@n,?_atoi
  4670  001B28  C016  F009         	movff	atoi@n+1,?_atoi+1
  4671  001B2C  0012               	return		;funcret
  4672  001B2E                     __end_of_atoi:
  4673                           	opt callstack 0
  4674                           
  4675 ;; *************** function _isspace *****************
  4676 ;; Defined at:
  4677 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;  c               2    0[COMRAM] int 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;		None
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  2    0[COMRAM] int 
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4691 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;Total ram usage:        7 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    1
  4698 ;; This function calls:
  4699 ;;		Nothing
  4700 ;; This function is called by:
  4701 ;;		_atoi
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text24
  4706  0024BC                     __ptext24:
  4707                           	opt callstack 0
  4708  0024BC                     _isspace:
  4709                           	opt callstack 23
  4710                           
  4711                           ;incstack = 0
  4712  0024BC  0E01               	movlw	1
  4713  0024BE  6E07               	movwf	_isspace$1244,c
  4714  0024C0  0E20               	movlw	32
  4715  0024C2  1801               	xorwf	isspace@c,w,c
  4716  0024C4  1002               	iorwf	isspace@c+1,w,c
  4717  0024C6  B4D8               	btfsc	status,2,c
  4718  0024C8  D014               	goto	l2015
  4719  0024CA  0EF7               	movlw	247
  4720  0024CC  6E03               	movwf	??_isspace& (0+255),c
  4721  0024CE  0EFF               	movlw	255
  4722  0024D0  6E04               	movwf	(??_isspace+1)& (0+255),c
  4723  0024D2  C001  F005         	movff	isspace@c,??_isspace+2
  4724  0024D6  C002  F006         	movff	isspace@c+1,??_isspace+3
  4725  0024DA  5003               	movf	??_isspace,w,c
  4726  0024DC  2605               	addwf	??_isspace+2,f,c
  4727  0024DE  5004               	movf	??_isspace+1,w,c
  4728  0024E0  2206               	addwfc	??_isspace+3,f,c
  4729  0024E2  5006               	movf	??_isspace+3,w,c
  4730  0024E4  E104               	bnz	u1220
  4731  0024E6  0E05               	movlw	5
  4732  0024E8  5C05               	subwf	??_isspace+2,w,c
  4733  0024EA  A0D8               	btfss	status,0,c
  4734  0024EC  D002               	goto	l2015
  4735  0024EE                     u1220:
  4736  0024EE  0E00               	movlw	0
  4737  0024F0  6E07               	movwf	_isspace$1244,c
  4738  0024F2                     l2015:
  4739  0024F2  C007  F001         	movff	_isspace$1244,?_isspace
  4740  0024F6  6A02               	clrf	?_isspace+1,c
  4741  0024F8  0012               	return		;funcret
  4742  0024FA                     __end_of_isspace:
  4743                           	opt callstack 0
  4744                           
  4745 ;; *************** function _isdigit *****************
  4746 ;; Defined at:
  4747 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  4748 ;; Parameters:    Size  Location     Type
  4749 ;;  c               2    0[COMRAM] int 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  2    0[COMRAM] int 
  4754 ;; Registers used:
  4755 ;;		wreg, status,2, status,0
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4761 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;Total ram usage:        6 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    1
  4768 ;; This function calls:
  4769 ;;		Nothing
  4770 ;; This function is called by:
  4771 ;;		_vfpfcnvrt
  4772 ;;		_atoi
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text25
  4777  0025C6                     __ptext25:
  4778                           	opt callstack 0
  4779  0025C6                     _isdigit:
  4780                           	opt callstack 24
  4781                           
  4782                           ;incstack = 0
  4783  0025C6  0ED0               	movlw	208
  4784  0025C8  6E03               	movwf	??_isdigit& (0+255),c
  4785  0025CA  0EFF               	movlw	255
  4786  0025CC  6E04               	movwf	(??_isdigit+1)& (0+255),c
  4787  0025CE  C001  F005         	movff	isdigit@c,??_isdigit+2
  4788  0025D2  C002  F006         	movff	isdigit@c+1,??_isdigit+3
  4789  0025D6  5003               	movf	??_isdigit,w,c
  4790  0025D8  2605               	addwf	??_isdigit+2,f,c
  4791  0025DA  5004               	movf	??_isdigit+1,w,c
  4792  0025DC  2206               	addwfc	??_isdigit+3,f,c
  4793  0025DE  5006               	movf	??_isdigit+3,w,c
  4794  0025E0  E106               	bnz	u1190
  4795  0025E2  0E0A               	movlw	10
  4796  0025E4  5C05               	subwf	??_isdigit+2,w,c
  4797  0025E6  B0D8               	btfsc	status,0,c
  4798  0025E8  D002               	goto	u1190
  4799  0025EA  0E01               	movlw	1
  4800  0025EC  D001               	goto	u1200
  4801  0025EE                     u1190:
  4802  0025EE  0E00               	movlw	0
  4803  0025F0                     u1200:
  4804  0025F0  6E01               	movwf	?_isdigit,c
  4805  0025F2  6A02               	clrf	?_isdigit+1,c
  4806  0025F4  0012               	return		;funcret
  4807  0025F6                     __end_of_isdigit:
  4808                           	opt callstack 0
  4809                           
  4810 ;; *************** function ___wmul *****************
  4811 ;; Defined at:
  4812 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  multiplier      2    0[COMRAM] unsigned int 
  4815 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  product         2    4[COMRAM] unsigned int 
  4818 ;; Return value:  Size  Location     Type
  4819 ;;                  2    0[COMRAM] unsigned int 
  4820 ;; Registers used:
  4821 ;;		wreg, status,2, status,0, prodl, prodh
  4822 ;; Tracked objects:
  4823 ;;		On entry : 0/0
  4824 ;;		On exit  : 0/0
  4825 ;;		Unchanged: 0/0
  4826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4827 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;Total ram usage:        6 bytes
  4832 ;; Hardware stack levels used:    1
  4833 ;; Hardware stack levels required when called:    1
  4834 ;; This function calls:
  4835 ;;		Nothing
  4836 ;; This function is called by:
  4837 ;;		_atoi
  4838 ;; This function uses a non-reentrant model
  4839 ;;
  4840                           
  4841                           	psect	text26
  4842  0026A6                     __ptext26:
  4843                           	opt callstack 0
  4844  0026A6                     ___wmul:
  4845                           	opt callstack 23
  4846                           
  4847                           ;incstack = 0
  4848  0026A6  5001               	movf	___wmul@multiplier,w,c
  4849  0026A8  0203               	mulwf	___wmul@multiplicand,c
  4850  0026AA  CFF3 F005          	movff	prodl,___wmul@product
  4851  0026AE  CFF4 F006          	movff	prodh,___wmul@product+1
  4852  0026B2  5001               	movf	___wmul@multiplier,w,c
  4853  0026B4  0204               	mulwf	___wmul@multiplicand+1,c
  4854  0026B6  50F3               	movf	prodl,w,c
  4855  0026B8  2606               	addwf	___wmul@product+1,f,c
  4856  0026BA  5002               	movf	___wmul@multiplier+1,w,c
  4857  0026BC  0203               	mulwf	___wmul@multiplicand,c
  4858  0026BE  50F3               	movf	prodl,w,c
  4859  0026C0  2606               	addwf	___wmul@product+1,f,c
  4860  0026C2  C005  F001         	movff	___wmul@product,?___wmul
  4861  0026C6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4862  0026CA  0012               	return		;funcret
  4863  0026CC                     __end_of___wmul:
  4864                           	opt callstack 0
  4865                           
  4866 ;; *************** function _LCD_write_str *****************
  4867 ;; Defined at:
  4868 ;;		line 123 in file "lcd.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  str             2    4[COMRAM] PTR unsigned char 
  4871 ;;		 -> printDateTime@tempDate(20), printDateTime@tempTime(20), STR_23(2), STR_21(2), 
  4872 ;;		 -> enterKey@temp(20), STR_17(9), STR_15(1), STR_14(13), 
  4873 ;;		 -> STR_13(11), STR_12(11), STR_10(6), STR_9(6), 
  4874 ;;		 -> STR_8(6), STR_7(6), STR_5(10), STR_4(10), 
  4875 ;;		 -> STR_3(5), STR_2(5), 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  i               2    8[COMRAM] int 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      void 
  4880 ;; Registers used:
  4881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4888 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4889 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;Total ram usage:        6 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    5
  4894 ;; This function calls:
  4895 ;;		_putch
  4896 ;; This function is called by:
  4897 ;;		_enterKey
  4898 ;;		_printScreen
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text27
  4903  0021FE                     __ptext27:
  4904                           	opt callstack 0
  4905  0021FE                     _LCD_write_str:
  4906                           	opt callstack 24
  4907                           
  4908                           ;lcd.c: 124:     int i=0;
  4909                           
  4910                           ;incstack = 0
  4911  0021FE  0E00               	movlw	0
  4912  002200  6E0A               	movwf	LCD_write_str@i+1,c
  4913  002202  0E00               	movlw	0
  4914  002204  6E09               	movwf	LCD_write_str@i,c
  4915                           
  4916                           ;lcd.c: 125:     while(str[i]!=0){
  4917  002206  D01B               	goto	l2317
  4918  002208                     l2313:
  4919                           
  4920                           ;lcd.c: 126:         putch(str[i]);
  4921  002208  5009               	movf	LCD_write_str@i,w,c
  4922  00220A  2405               	addwf	LCD_write_str@str,w,c
  4923  00220C  6E07               	movwf	??_LCD_write_str& (0+255),c
  4924  00220E  500A               	movf	LCD_write_str@i+1,w,c
  4925  002210  2006               	addwfc	LCD_write_str@str+1,w,c
  4926  002212  6E08               	movwf	(??_LCD_write_str+1)& (0+255),c
  4927  002214  C007  FFF6         	movff	??_LCD_write_str,tblptrl
  4928  002218  C008  FFF7         	movff	??_LCD_write_str+1,tblptrh
  4929  00221C  0E00               	movlw	low (__smallconst shr (0+16))
  4930  00221E  6EF8               	movwf	tblptru,c
  4931  002220  0E0F               	movlw	(high __ramtop+-1)
  4932  002222  64F7               	cpfsgt	tblptrh,c
  4933  002224  D003               	bra	u1657
  4934  002226  0008               	tblrd		*
  4935  002228  50F5               	movf	tablat,w,c
  4936  00222A  D005               	bra	u1650
  4937  00222C                     u1657:
  4938  00222C  CFF6 FFE1          	movff	tblptrl,fsr1l
  4939  002230  CFF7 FFE2          	movff	tblptrh,fsr1h
  4940  002234  50E7               	movf	indf1,w,c
  4941  002236                     u1650:
  4942  002236  ECA5  F013         	call	_putch
  4943                           
  4944                           ;lcd.c: 127:         i++;
  4945  00223A  4A09               	infsnz	LCD_write_str@i,f,c
  4946  00223C  2A0A               	incf	LCD_write_str@i+1,f,c
  4947  00223E                     l2317:
  4948                           
  4949                           ;lcd.c: 125:     while(str[i]!=0){
  4950  00223E  5009               	movf	LCD_write_str@i,w,c
  4951  002240  2405               	addwf	LCD_write_str@str,w,c
  4952  002242  6E07               	movwf	??_LCD_write_str& (0+255),c
  4953  002244  500A               	movf	LCD_write_str@i+1,w,c
  4954  002246  2006               	addwfc	LCD_write_str@str+1,w,c
  4955  002248  6E08               	movwf	(??_LCD_write_str+1)& (0+255),c
  4956  00224A  C007  FFF6         	movff	??_LCD_write_str,tblptrl
  4957  00224E  C008  FFF7         	movff	??_LCD_write_str+1,tblptrh
  4958  002252  0E00               	movlw	low (__smallconst shr (0+16))
  4959  002254  6EF8               	movwf	tblptru,c
  4960  002256  0E0F               	movlw	(high __ramtop+-1)
  4961  002258  64F7               	cpfsgt	tblptrh,c
  4962  00225A  D003               	bra	u1667
  4963  00225C  0008               	tblrd		*
  4964  00225E  50F5               	movf	tablat,w,c
  4965  002260  D005               	bra	u1660
  4966  002262                     u1667:
  4967  002262  CFF6 FFE1          	movff	tblptrl,fsr1l
  4968  002266  CFF7 FFE2          	movff	tblptrh,fsr1h
  4969  00226A  50E7               	movf	indf1,w,c
  4970  00226C                     u1660:
  4971  00226C  0900               	iorlw	0
  4972  00226E  B4D8               	btfsc	status,2,c
  4973  002270  0012               	return	
  4974  002272  D7CA               	goto	l2313
  4975  002274                     __end_of_LCD_write_str:
  4976                           	opt callstack 0
  4977                           
  4978 ;; *************** function _putch *****************
  4979 ;; Defined at:
  4980 ;;		line 100 in file "lcd.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  data            1    wreg     unsigned char 
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  data            1    3[COMRAM] unsigned char 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      void 
  4987 ;; Registers used:
  4988 ;;		wreg, status,2, status,0, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;Total ram usage:        1 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    4
  5001 ;; This function calls:
  5002 ;;		_send_byte
  5003 ;; This function is called by:
  5004 ;;		_LCD_write_str
  5005 ;;		_moveCursorUp
  5006 ;;		_moveCursorDown
  5007 ;;		_fputc
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text28
  5012  00274A                     __ptext28:
  5013                           	opt callstack 0
  5014  00274A                     _putch:
  5015                           	opt callstack 17
  5016                           
  5017                           ;incstack = 0
  5018                           ;putch@data stored from wreg
  5019  00274A  6E04               	movwf	putch@data,c
  5020                           
  5021                           ;lcd.c: 101:     LATDbits.LATD2 = 1;
  5022  00274C  848C               	bsf	3980,2,c	;volatile
  5023                           
  5024                           ;lcd.c: 102:     send_byte((unsigned char)data);
  5025  00274E  5004               	movf	putch@data,w,c
  5026  002750  EC8D  F013         	call	_send_byte
  5027  002754  0012               	return		;funcret
  5028  002756                     __end_of_putch:
  5029                           	opt callstack 0
  5030                           
  5031 ;; *************** function _send_byte *****************
  5032 ;; Defined at:
  5033 ;;		line 53 in file "lcd.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  data            1    wreg     unsigned char 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  data            1    2[COMRAM] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;Total ram usage:        1 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    3
  5054 ;; This function calls:
  5055 ;;		_send_nibble
  5056 ;; This function is called by:
  5057 ;;		_lcdInst
  5058 ;;		_initLCD
  5059 ;;		_putch
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text29
  5064  00271A                     __ptext29:
  5065                           	opt callstack 0
  5066  00271A                     _send_byte:
  5067                           	opt callstack 17
  5068                           
  5069                           ;incstack = 0
  5070                           ;send_byte@data stored from wreg
  5071  00271A  6E03               	movwf	send_byte@data,c
  5072                           
  5073                           ;lcd.c: 55:     send_nibble(data >> 4);
  5074  00271C  3803               	swapf	send_byte@data,w,c
  5075  00271E  0B0F               	andlw	15
  5076  002720  EC78  F013         	call	_send_nibble
  5077                           
  5078                           ;lcd.c: 58:     send_nibble(data);
  5079  002724  5003               	movf	send_byte@data,w,c
  5080  002726  EC78  F013         	call	_send_nibble
  5081  00272A  0012               	return		;funcret
  5082  00272C                     __end_of_send_byte:
  5083                           	opt callstack 0
  5084                           
  5085 ;; *************** function _send_nibble *****************
  5086 ;; Defined at:
  5087 ;;		line 42 in file "lcd.c"
  5088 ;; Parameters:    Size  Location     Type
  5089 ;;  data            1    wreg     unsigned char 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  data            1    1[COMRAM] unsigned char 
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  1    wreg      void 
  5094 ;; Registers used:
  5095 ;;		wreg, status,2, status,0, cstack
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;Total ram usage:        1 bytes
  5106 ;; Hardware stack levels used:    1
  5107 ;; Hardware stack levels required when called:    2
  5108 ;; This function calls:
  5109 ;;		_pulse_e
  5110 ;; This function is called by:
  5111 ;;		_send_byte
  5112 ;;		_initLCD
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text30
  5117  0026F0                     __ptext30:
  5118                           	opt callstack 0
  5119  0026F0                     _send_nibble:
  5120                           	opt callstack 17
  5121                           
  5122                           ;incstack = 0
  5123                           ;send_nibble@data stored from wreg
  5124  0026F0  6E02               	movwf	send_nibble@data,c
  5125                           
  5126                           ;lcd.c: 44:     LATD = (unsigned char)(LATD & 0x0F);
  5127  0026F2  508C               	movf	3980,w,c	;volatile
  5128  0026F4  0B0F               	andlw	15
  5129  0026F6  6E8C               	movwf	3980,c	;volatile
  5130                           
  5131                           ;lcd.c: 45:     LATD = (unsigned char)((data << 4) | LATD);
  5132  0026F8  3802               	swapf	send_nibble@data,w,c
  5133  0026FA  0BF0               	andlw	240
  5134  0026FC  108C               	iorwf	3980,w,c	;volatile
  5135  0026FE  6E8C               	movwf	3980,c	;volatile
  5136                           
  5137                           ;lcd.c: 46:     pulse_e();
  5138  002700  EC3E  F013         	call	_pulse_e	;wreg free
  5139  002704  0012               	return		;funcret
  5140  002706                     __end_of_send_nibble:
  5141                           	opt callstack 0
  5142                           
  5143 ;; *************** function _pulse_e *****************
  5144 ;; Defined at:
  5145 ;;		line 26 in file "lcd.c"
  5146 ;; Parameters:    Size  Location     Type
  5147 ;;		None
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;  interruptSta    1    0[COMRAM] unsigned char 
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      void 
  5152 ;; Registers used:
  5153 ;;		wreg
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;Total ram usage:        1 bytes
  5164 ;; Hardware stack levels used:    1
  5165 ;; Hardware stack levels required when called:    1
  5166 ;; This function calls:
  5167 ;;		Nothing
  5168 ;; This function is called by:
  5169 ;;		_send_nibble
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text31
  5174  00267C                     __ptext31:
  5175                           	opt callstack 0
  5176  00267C                     _pulse_e:
  5177                           	opt callstack 17
  5178                           
  5179                           ;lcd.c: 27:     unsigned char interruptState = INTCONbits.GIE;
  5180                           
  5181                           ;incstack = 0
  5182  00267C  0E00               	movlw	0
  5183  00267E  BEF2               	btfsc	4082,7,c	;volatile
  5184  002680  0E01               	movlw	1
  5185  002682  6E01               	movwf	pulse_e@interruptState,c
  5186                           
  5187                           ;lcd.c: 28:     (INTCONbits.GIE = 0);
  5188  002684  9EF2               	bcf	4082,7,c	;volatile
  5189                           
  5190                           ;lcd.c: 29:     LATDbits.LATD3 = 1;
  5191  002686  868C               	bsf	3980,3,c	;volatile
  5192                           
  5193                           ;lcd.c: 32:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  5194  002688  0E14               	movlw	20
  5195  00268A                     u2037:
  5196  00268A  2EE8               	decfsz	wreg,f,c
  5197  00268C  D7FE               	bra	u2037
  5198  00268E  D000               	nop2	
  5199                           
  5200                           ;lcd.c: 33:     LATDbits.LATD3 = 0;
  5201  002690  968C               	bcf	3980,3,c	;volatile
  5202                           
  5203                           ;lcd.c: 34:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  5204  002692  0E53               	movlw	83
  5205  002694                     u2047:
  5206  002694  2EE8               	decfsz	wreg,f,c
  5207  002696  D7FE               	bra	u2047
  5208  002698  F000               	nop	
  5209                           
  5210                           ;lcd.c: 35:     INTCONbits.GIE = interruptState;
  5211  00269A  B001               	btfsc	pulse_e@interruptState,0,c
  5212  00269C  D002               	bra	u995
  5213  00269E  9EF2               	bcf	4082,7,c	;volatile
  5214  0026A0  D001               	bra	u996
  5215  0026A2                     u995:
  5216  0026A2  8EF2               	bsf	4082,7,c	;volatile
  5217  0026A4                     u996:
  5218  0026A4  0012               	return		;funcret
  5219  0026A6                     __end_of_pulse_e:
  5220                           	opt callstack 0
  5221                           
  5222 ;; *************** function _backKey *****************
  5223 ;; Defined at:
  5224 ;;		line 89 in file "main.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  currentScree    2    0[COMRAM] PTR struct Screen
  5227 ;;		 -> main@currentScreen(48), 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;		None
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  1    wreg      void 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5239 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;Total ram usage:        4 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    1
  5246 ;; This function calls:
  5247 ;;		Nothing
  5248 ;; This function is called by:
  5249 ;;		_main
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           	psect	text32
  5254  0025F6                     __ptext32:
  5255                           	opt callstack 0
  5256  0025F6                     _backKey:
  5257                           	opt callstack 29
  5258                           
  5259                           ;main.c: 90:     if(currentScreen->name == "LOGLIST"){
  5260                           
  5261                           ;incstack = 0
  5262  0025F6  C001  FFD9         	movff	backKey@currentScreen,fsr2l
  5263  0025FA  C002  FFDA         	movff	backKey@currentScreen+1,fsr2h
  5264  0025FE  0E80               	movlw	low STR_6
  5265  002600  18DE               	xorwf	postinc2,w,c
  5266  002602  E10F               	bnz	l185
  5267  002604  0E10               	movlw	high STR_6
  5268  002606  18DE               	xorwf	postinc2,w,c
  5269  002608  A4D8               	btfss	status,2,c
  5270  00260A  0012               	return	
  5271                           
  5272                           ;main.c: 91:         *currentScreen = homeScreen;
  5273  00260C  EE21  F060         	lfsr	2,_homeScreen
  5274  002610  C001  FFE1         	movff	backKey@currentScreen,fsr1l
  5275  002614  C002  FFE2         	movff	backKey@currentScreen+1,fsr1h
  5276  002618  0E2F               	movlw	47
  5277  00261A                     u1801:
  5278  00261A  CFDB FFE3          	movff	plusw2,plusw1
  5279  00261E  06E8               	decf	wreg,f,c
  5280  002620  E2FC               	bc	u1801
  5281  002622                     l185:
  5282  002622  0012               	return		;funcret
  5283  002624                     __end_of_backKey:
  5284                           	opt callstack 0
  5285                           
  5286 ;; *************** function _RTC_SetDateTime *****************
  5287 ;; Defined at:
  5288 ;;		line 68 in file "rtc.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;  rtc             2    3[COMRAM] PTR struct .
  5291 ;;		 -> rtc(7), 
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;		None
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  1    wreg      void 
  5296 ;; Registers used:
  5297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;Total ram usage:        3 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    3
  5310 ;; This function calls:
  5311 ;;		_I2C_Master_Start
  5312 ;;		_I2C_Master_Stop
  5313 ;;		_I2C_Master_Write
  5314 ;; This function is called by:
  5315 ;;		_main
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text33
  5320  001C58                     __ptext33:
  5321                           	opt callstack 0
  5322  001C58                     _RTC_SetDateTime:
  5323                           	opt callstack 27
  5324                           
  5325                           ;rtc.c: 68: void RTC_SetDateTime(rtc_t *rtc);rtc.c: 69: {;rtc.c: 70:     I2C_Master_Star
      +                          t();
  5326                           
  5327                           ;incstack = 0
  5328  001C58  ECB4  F013         	call	_I2C_Master_Start	;wreg free
  5329                           
  5330                           ;rtc.c: 72:     I2C_Master_Write(0xD0u);
  5331  001C5C  0E00               	movlw	0
  5332  001C5E  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  5333  001C60  0ED0               	movlw	208
  5334  001C62  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5335  001C64  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5336                           
  5337                           ;rtc.c: 73:     I2C_Master_Write(0x00u);
  5338  001C68  0E00               	movlw	0
  5339  001C6A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  5340  001C6C  0E00               	movlw	0
  5341  001C6E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5342  001C70  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5343                           
  5344                           ;rtc.c: 75:     I2C_Master_Write(rtc->sec);
  5345  001C74  C004  FFD9         	movff	RTC_SetDateTime@rtc,fsr2l
  5346  001C78  C005  FFDA         	movff	RTC_SetDateTime@rtc+1,fsr2h
  5347  001C7C  50DF               	movf	indf2,w,c
  5348  001C7E  6E06               	movwf	??_RTC_SetDateTime& (0+255),c
  5349  001C80  5006               	movf	??_RTC_SetDateTime,w,c
  5350  001C82  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5351  001C84  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  5352  001C86  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5353                           
  5354                           ;rtc.c: 76:     I2C_Master_Write(rtc->min);
  5355  001C8A  EE20 F001          	lfsr	2,1
  5356  001C8E  5004               	movf	RTC_SetDateTime@rtc,w,c
  5357  001C90  26D9               	addwf	fsr2l,f,c
  5358  001C92  5005               	movf	RTC_SetDateTime@rtc+1,w,c
  5359  001C94  22DA               	addwfc	fsr2h,f,c
  5360  001C96  50DF               	movf	indf2,w,c
  5361  001C98  6E06               	movwf	??_RTC_SetDateTime& (0+255),c
  5362  001C9A  5006               	movf	??_RTC_SetDateTime,w,c
  5363  001C9C  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5364  001C9E  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  5365  001CA0  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5366                           
  5367                           ;rtc.c: 77:     I2C_Master_Write(rtc->hour);
  5368  001CA4  EE20 F002          	lfsr	2,2
  5369  001CA8  5004               	movf	RTC_SetDateTime@rtc,w,c
  5370  001CAA  26D9               	addwf	fsr2l,f,c
  5371  001CAC  5005               	movf	RTC_SetDateTime@rtc+1,w,c
  5372  001CAE  22DA               	addwfc	fsr2h,f,c
  5373  001CB0  50DF               	movf	indf2,w,c
  5374  001CB2  6E06               	movwf	??_RTC_SetDateTime& (0+255),c
  5375  001CB4  5006               	movf	??_RTC_SetDateTime,w,c
  5376  001CB6  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5377  001CB8  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  5378  001CBA  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5379                           
  5380                           ;rtc.c: 78:     I2C_Master_Write(rtc->weekDay);
  5381  001CBE  EE20 F003          	lfsr	2,3
  5382  001CC2  5004               	movf	RTC_SetDateTime@rtc,w,c
  5383  001CC4  26D9               	addwf	fsr2l,f,c
  5384  001CC6  5005               	movf	RTC_SetDateTime@rtc+1,w,c
  5385  001CC8  22DA               	addwfc	fsr2h,f,c
  5386  001CCA  50DF               	movf	indf2,w,c
  5387  001CCC  6E06               	movwf	??_RTC_SetDateTime& (0+255),c
  5388  001CCE  5006               	movf	??_RTC_SetDateTime,w,c
  5389  001CD0  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5390  001CD2  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  5391  001CD4  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5392                           
  5393                           ;rtc.c: 79:     I2C_Master_Write(rtc->date);
  5394  001CD8  EE20 F004          	lfsr	2,4
  5395  001CDC  5004               	movf	RTC_SetDateTime@rtc,w,c
  5396  001CDE  26D9               	addwf	fsr2l,f,c
  5397  001CE0  5005               	movf	RTC_SetDateTime@rtc+1,w,c
  5398  001CE2  22DA               	addwfc	fsr2h,f,c
  5399  001CE4  50DF               	movf	indf2,w,c
  5400  001CE6  6E06               	movwf	??_RTC_SetDateTime& (0+255),c
  5401  001CE8  5006               	movf	??_RTC_SetDateTime,w,c
  5402  001CEA  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5403  001CEC  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  5404  001CEE  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5405                           
  5406                           ;rtc.c: 80:     I2C_Master_Write(rtc->month);
  5407  001CF2  EE20 F005          	lfsr	2,5
  5408  001CF6  5004               	movf	RTC_SetDateTime@rtc,w,c
  5409  001CF8  26D9               	addwf	fsr2l,f,c
  5410  001CFA  5005               	movf	RTC_SetDateTime@rtc+1,w,c
  5411  001CFC  22DA               	addwfc	fsr2h,f,c
  5412  001CFE  50DF               	movf	indf2,w,c
  5413  001D00  6E06               	movwf	??_RTC_SetDateTime& (0+255),c
  5414  001D02  5006               	movf	??_RTC_SetDateTime,w,c
  5415  001D04  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5416  001D06  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  5417  001D08  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5418                           
  5419                           ;rtc.c: 81:     I2C_Master_Write(rtc->year);
  5420  001D0C  EE20 F006          	lfsr	2,6
  5421  001D10  5004               	movf	RTC_SetDateTime@rtc,w,c
  5422  001D12  26D9               	addwf	fsr2l,f,c
  5423  001D14  5005               	movf	RTC_SetDateTime@rtc+1,w,c
  5424  001D16  22DA               	addwfc	fsr2h,f,c
  5425  001D18  50DF               	movf	indf2,w,c
  5426  001D1A  6E06               	movwf	??_RTC_SetDateTime& (0+255),c
  5427  001D1C  5006               	movf	??_RTC_SetDateTime,w,c
  5428  001D1E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5429  001D20  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  5430  001D22  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5431                           
  5432                           ;rtc.c: 83:     I2C_Master_Stop();
  5433  001D26  ECB0  F013         	call	_I2C_Master_Stop	;wreg free
  5434  001D2A  0012               	return		;funcret
  5435  001D2C                     __end_of_RTC_SetDateTime:
  5436                           	opt callstack 0
  5437                           
  5438 ;; *************** function _RTC_Init *****************
  5439 ;; Defined at:
  5440 ;;		line 31 in file "rtc.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;		None
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;		None
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  1    wreg      void 
  5447 ;; Registers used:
  5448 ;;		wreg, status,2, status,0, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;Total ram usage:        0 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    3
  5461 ;; This function calls:
  5462 ;;		_I2C_Master_Start
  5463 ;;		_I2C_Master_Stop
  5464 ;;		_I2C_Master_Write
  5465 ;; This function is called by:
  5466 ;;		_main
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text34
  5471  002624                     __ptext34:
  5472                           	opt callstack 0
  5473  002624                     _RTC_Init:
  5474                           	opt callstack 27
  5475                           
  5476                           ;rtc.c: 33:     I2C_Master_Start();
  5477                           
  5478                           ;incstack = 0
  5479  002624  ECB4  F013         	call	_I2C_Master_Start	;wreg free
  5480                           
  5481                           ;rtc.c: 35:     I2C_Master_Write(0xD0u);
  5482  002628  0E00               	movlw	0
  5483  00262A  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  5484  00262C  0ED0               	movlw	208
  5485  00262E  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5486  002630  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5487                           
  5488                           ;rtc.c: 36:     I2C_Master_Write(0x07u);
  5489  002634  0E00               	movlw	0
  5490  002636  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  5491  002638  0E07               	movlw	7
  5492  00263A  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5493  00263C  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5494                           
  5495                           ;rtc.c: 38:     I2C_Master_Write(0x00);
  5496  002640  0E00               	movlw	0
  5497  002642  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  5498  002644  0E00               	movlw	0
  5499  002646  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  5500  002648  ECAB  F013         	call	_I2C_Master_Write	;wreg free
  5501                           
  5502                           ;rtc.c: 40:     I2C_Master_Stop();
  5503  00264C  ECB0  F013         	call	_I2C_Master_Stop	;wreg free
  5504  002650  0012               	return		;funcret
  5505  002652                     __end_of_RTC_Init:
  5506                           	opt callstack 0
  5507                           
  5508 ;; *************** function _I2C_Master_Write *****************
  5509 ;; Defined at:
  5510 ;;		line 66 in file "I2C.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;		None
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  1    wreg      void 
  5517 ;; Registers used:
  5518 ;;		wreg, status,2, status,0, cstack
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/0
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5524 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;Total ram usage:        2 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; Hardware stack levels required when called:    2
  5531 ;; This function calls:
  5532 ;;		_I2C_Master_Wait
  5533 ;; This function is called by:
  5534 ;;		_RTC_Init
  5535 ;;		_RTC_SetDateTime
  5536 ;;		_RTC_GetDateTime
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           	psect	text35
  5541  002756                     __ptext35:
  5542                           	opt callstack 0
  5543  002756                     _I2C_Master_Write:
  5544                           	opt callstack 25
  5545                           
  5546                           ;I2C.c: 67:     I2C_Master_Wait();
  5547                           
  5548                           ;incstack = 0
  5549  002756  EC96  F013         	call	_I2C_Master_Wait	;wreg free
  5550                           
  5551                           ;I2C.c: 70:     SSPBUF = byteToWrite;
  5552  00275A  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  5553  00275E  0012               	return		;funcret
  5554  002760                     __end_of_I2C_Master_Write:
  5555                           	opt callstack 0
  5556                           
  5557 ;; *************** function _I2C_Master_Stop *****************
  5558 ;; Defined at:
  5559 ;;		line 61 in file "I2C.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;		None
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;		None
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, status,2, status,0, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;Total ram usage:        0 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    2
  5580 ;; This function calls:
  5581 ;;		_I2C_Master_Wait
  5582 ;; This function is called by:
  5583 ;;		_RTC_Init
  5584 ;;		_RTC_SetDateTime
  5585 ;;		_RTC_GetDateTime
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text36
  5590  002760                     __ptext36:
  5591                           	opt callstack 0
  5592  002760                     _I2C_Master_Stop:
  5593                           	opt callstack 25
  5594                           
  5595                           ;I2C.c: 62:     I2C_Master_Wait();
  5596                           
  5597                           ;incstack = 0
  5598  002760  EC96  F013         	call	_I2C_Master_Wait	;wreg free
  5599                           
  5600                           ;I2C.c: 63:     SSPCON2bits.PEN = 1;
  5601  002764  84C5               	bsf	4037,2,c	;volatile
  5602  002766  0012               	return		;funcret
  5603  002768                     __end_of_I2C_Master_Stop:
  5604                           	opt callstack 0
  5605                           
  5606 ;; *************** function _I2C_Master_Start *****************
  5607 ;; Defined at:
  5608 ;;		line 51 in file "I2C.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;		None
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;		None
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  1    wreg      void 
  5615 ;; Registers used:
  5616 ;;		wreg, status,2, status,0, cstack
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;Total ram usage:        0 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:    2
  5629 ;; This function calls:
  5630 ;;		_I2C_Master_Wait
  5631 ;; This function is called by:
  5632 ;;		_RTC_Init
  5633 ;;		_RTC_SetDateTime
  5634 ;;		_RTC_GetDateTime
  5635 ;; This function uses a non-reentrant model
  5636 ;;
  5637                           
  5638                           	psect	text37
  5639  002768                     __ptext37:
  5640                           	opt callstack 0
  5641  002768                     _I2C_Master_Start:
  5642                           	opt callstack 25
  5643                           
  5644                           ;I2C.c: 52:     I2C_Master_Wait();
  5645                           
  5646                           ;incstack = 0
  5647  002768  EC96  F013         	call	_I2C_Master_Wait	;wreg free
  5648                           
  5649                           ;I2C.c: 53:     SSPCON2bits.SEN = 1;
  5650  00276C  80C5               	bsf	4037,0,c	;volatile
  5651  00276E  0012               	return		;funcret
  5652  002770                     __end_of_I2C_Master_Start:
  5653                           	opt callstack 0
  5654                           
  5655 ;; *************** function _I2C_Master_Wait *****************
  5656 ;; Defined at:
  5657 ;;		line 17 in file "I2C.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;		None
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;		None
  5662 ;; Return value:  Size  Location     Type
  5663 ;;                  1    wreg      void 
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, status,0
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5675 ;;Total ram usage:        1 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    1
  5678 ;; This function calls:
  5679 ;;		Nothing
  5680 ;; This function is called by:
  5681 ;;		_I2C_Master_Start
  5682 ;;		_I2C_Master_Stop
  5683 ;;		_I2C_Master_Write
  5684 ;;		_I2C_Master_Read
  5685 ;;		_I2C_Master_RepeatedStart
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           	psect	text38
  5690  00272C                     __ptext38:
  5691                           	opt callstack 0
  5692  00272C                     _I2C_Master_Wait:
  5693                           	opt callstack 25
  5694                           
  5695                           ;I2C.c: 22:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F)){
  5696                           
  5697                           ;I2C.c: 24:     }
  5698                           
  5699                           ;incstack = 0
  5700  00272C  B4C7               	btfsc	4039,2,c	;volatile
  5701  00272E  D7FE               	goto	_I2C_Master_Wait
  5702  002730  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  5703  002734  0E1F               	movlw	31
  5704  002736  1601               	andwf	??_I2C_Master_Wait,f,c
  5705  002738  B4D8               	btfsc	status,2,c
  5706  00273A  0012               	return	
  5707  00273C  D7F7               	goto	_I2C_Master_Wait
  5708  00273E                     __end_of_I2C_Master_Wait:
  5709                           	opt callstack 0
  5710                           
  5711 ;; *************** function _I2C_Master_Init *****************
  5712 ;; Defined at:
  5713 ;;		line 28 in file "I2C.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;		None
  5718 ;; Return value:  Size  Location     Type
  5719 ;;                  1    wreg      void 
  5720 ;; Registers used:
  5721 ;;		wreg, status,2, status,0, cstack
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5727 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5731 ;;Total ram usage:        8 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:    2
  5734 ;; This function calls:
  5735 ;;		___lldiv
  5736 ;; This function is called by:
  5737 ;;		_main
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           	psect	text39
  5742  0022DE                     __ptext39:
  5743                           	opt callstack 0
  5744  0022DE                     _I2C_Master_Init:
  5745                           	opt callstack 28
  5746                           
  5747                           ;I2C.c: 30:     SSPCON1bits.SSPEN = 0;
  5748                           
  5749                           ;incstack = 0
  5750  0022DE  9AC6               	bcf	4038,5,c	;volatile
  5751                           
  5752                           ;I2C.c: 33:     TRISCbits.TRISC3 = 1;
  5753  0022E0  8694               	bsf	3988,3,c	;volatile
  5754                           
  5755                           ;I2C.c: 34:     TRISCbits.TRISC4 = 1;
  5756  0022E2  8894               	bsf	3988,4,c	;volatile
  5757                           
  5758                           ;I2C.c: 39:     SSPADD = (10000000 / (4 * clockFreq)) - 1;
  5759  0022E4  0E80               	movlw	128
  5760  0022E6  6E01               	movwf	___lldiv@dividend,c
  5761  0022E8  0E96               	movlw	150
  5762  0022EA  6E02               	movwf	___lldiv@dividend+1,c
  5763  0022EC  0E98               	movlw	152
  5764  0022EE  6E03               	movwf	___lldiv@dividend+2,c
  5765  0022F0  0E00               	movlw	0
  5766  0022F2  6E04               	movwf	___lldiv@dividend+3,c
  5767  0022F4  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  5768  0022F8  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  5769  0022FC  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  5770  002300  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  5771  002304  0E02               	movlw	2
  5772  002306                     u1735:
  5773  002306  90D8               	bcf	status,0,c
  5774  002308  3612               	rlcf	??_I2C_Master_Init,f,c
  5775  00230A  3613               	rlcf	??_I2C_Master_Init+1,f,c
  5776  00230C  3614               	rlcf	??_I2C_Master_Init+2,f,c
  5777  00230E  3615               	rlcf	??_I2C_Master_Init+3,f,c
  5778  002310  2EE8               	decfsz	wreg,f,c
  5779  002312  D7F9               	goto	u1735
  5780  002314  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  5781  002318  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5782  00231C  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5783  002320  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5784  002324  ECBE  F010         	call	___lldiv	;wreg free
  5785  002328  0401               	decf	?___lldiv,w,c
  5786  00232A  6EC8               	movwf	4040,c	;volatile
  5787                           
  5788                           ;I2C.c: 42:     SSPSTAT = 0b10000000;
  5789  00232C  0E80               	movlw	128
  5790  00232E  6EC7               	movwf	4039,c	;volatile
  5791                           
  5792                           ;I2C.c: 45:     SSPCON1 = 0b00101000;
  5793  002330  0E28               	movlw	40
  5794  002332  6EC6               	movwf	4038,c	;volatile
  5795                           
  5796                           ;I2C.c: 48:     SSPCON2 = 0b00000000;
  5797  002334  0E00               	movlw	0
  5798  002336  6EC5               	movwf	4037,c	;volatile
  5799  002338  0012               	return		;funcret
  5800  00233A                     __end_of_I2C_Master_Init:
  5801                           	opt callstack 0
  5802                           
  5803 ;; *************** function ___lldiv *****************
  5804 ;; Defined at:
  5805 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  dividend        4    0[COMRAM] unsigned long 
  5808 ;;  divisor         4    4[COMRAM] unsigned long 
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;  quotient        4    8[COMRAM] unsigned long 
  5811 ;;  counter         1   12[COMRAM] unsigned char 
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  4    0[COMRAM] unsigned long 
  5814 ;; Registers used:
  5815 ;;		wreg, status,2, status,0
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5821 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;Total ram usage:       13 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:    1
  5828 ;; This function calls:
  5829 ;;		Nothing
  5830 ;; This function is called by:
  5831 ;;		_I2C_Master_Init
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           	psect	text40
  5836  00217C                     __ptext40:
  5837                           	opt callstack 0
  5838  00217C                     ___lldiv:
  5839                           	opt callstack 28
  5840                           
  5841                           ;incstack = 0
  5842  00217C  0E00               	movlw	0
  5843  00217E  6E09               	movwf	___lldiv@quotient,c
  5844  002180  0E00               	movlw	0
  5845  002182  6E0A               	movwf	___lldiv@quotient+1,c
  5846  002184  0E00               	movlw	0
  5847  002186  6E0B               	movwf	___lldiv@quotient+2,c
  5848  002188  0E00               	movlw	0
  5849  00218A  6E0C               	movwf	___lldiv@quotient+3,c
  5850  00218C  5005               	movf	___lldiv@divisor,w,c
  5851  00218E  1006               	iorwf	___lldiv@divisor+1,w,c
  5852  002190  1007               	iorwf	___lldiv@divisor+2,w,c
  5853  002192  1008               	iorwf	___lldiv@divisor+3,w,c
  5854  002194  B4D8               	btfsc	status,2,c
  5855  002196  D02A               	goto	l370
  5856  002198  0E01               	movlw	1
  5857  00219A  6E0D               	movwf	___lldiv@counter,c
  5858  00219C  D006               	goto	l2349
  5859  00219E                     l2347:
  5860  00219E  90D8               	bcf	status,0,c
  5861  0021A0  3605               	rlcf	___lldiv@divisor,f,c
  5862  0021A2  3606               	rlcf	___lldiv@divisor+1,f,c
  5863  0021A4  3607               	rlcf	___lldiv@divisor+2,f,c
  5864  0021A6  3608               	rlcf	___lldiv@divisor+3,f,c
  5865  0021A8  2A0D               	incf	___lldiv@counter,f,c
  5866  0021AA                     l2349:
  5867  0021AA  AE08               	btfss	___lldiv@divisor+3,7,c
  5868  0021AC  D7F8               	goto	l2347
  5869  0021AE                     u1710:
  5870  0021AE  90D8               	bcf	status,0,c
  5871  0021B0  3609               	rlcf	___lldiv@quotient,f,c
  5872  0021B2  360A               	rlcf	___lldiv@quotient+1,f,c
  5873  0021B4  360B               	rlcf	___lldiv@quotient+2,f,c
  5874  0021B6  360C               	rlcf	___lldiv@quotient+3,f,c
  5875  0021B8  5005               	movf	___lldiv@divisor,w,c
  5876  0021BA  5C01               	subwf	___lldiv@dividend,w,c
  5877  0021BC  5006               	movf	___lldiv@divisor+1,w,c
  5878  0021BE  5802               	subwfb	___lldiv@dividend+1,w,c
  5879  0021C0  5007               	movf	___lldiv@divisor+2,w,c
  5880  0021C2  5803               	subwfb	___lldiv@dividend+2,w,c
  5881  0021C4  5008               	movf	___lldiv@divisor+3,w,c
  5882  0021C6  5804               	subwfb	___lldiv@dividend+3,w,c
  5883  0021C8  A0D8               	btfss	status,0,c
  5884  0021CA  D009               	goto	l2359
  5885  0021CC  5005               	movf	___lldiv@divisor,w,c
  5886  0021CE  5E01               	subwf	___lldiv@dividend,f,c
  5887  0021D0  5006               	movf	___lldiv@divisor+1,w,c
  5888  0021D2  5A02               	subwfb	___lldiv@dividend+1,f,c
  5889  0021D4  5007               	movf	___lldiv@divisor+2,w,c
  5890  0021D6  5A03               	subwfb	___lldiv@dividend+2,f,c
  5891  0021D8  5008               	movf	___lldiv@divisor+3,w,c
  5892  0021DA  5A04               	subwfb	___lldiv@dividend+3,f,c
  5893  0021DC  8009               	bsf	___lldiv@quotient,0,c
  5894  0021DE                     l2359:
  5895  0021DE  90D8               	bcf	status,0,c
  5896  0021E0  3208               	rrcf	___lldiv@divisor+3,f,c
  5897  0021E2  3207               	rrcf	___lldiv@divisor+2,f,c
  5898  0021E4  3206               	rrcf	___lldiv@divisor+1,f,c
  5899  0021E6  3205               	rrcf	___lldiv@divisor,f,c
  5900  0021E8  2E0D               	decfsz	___lldiv@counter,f,c
  5901  0021EA  D7E1               	goto	u1710
  5902  0021EC                     l370:
  5903  0021EC  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5904  0021F0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5905  0021F4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5906  0021F8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5907  0021FC  0012               	return		;funcret
  5908  0021FE                     __end_of___lldiv:
  5909                           	opt callstack 0
  5910                           
  5911 ;; *************** function _high_isr *****************
  5912 ;; Defined at:
  5913 ;;		line 214 in file "main.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;		None
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;		None
  5918 ;; Return value:  Size  Location     Type
  5919 ;;                  1    wreg      void 
  5920 ;; Registers used:
  5921 ;;		wreg, status,2
  5922 ;; Tracked objects:
  5923 ;;		On entry : 0/0
  5924 ;;		On exit  : 0/0
  5925 ;;		Unchanged: 0/0
  5926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;Total ram usage:        0 bytes
  5932 ;; Hardware stack levels used:    1
  5933 ;; This function calls:
  5934 ;;		Nothing
  5935 ;; This function is called by:
  5936 ;;		Interrupt level 2
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	intcode
  5941  000008                     __pintcode:
  5942                           	opt callstack 0
  5943  000008                     _high_isr:
  5944                           	opt callstack 17
  5945                           
  5946                           ;incstack = 0
  5947  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5948  00000A  ED83  F013         	call	int_func,f	;refresh shadow registers
  5949                           
  5950                           	psect	intcode_body
  5951  002706                     __pintcode_body:
  5952                           	opt callstack 17
  5953  002706                     int_func:
  5954                           	opt callstack 17
  5955  002706  0006               	pop		; remove dummy address from shadow register refresh
  5956                           
  5957                           ;main.c: 217:     if(INT1IF && INT1IE){
  5958  002708  B0F0               	btfsc	4080,0,c	;volatile
  5959  00270A  A6F0               	btfss	4080,3,c	;volatile
  5960  00270C  D004               	goto	i2l217
  5961                           
  5962                           ;main.c: 220:         key_was_pressed = 1;
  5963  00270E  0E01               	movlw	1
  5964  002710  0100               	movlb	0	; () banked
  5965  002712  6FE7               	movwf	_key_was_pressed& (0+255),b	;volatile
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;main.c: 221:         INT1IF = 0;
  5969  002714  90F0               	bcf	4080,0,c	;volatile
  5970  002716                     i2l217:
  5971  002716  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5972  002718  0011               	retfie		f
  5973  00271A                     __end_of_high_isr:
  5974                           	opt callstack 0
  5975                           
  5976                           	psect	rparam
  5977  0000                     
  5978                           	psect	temp
  5979  00007F                     btemp:
  5980                           	opt callstack 0
  5981  00007F                     	ds	1
  5982  0000                     int$flags	set	btemp
  5983  0000                     wtemp8	set	btemp+1
  5984  0000                     ttemp5	set	btemp+1
  5985  0000                     ttemp6	set	btemp+4
  5986  0000                     ttemp7	set	btemp+8
  5987                           tosu	equ	0xFFF
  5988                           tosh	equ	0xFFE
  5989                           tosl	equ	0xFFD
  5990                           stkptr	equ	0xFFC
  5991                           pclatu	equ	0xFFB
  5992                           pclath	equ	0xFFA
  5993                           pcl	equ	0xFF9
  5994                           tblptru	equ	0xFF8
  5995                           tblptrh	equ	0xFF7
  5996                           tblptrl	equ	0xFF6
  5997                           tablat	equ	0xFF5
  5998                           prodh	equ	0xFF4
  5999                           prodl	equ	0xFF3
  6000                           indf0	equ	0xFEF
  6001                           postinc0	equ	0xFEE
  6002                           postdec0	equ	0xFED
  6003                           preinc0	equ	0xFEC
  6004                           plusw0	equ	0xFEB
  6005                           fsr0h	equ	0xFEA
  6006                           fsr0l	equ	0xFE9
  6007                           wreg	equ	0xFE8
  6008                           indf1	equ	0xFE7
  6009                           postinc1	equ	0xFE6
  6010                           postdec1	equ	0xFE5
  6011                           preinc1	equ	0xFE4
  6012                           plusw1	equ	0xFE3
  6013                           fsr1h	equ	0xFE2
  6014                           fsr1l	equ	0xFE1
  6015                           bsr	equ	0xFE0
  6016                           indf2	equ	0xFDF
  6017                           postinc2	equ	0xFDE
  6018                           postdec2	equ	0xFDD
  6019                           preinc2	equ	0xFDC
  6020                           plusw2	equ	0xFDB
  6021                           fsr2h	equ	0xFDA
  6022                           fsr2l	equ	0xFD9
  6023                           status	equ	0xFD8


Data Sizes:
    Strings     148
    Constant    23
    Data        144
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    126     126
    BANK0           128     95     111
    BANK1           256      0     176
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    S303$7$0	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    S303$8$0	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    S303$5$0	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    S303$6$0	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[15]), STR_26(CODE[17]), STR_25(CODE[15]), STR_18(CODE[15]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    S1257_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[15]), STR_26(CODE[17]), STR_25(CODE[15]), STR_18(CODE[15]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[15]), STR_26(CODE[17]), STR_25(CODE[15]), STR_18(CODE[15]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[15]), STR_26(CODE[17]), STR_25(CODE[15]), STR_18(CODE[15]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(COMRAM[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    RTC_GetDateTime@rtc	PTR struct . size(2) Largest target is 7
		 -> rtc(BANK0[7]), 

    RTC_SetDateTime@rtc	PTR struct . size(2) Largest target is 7
		 -> rtc(BANK0[7]), 

    printDateTime@currentScreen.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    printDateTime@currentScreen.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    printDateTime@currentScreen.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    printDateTime@currentScreen.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    printDateTime@currentScreen.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    printDateTime@currentScreen.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    printDateTime@currentScreen	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    printScreen@currentScreen.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    printScreen@currentScreen.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    printScreen@currentScreen.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    printScreen@currentScreen.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    printScreen@currentScreen.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    printScreen@currentScreen.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    printScreen@currentScreen	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    currentScreen.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    currentScreen.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    currentScreen.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    currentScreen.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    currentScreen.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    currentScreen.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    backKey@currentScreen.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    backKey@currentScreen.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    backKey@currentScreen.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    backKey@currentScreen.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    backKey@currentScreen.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    backKey@currentScreen.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    backKey@currentScreen	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    enterKey@currentScreen.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    enterKey@currentScreen.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    enterKey@currentScreen.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    enterKey@currentScreen.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    enterKey@currentScreen.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    enterKey@currentScreen.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    enterKey@currentScreen	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    moveCursorDown@currentScreen.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    moveCursorDown@currentScreen.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    moveCursorDown@currentScreen.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    moveCursorDown@currentScreen.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    moveCursorDown@currentScreen.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    moveCursorDown@currentScreen.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    moveCursorDown@currentScreen	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    moveCursorUp@currentScreen.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    moveCursorUp@currentScreen.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    moveCursorUp@currentScreen.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    moveCursorUp@currentScreen.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    moveCursorUp@currentScreen.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    moveCursorUp@currentScreen.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    moveCursorUp@currentScreen	PTR struct Screen size(2) Largest target is 65
		 -> main@currentScreen(BANK0[48]), 

    runningOperation.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    runningOperation.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    runningOperation.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    runningOperation.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    runningOperation.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    runningOperation.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    logList.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    logList.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    logList.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    logList.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    logList.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    logList.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    S303Screen$backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    homeScreen.backKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> backKey(), 

    S303Screen$enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    homeScreen.enterKey	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> enterKey(), 

    S303Screen$moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    homeScreen.moveCursorDown	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorDown(), 

    S303Screen$moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    homeScreen.moveCursorUp	PTR FTN(PTR struct Screen,)void  size(2) Largest target is 1
		 -> moveCursorUp(), 

    S303Screen$lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    homeScreen.lineText	PTR unsigned char [16] size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), enterKey@temp(BANK0[20]), STR_15(CODE[1]), 
		 -> STR_14(CODE[13]), STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), 
		 -> STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[5]), 

    S303Screen$name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    homeScreen.name	PTR unsigned char  size(2) Largest target is 8
		 -> STR_11(CODE[8]), STR_6(CODE[8]), STR_1(CODE[5]), 

    LCD_write_str@str	PTR unsigned char  size(2) Largest target is 20
		 -> printDateTime@tempDate(BANK0[20]), printDateTime@tempTime(BANK0[20]), STR_23(CODE[2]), STR_21(CODE[2]), 
		 -> enterKey@temp(BANK0[20]), STR_17(CODE[9]), STR_15(CODE[1]), STR_14(CODE[13]), 
		 -> STR_13(CODE[11]), STR_12(CODE[11]), STR_10(CODE[6]), STR_9(CODE[6]), 
		 -> STR_8(CODE[6]), STR_7(CODE[6]), STR_5(CODE[10]), STR_4(CODE[10]), 
		 -> STR_3(CODE[5]), STR_2(CODE[5]), 


Critical Paths under _main in COMRAM

    _printScreen->_printDateTime
    _printDateTime->_sprintf
    _RTC_GetDateTime->_I2C_Master_Read
    _RTC_GetDateTime->_I2C_Master_Write
    _I2C_Master_Read->_I2C_Master_Wait
    _moveCursorUp->_LCD_set_cursor
    _moveCursorDown->_LCD_set_cursor
    _LCD_set_cursor->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _enterKey->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _atoi->_isspace
    _LCD_write_str->_putch
    _putch->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e
    _RTC_SetDateTime->_I2C_Master_Write
    _RTC_Init->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Init->___lldiv

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printScreen
    _printScreen->_printDateTime

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _high_isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                51    51      0   39255
                                             44 BANK0     51    51      0
                    _I2C_Master_Init
                           _RTC_Init
                    _RTC_SetDateTime
                            _backKey *
                           _enterKey *
                            _initLCD
                            _lcdInst
                     _moveCursorDown *
                       _moveCursorUp *
                        _printScreen
 ---------------------------------------------------------------------------------
 (1) _printScreen                                          4     2      2   18530
                                             40 BANK0      4     2      2
                     _LCD_set_cursor
                      _LCD_write_str
                      _printDateTime
 ---------------------------------------------------------------------------------
 (2) _printDateTime                                       45    43      2   13907
                                            121 COMRAM     5     3      2
                                              0 BANK0     40    40      0
                     _LCD_set_cursor
                    _RTC_GetDateTime
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _RTC_GetDateTime                                      2     0      2    1437
                                              3 COMRAM     2     0      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _moveCursorUp                                         6     4      2    3106
                                              8 COMRAM     6     4      2
                     _LCD_set_cursor
                              _putch
 ---------------------------------------------------------------------------------
 (1) _moveCursorDown                                       6     4      2    3106
                                              8 COMRAM     6     4      2
                     _LCD_set_cursor
                              _putch
 ---------------------------------------------------------------------------------
 (3) _LCD_set_cursor                                       4     0      4    2832
                                              4 COMRAM     4     0      4
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _enterKey                                            24    22      2   10710
                                            121 COMRAM     4     2      2
                                              0 BANK0     20    20      0
                      _LCD_write_str
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             20    10     10    9232
                                            101 COMRAM    20    10     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     2      6    8423
                                             93 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           46    40      6    8049
                                             70 COMRAM    23    17      6
                               _atoi
                              _fputc
                            _isdigit
                               _xtoa
 ---------------------------------------------------------------------------------
 (6) _xtoa                                                39    28     11    4485
                                             31 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (7) _toupper                                              8     6      2     412
                                              6 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (8) _islower                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _pad                                                 11     5      6    2931
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (8) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                7     3      4    1346
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                9     5      4     945
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _isupper                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _isalpha                                              6     4      2     161
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _atoi                                                15    13      2    1444
                                              7 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (7) _isspace                                              7     5      2     207
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              6     4      2     237
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     603
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCD_write_str                                        6     4      2    1265
                                              4 COMRAM     6     4      2
                              _putch
 ---------------------------------------------------------------------------------
 (10) _putch                                               1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (11) _send_byte                                           1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (12) _send_nibble                                         1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (13) _pulse_e                                             1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _backKey                                              4     2      2      97
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _RTC_SetDateTime                                      3     1      2    1392
                                              3 COMRAM     3     1      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (1) _RTC_Init                                             0     0      0    1162
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2    1162
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _high_isr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _RTC_Init
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _RTC_SetDateTime
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _backKey *
   _enterKey *
     _LCD_write_str
       _putch
         _send_byte
           _send_nibble
             _pulse_e
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _fputc
             _putch
               _send_byte
                 _send_nibble
                   _pulse_e
           _isdigit
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
               _fputs
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
               _strlen
             _toupper
               _islower
   _initLCD *
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst *
     _send_byte
       _send_nibble
         _pulse_e
   _moveCursorDown *
     _LCD_set_cursor
       _lcdInst
         _send_byte
           _send_nibble
             _pulse_e
     _putch
       _send_byte
         _send_nibble
           _pulse_e
   _moveCursorUp *
     _LCD_set_cursor
       _lcdInst
         _send_byte
           _send_nibble
             _pulse_e
     _putch
       _send_byte
         _send_nibble
           _pulse_e
   _printScreen *
     _LCD_set_cursor
       _lcdInst
         _send_byte
           _send_nibble
             _pulse_e
     _LCD_write_str
       _putch
         _send_byte
           _send_nibble
             _pulse_e
     _printDateTime
       _LCD_set_cursor
         _lcdInst
           _send_byte
             _send_nibble
               _pulse_e
       _RTC_GetDateTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _isdigit
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _putch
                     _send_byte
                       _send_nibble
                         _pulse_e
                 _fputs
                   _fputc
                     _putch
                       _send_byte
                         _send_nibble
                           _pulse_e
                 _strlen
               _toupper
                 _islower

 _high_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B0       7       68.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5F      6F       5       86.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7E      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     19D      34        0.0%
DATA                 0      0     19D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Feb 05 13:36:15 2019

                         l51 23B0                           l52 23C2                  __CFG_CPD$ON 000000  
        ___wmul@multiplicand 0003                  __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                __CFG_OSC$HS 000000                          l211 1C56                          l181 1EA4  
                        l185 2622                          l281 164A                          l370 21EC  
                        l269 1F76                          l279 1642                 __CFG_CPB$OFF 000000  
                        u995 26A2                          u996 26A4      __end_of_RTC_SetDateTime 1D2C  
                        _pad 1F46                          _rtc 00E8                          tosl 000FFD  
                        wreg 000FE8            main@currentScreen 00AF                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1042 1B24                         l1109 246C  
                       l2015 24F2                         l2103 1A5A                         l2113 1AC4  
                       l2105 1A62                         l2107 1A68                         l2043 16B0  
                       l2035 168E                         l2203 131A                         l2109 1A90  
                       l2029 165E                         l2213 1360                         l2141 10F4  
                       l2143 10F8                         l2313 2208                         l2081 182C  
                       l2057 173E                         l2065 17B4                         l2209 1356  
                       l2161 1120                         l2153 1114                         l2145 1108  
                       l2219 1378                         l2317 223E                         l2181 11F8  
                       l2165 112A                         l2157 111A                         l2149 110E  
                       l2421 1E02                         l2087 1A00                         l2183 1206  
                       l2167 116C                         l2335 1C06                         l2097 1A4A  
                       l2089 1A04                         l2433 1E78                         l2601 1998  
                       l2347 219E                         l2179 11DA                         l2267 234E  
                       l2349 21AA                         l2269 2374                         l2429 1E60  
                       l2359 21DE                         l2279 23D4                         l2609 19DE  
                       l2483 1550                         l1941 251A                         l2469 14B6  
                       l1927 1EBE                         l1937 2504                         l1945 265C  
                       l1961 1F60                         l2577 18D2                         l1947 2660  
                       l1971 1F98                         l1965 1F6E                         ?_pad 0015  
                       l1975 1FC6                         l1967 1F80                         STR_1 10A0  
                       STR_2 1040                         STR_3 10A5                         STR_4 105B  
                       STR_5 1065                         STR_6 1080                         STR_7 1088  
                       STR_8 108E                         STR_9 1094                         u1010 1EB6  
                       u1030 1EFE                         u1200 25F0                         u1120 25BE  
                       u1130 25C0                         u1220 24EE                         u1140 255E  
                       u1060 258E                         u1300 171C                         u1150 2560  
                       u1070 2590                         u1310 171E                         u2007 2292  
                       u1160 2454                         u1240 1638                         u2017 22A4  
                       u1410 1A46                         u1170 2456                         u1330 1790  
                       u2027 22C6                         u1340 17C4                         u1260 16AC  
                       u2037 268A                         u1190 25EE                         u1430 1AF4  
                       u1270 16E2                         u2047 2694                         u1335 177E  
                       u1440 1AF6                         u1360 17E6                         u1280 16E4  
                       _LATD 000F8C                         u1361 17E4                         u1370 17F4  
                       u1380 17FA                         u1540 123E                         u1605 26E8  
                       u1710 21AE                         u1550 1240                         u1606 26EA  
                       u1560 124C                         u1801 261A                         u1650 2236  
                       u1660 226C                         u1580 1280                         u1740 2096  
                       u1750 211C                         u1735 2306                         u1657 222C  
                       u1667 2262                         u1771 1E10                         u1851 1892  
                       u1908 193E                         u1781 1E6E                         u1909 1952  
                       u1928 196C                         u1929 1980                         u1948 19B2  
                       u1949 19C6                         u1888 1910                         u1977 198E  
                       u1889 1924                         u1987 19D4                         u1997 227A  
      enterKey@currentScreen 007A      __size_of_moveCursorDown 0086                         _dbuf 0190  
                       _atoi 19EE                         _main 1856                         _keys 1001  
                       _prec 00E3                         _nout 00DF                         pad@i 001C  
                       pad@p 0019                         fsr1h 000FE2                         fsr2h 000FDA  
                       indf1 000FE7                         indf2 000FDF                         fsr1l 000FE1  
                       pad@w 001E                         fsr2l 000FD9                         btemp 007F  
                       _xtoa 1624              ??_printDateTime 007C                         prodh 000FF4  
                       prodl 000FF3                         start 000E                __CFG_IESO$OFF 000000  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                        ??_pad 001B  
      I2C_Master_Read@ackBit 0002             ?_I2C_Master_Init 000E             ?_I2C_Master_Read 0001  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_atoi 0008  
                      ?_main 0001                        STR_10 109A                        STR_11 1078  
                      STR_20 10A0                        STR_12 1045                        STR_21 10AA  
                      STR_13 1050                        STR_22 1078                        STR_14 1038  
                      STR_23 10AA                        STR_15 10AB                        STR_24 10A0  
                      STR_16 10A0                        STR_25 1029                        STR_17 106F  
                      STR_18 1029                        STR_26 1018                        STR_27 1078  
                      STR_19 1080                        STR_28 1029              __end_of_backKey 2624  
            __end_of___lldiv 21FE                        ?_xtoa 0020                        i2l217 2716  
               vfpfcnvrt@fmt 0049                 vfpfcnvrt@llu 0051                        _PORTB 000F81  
                      _TRISC 000F94                        _TRISD 000F95                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 274A               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
               main@keypress 00AD               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000         backKey@currentScreen 0001                __CFG_WRTD$OFF 000000  
            __end_of_initLCD 22DE               __CFG_EBTRB$OFF 000000                        _flags 00E5  
                      _fputc 1EA6              __end_of_isalpha 2566                        _fputs 24FA  
     __size_of_LCD_write_str 0076              __end_of_isdigit 25F6                        atoi@n 0015  
           __end_of_RTC_Init 2652                        pad@fp 0015                        atoi@s 0008  
                      _width 00E1                        _putch 274A              __end_of_islower 2596  
            __end_of_isspace 24FA              __end_of_isupper 25C6                        pclath 000FFA  
                      tablat 000FF5              send_nibble@data 0002                        plusw1 000FE3  
                      plusw2 000FDB              __end_of_pulse_e 26A6                        ttemp5 0080  
                      ttemp6 0083                        ttemp7 0087                        status 000FD8  
I2C_Master_Read@receivedByte 0003                        wtemp8 0080              __end_of_sprintf 242C  
                      xtoa@c 0045                        xtoa@d 0022                        xtoa@i 0043  
                      xtoa@n 003B                        xtoa@p 0037                        xtoa@w 0039  
                      xtoa@x 002A              __end_of_toupper 2476               __CFG_PBADEN$ON 000000  
               _toupper$1314 000D      __size_of_LCD_set_cursor 004E              __initialization 2476  
               __end_of_atoi 1B2E                 __end_of_main 19EE                 __end_of_keys 1012  
               __end_of_xtoa 1856                       ??_atoi 000A                       ??_main 00AC  
                     ??_xtoa 002B           RTC_SetDateTime@rtc 0004                __activetblptr 000002  
           ?_RTC_SetDateTime 0004            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0002  
         ??_I2C_Master_Start 0002                       _ADCON1 000FC1           ??_I2C_Master_Write 0004  
               ?_send_nibble 0001                       ?_fputc 0005                       ?_fputs 000E  
                     ?_putch 0001                       _INT1IE 007F83                       _INT1IF 007F80  
              vfpfcnvrt@done 0059                       _SSPADD 000FC8                       _SSPBUF 000FC9  
             __CFG_XINST$OFF 000000                 vfprintf@cfmt 0064             __end_of_high_isr 271A  
              _LCD_write_str 21FE                       ___wmul 26A6               __CFG_STVREN$ON 000000  
           __end_of_enterKey 1EA6                    ??_backKey 0003                    ??___lldiv 0009  
 printDateTime@currentScreen 007A                       clear_0 249C                       clear_1 24A8  
                  ??_lcdInst 0004                       pad@buf 0017                       _strlen 2652  
                  ??_initLCD 0005                       fputc@c 0005                       fputs@c 0012  
                     fputs@i 0013                       fputs@s 000E                    ??_isalpha 0003  
                  ??_isdigit 0003                    ??_islower 0003                 __mediumconst 0000  
                  ??_isspace 0003                       tblptrh 000FF7                    ??_isupper 0003  
                     tblptrl 000FF6                       tblptru 000FF8             __end_of_vfprintf 2390  
                  ??_pulse_e 0001                 enterKey@temp 0080                    ??_sprintf 0070  
               ?_printScreen 00A8                       xtoa@fp 0020                    ??_toupper 0009  
      pulse_e@interruptState 0001               _moveCursorDown 20F6                   __accesstop 0080  
    __end_of__initialization 24AE                ___rparam_used 000001               __pcstackCOMRAM 0001  
             ?_LCD_write_str 0005                 __pidataBANK1 1FE0                __end_of_fputc 1F46  
              __end_of_fputs 2532                __end_of_putch 2756                    ?_RTC_Init 0001  
            _key_was_pressed 00E7                      ??_fputc 0009                      ??_fputs 0012  
     __end_of_moveCursorDown 217C     __size_of_RTC_GetDateTime 00BE                      ??_putch 0004  
                 __pbssBANK0 00DF                   __pbssBANK1 0190               _LCD_set_cursor 2390  
                    ?___wmul 0001                ?_moveCursorUp 0009           __size_of_send_byte 0012  
                 ??_RTC_Init 0004                      ?_strlen 0001               LCD_write_str@i 0009  
         __size_of_vfpfcnvrt 02FE                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
            ?_moveCursorDown 0009                    ?_high_isr 0001                      _SSPSTAT 000FC7  
                  ?_enterKey 007A         __size_of_send_nibble 0016       __end_of_LCD_set_cursor 23DE  
                 _homeScreen 0160              ??_LCD_write_str 0007        __end_of_printDateTime 1C58  
                    __Hparam 0000                      __Lparam 0000               ??_moveCursorUp 000B  
                    _backKey 25F6                      ___lldiv 217C              __size_of___wmul 0026  
                  ?_vfprintf 005E                 __psmallconst 1000                      __pcinit 2476  
                    __ramtop 1000                      _lcdInst 273E                      __ptext0 1856  
                    __ptext1 13AC                      __ptext2 1B2E                      __ptext3 1D2C  
                    __ptext4 26CC                      __ptext5 2070                      __ptext6 20F6  
                    __ptext7 2390                      __ptext8 2274                      __ptext9 273E  
            __size_of_strlen 002A                      _initLCD 2274                      _logList 0130  
               __size_of_pad 009A                      _isalpha 2532                      _isdigit 25C6  
                    _islower 2566                      _isspace 24BC                      _isupper 2596  
   __size_of_I2C_Master_Init 005C     __size_of_I2C_Master_Read 0024     __size_of_I2C_Master_Wait 0012  
   __size_of_I2C_Master_Stop 0008                      atoi@neg 000E                      _pulse_e 267C  
                    _sprintf 23DE                   ??_high_isr 0001               __pintcode_body 2706  
                    _toupper 242C         end_of_initialization 24AE        __end_of_LCD_SIZE_HORZ 1018  
                 ??_enterKey 007C            __end_of_send_byte 272C        __end_of_LCD_SIZE_VERT 1017  
       __size_of_printScreen 0278                      fputc@fp 0007             LCD_write_str@str 0005  
              __Lmediumconst 0000                      int_func 2706                      fputs@fp 0010  
            ?_LCD_set_cursor 0005    __size_of_I2C_Master_Start 0008            ??_RTC_GetDateTime 0006  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0005              ___lldiv@counter 000D  
          __end_of_vfpfcnvrt 13AC                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                 ??_vfprintf 0064                      strlen@a 0003                      strlen@s 0001  
   printScreen@currentScreen 00A8                    _TRISBbits 000F93                    _TRISCbits 000F94  
   __size_of_RTC_SetDateTime 00D4                send_byte@data 0003                  vfpfcnvrt@ap 004B  
                vfpfcnvrt@fp 0047               __end_of___wmul 26CC            __size_of_RTC_Init 002E  
             __end_of_strlen 267C          start_initialization 2476                  __end_of_pad 1FE0  
          LCD_set_cursor@row 0005         __end_of_moveCursorUp 20F6            ??_I2C_Master_Init 0012  
          ??_I2C_Master_Read 0002            ??_I2C_Master_Wait 0001            ??_I2C_Master_Stop 0002  
                vfprintf@fmt 0060                     ??___wmul 0005         LCD_set_cursor@column 0007  
  moveCursorUp@currentScreen 0009     I2C_Master_Init@clockFreq 000E                  __pdataBANK1 0100  
           __CFG_LPT1OSC$OFF 000000                     ??_strlen 0003  moveCursorDown@currentScreen 0009  
           ??_moveCursorDown 000B                __pcstackBANK0 0080            __size_of_high_isr 2712  
                  _atoi$1217 0010                    _atoi$1218 0014                    _atoi$1219 0012  
          __size_of_enterKey 00BC             _I2C_Master_Start 2768             _I2C_Master_Write 2756  
          ??_RTC_SetDateTime 0006            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
                   ?_backKey 0001                     ?___lldiv 0001                     ?_lcdInst 0001  
          __size_of_vfprintf 0056                     ?_initLCD 0001                  __smallconst 1000  
                   ?_isalpha 0001                     ?_isdigit 0001                     ?_islower 0001  
                   ?_isspace 0001                     ?_isupper 0001              _RTC_GetDateTime 1D2C  
              ??_send_nibble 0002                     ?_pulse_e 0001             ??_LCD_set_cursor 0009  
                   ?_sprintf 0066               __size_of_fputc 00A0               __size_of_fputs 0038  
                   ?_toupper 0007               __size_of_putch 000C               ___wmul@product 0005  
                   _LATDbits 000F8C                    _send_byte 271A               _LCD_LINE1_ADDR 1015  
             _LCD_LINE2_ADDR 1014               _LCD_LINE3_ADDR 1013               _LCD_LINE4_ADDR 1012  
      __end_of_LCD_write_str 2274             __CFG_WDTPS$32768 000000                    _vfpfcnvrt 10AE  
                   _RTC_Init 2624            ___wmul@multiplier 0001        __size_of_moveCursorUp 0086  
     __size_of_printDateTime 012A                 _isspace$1244 0007                ??_printScreen 00AA  
                 vfpfcnvrt@c 005D                    copy_data0 248A             _runningOperation 0100  
     __end_of_LCD_LINE1_ADDR 1016       __end_of_LCD_LINE2_ADDR 1015       __end_of_LCD_LINE3_ADDR 1014  
     __end_of_LCD_LINE4_ADDR 1013          __end_of_send_nibble 2706                   ?_send_byte 0001  
                   __Hrparam 0000                   vfprintf@ap 0062                     __Lrparam 0000  
                 vfprintf@fp 005E           __CFG_BOREN$SBORDIS 000000                 _moveCursorUp 2070  
           __size_of_backKey 002E             __size_of___lldiv 0082                   ?_vfpfcnvrt 0047  
    __end_of_RTC_GetDateTime 1DEA             __size_of_lcdInst 000C                   sprintf@fmt 0068  
            _I2C_Master_Init 22DE              _I2C_Master_Read 26CC             __size_of_initLCD 006A  
            _I2C_Master_Wait 272C              _I2C_Master_Stop 2760             __size_of_isalpha 0034  
           __size_of_isdigit 0030             __size_of_islower 0030             __size_of_isspace 003E  
                   __ptext10 1DEA                     __ptext11 23DE                     __ptext20 1EA6  
                   __ptext12 233A                     __ptext21 2596                     __ptext13 10AE  
                   __ptext30 26F0                     __ptext22 2532                     __ptext14 1624  
                   __ptext31 267C                     __ptext23 19EE                     __ptext15 242C  
                   __ptext40 217C                     __ptext32 25F6                     __ptext24 24BC  
                   __ptext16 2566                     __ptext33 1C58                     __ptext25 25C6  
                   __ptext17 1F46                     __ptext34 2624                     __ptext26 26A6  
                   __ptext18 2652                     __ptext35 2756                     __ptext27 21FE  
                   __ptext19 24FA                     __ptext36 2760                     __ptext28 274A  
                   __ptext37 2768                     __ptext29 271A                     __ptext38 272C  
                   __ptext39 22DE             __size_of_isupper 0030                     _high_isr 0008  
           __size_of_pulse_e 002A             __size_of_sprintf 004E             __size_of_toupper 004A  
                   _enterKey 1DEA                __size_of_atoi 0140                __size_of_main 0198  
              __size_of_xtoa 0232          __end_of_printScreen 1624                _printDateTime 1B2E  
      printDateTime@tempDate 0080        printDateTime@tempTime 0094                     int$flags 007F  
                   _xtoa$746 0033                     _xtoa$747 0035                     _vfprintf 233A  
                   main@temp 00AE  I2C_Master_Write@byteToWrite 0002                    putch@data 0004  
   __end_of_I2C_Master_Start 2770     __end_of_I2C_Master_Write 2760                   _INTCONbits 000FF2  
                   isalpha@c 0001                     isdigit@c 0001           RTC_GetDateTime@rtc 0004  
            _RTC_SetDateTime 1C58                  _send_nibble 26F0                     intlevel2 0000  
                  sprintf@ap 0072                _LCD_SIZE_HORZ 1017                     islower@c 0001  
              _LCD_SIZE_VERT 1016                     isspace@c 0001             ___lldiv@dividend 0001  
                ??_send_byte 0003                     isupper@c 0001               ?_printDateTime 007A  
    __end_of_I2C_Master_Init 233A      __end_of_I2C_Master_Read 26F0      __end_of_I2C_Master_Wait 273E  
    __end_of_I2C_Master_Stop 2768                  ??_vfpfcnvrt 004D                  lcdInst@data 0004  
              _vfpfcnvrt$762 005B             ?_RTC_GetDateTime 0004                     sprintf@f 0074  
                   sprintf@s 0066             ___lldiv@quotient 0009                     toupper@c 0007  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5                  _printScreen 13AC  
